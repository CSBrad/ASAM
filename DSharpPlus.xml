<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DSharpPlus</name>
    </assembly>
    <members>
        <member name="T:DSharpPlus.AnsiColor">
            <summary>
            A list of ansi colors supported by Discord.
            </summary>
            <remarks>
            Background support in the client is dodgy at best.
            These colors are mapped as per the ansi standard, but may not appear correctly in the client.
            </remarks>
        </member>
        <member name="T:DSharpPlus.AsyncEvents.AsyncEvent">
            <summary>
            Represents a non-generic base for async events.
            </summary>
        </member>
        <member name="T:DSharpPlus.AsyncEvents.AsyncEventArgs">
            <summary>
            A base class for arguments passed to an event handler.
            </summary>
        </member>
        <member name="P:DSharpPlus.AsyncEvents.AsyncEventArgs.Handled">
            <summary>
            [UNUSED] This used to set whether an event was handled.
            </summary>
        </member>
        <member name="T:DSharpPlus.AsyncEvents.AsyncEventHandler`2">
            <summary>
            Provides a registration surface for asynchronous events using C# language event syntax. 
            </summary>
            <typeparam name="TSender">The type of the event dispatcher.</typeparam>
            <typeparam name="TArgs">The type of the argument object for this event.</typeparam>
            <param name="sender">The instance that dispatched this event.</param>
            <param name="args">The arguments passed to this event.</param>
        </member>
        <member name="T:DSharpPlus.AsyncEvents.AsyncEventExceptionHandler`2">
            <summary>
            Provides a registration surface for a handler for exceptions raised by an async event or its registered
            event handlers.
            </summary>
            <typeparam name="TSender">The type of the event dispatcher.</typeparam>
            <typeparam name="TArgs">The type of the argument object for this event.</typeparam>
            <param name="event">The async event that threw this exception.</param>
            <param name="exception">The thrown exception.</param>
            <param name="handler">The async event handler that threw this exception.</param>
            <param name="sender">The instance that dispatched this event.</param>
            <param name="args">The arguments passed to this event.</param>
        </member>
        <member name="T:DSharpPlus.AsyncEvents.AsyncEvent`2">
            <summary>
            Provides an implementation of an asynchronous event. Registered handlers are executed asynchronously,
            in parallel, and potential exceptions are caught and sent to the specified exception handler.
            </summary>
            <typeparam name="TSender">The type of the object to dispatch this event.</typeparam>
            <typeparam name="TArgs">The type of the argument object for this event.</typeparam>
        </member>
        <member name="M:DSharpPlus.AsyncEvents.AsyncEvent`2.Register(DSharpPlus.AsyncEvents.AsyncEventHandler{`0,`1})">
            <summary>
            Registers a new handler for this event.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the specified handler was null.</exception>
        </member>
        <member name="M:DSharpPlus.AsyncEvents.AsyncEvent`2.Unregister(DSharpPlus.AsyncEvents.AsyncEventHandler{`0,`1})">
            <summary>
            Unregisters a specific handler from this event.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the specified handler was null.</exception>
        </member>
        <member name="M:DSharpPlus.AsyncEvents.AsyncEvent`2.UnregisterAll">
            <summary>
            Unregisters all handlers from this event.
            </summary>
        </member>
        <member name="M:DSharpPlus.AsyncEvents.AsyncEvent`2.InvokeAsync(`0,`1)">
            <summary>
            Raises this event, invoking all registered handlers in parallel.
            </summary>
            <param name="sender">The instance that dispatched this event.</param>
            <param name="args">The arguments passed to this event.</param>
        </member>
        <member name="T:DSharpPlus.AsyncManualResetEvent">
            <summary>
            Implements an async version of a <see cref="T:System.Threading.ManualResetEvent"/>
            This class does currently not support Timeouts or the use of CancellationTokens
            </summary>
        </member>
        <member name="T:DSharpPlus.BaseExtension">
            <summary>
            Represents base for all DSharpPlus extensions. To implement your own extension, extend this class, and implement its abstract members.
            </summary>
        </member>
        <member name="P:DSharpPlus.BaseExtension.Client">
            <summary>
            Gets the instance of <see cref="T:DSharpPlus.DiscordClient"/> this extension is attached to.
            </summary>
        </member>
        <member name="M:DSharpPlus.BaseExtension.Setup(DSharpPlus.DiscordClient)">
            <summary>
            Initializes this extension for given <see cref="T:DSharpPlus.DiscordClient"/> instance.
            </summary>
            <param name="client">Discord client to initialize for.</param>
        </member>
        <member name="T:DSharpPlus.BaseDiscordClient">
            <summary>
            Represents a common base for various Discord client implementations.
            </summary>
        </member>
        <member name="P:DSharpPlus.BaseDiscordClient.Logger">
            <summary>
            Gets the instance of the logger for this client.
            </summary>
        </member>
        <member name="P:DSharpPlus.BaseDiscordClient.VersionString">
            <summary>
            Gets the string representing the version of D#+.
            </summary>
        </member>
        <member name="P:DSharpPlus.BaseDiscordClient.CurrentUser">
            <summary>
            Gets the current user.
            </summary>
        </member>
        <member name="P:DSharpPlus.BaseDiscordClient.CurrentApplication">
            <summary>
            Gets the current application.
            </summary>
        </member>
        <member name="P:DSharpPlus.BaseDiscordClient.Guilds">
            <summary>
            Gets the cached guilds for this client.
            </summary>
        </member>
        <member name="P:DSharpPlus.BaseDiscordClient.UserCache">
            <summary>
            Gets the cached users for this client.
            </summary>
        </member>
        <member name="P:DSharpPlus.BaseDiscordClient.VoiceRegions">
            <summary>
            Gets the list of available voice regions. Note that this property will not contain VIP voice regions.
            </summary>
        </member>
        <member name="P:DSharpPlus.BaseDiscordClient.InternalVoiceRegions">
            <summary>
            Gets the list of available voice regions. This property is meant as a way to modify <see cref="P:DSharpPlus.BaseDiscordClient.VoiceRegions"/>.
            </summary>
        </member>
        <member name="M:DSharpPlus.BaseDiscordClient.#ctor(DSharpPlus.DiscordConfiguration)">
            <summary>
            Initializes this Discord API client.
            </summary>
            <param name="config">Configuration for this client.</param>
        </member>
        <member name="M:DSharpPlus.BaseDiscordClient.GetCurrentApplicationAsync">
            <summary>
            Gets the current API application.
            </summary>
            <returns>Current API application.</returns>
        </member>
        <member name="M:DSharpPlus.BaseDiscordClient.ListVoiceRegionsAsync">
            <summary>
            Gets a list of regions
            </summary>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.BaseDiscordClient.InitializeAsync">
            <summary>
            Initializes this client. This method fetches information about current user, application, and voice regions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.BaseDiscordClient.GetGatewayInfoAsync(System.String)">
            <summary>
            Gets the current gateway info for the provided token.
            <para>If no value is provided, the configuration value will be used instead.</para>
            </summary>
            <returns>A gateway info object.</returns>
        </member>
        <member name="M:DSharpPlus.BaseDiscordClient.Dispose">
            <summary>
            Disposes this client.
            </summary>
        </member>
        <member name="T:DSharpPlus.DiscordClient">
            <summary>
            A Discord API wrapper.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordClient.GatewayVersion">
            <summary>
            Gets the gateway protocol version.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordClient.GatewayInfo">
            <summary>
            Gets the gateway session information for this client.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordClient.GatewayUri">
            <summary>
            Gets the gateway URL.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordClient.ShardCount">
            <summary>
            Gets the total number of shards the bot is connected to.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordClient.ShardId">
            <summary>
            Gets the currently connected shard ID.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordClient.Intents">
            <summary>
            Gets the intents configured for this client.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordClient.PrivateChannels">
            <summary>
            Gets a dictionary of DM channels that have been cached by this client. The dictionary's key is the channel
            ID.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordClient.Guilds">
            <summary>
            Gets a dictionary of guilds that this client is in. The dictionary's key is the guild ID. Note that the
            guild objects in this dictionary will not be filled in if the specific guilds aren't available (the
            <see cref="E:DSharpPlus.DiscordClient.GuildAvailable"/> or <see cref="E:DSharpPlus.DiscordClient.GuildDownloadCompleted"/> events haven't been fired yet)
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordClient.Ping">
            <summary>
            Gets the WS latency for this client.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordClient.Presences">
            <summary>
            Gets the collection of presences held by this client.
            </summary>
        </member>
        <member name="M:DSharpPlus.DiscordClient.#ctor(DSharpPlus.DiscordConfiguration)">
            <summary>
            Initializes a new instance of DiscordClient.
            </summary>
            <param name="config">Specifies configuration parameters.</param>
        </member>
        <member name="M:DSharpPlus.DiscordClient.AddExtension(DSharpPlus.BaseExtension)">
            <summary>
            Registers an extension with this client.
            </summary>
            <param name="ext">Extension to register.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetExtension``1">
            <summary>
            Retrieves a previously-registered extension from this client.
            </summary>
            <typeparam name="T">Type of extension to retrieve.</typeparam>
            <returns>The requested extension.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.ConnectAsync(DSharpPlus.Entities.DiscordActivity,System.Nullable{DSharpPlus.Entities.UserStatus},System.Nullable{System.DateTimeOffset})">
            <summary>
            Connects to the gateway
            </summary>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when an invalid token was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.DiscordClient.DisconnectAsync">
            <summary>
            Disconnects from the gateway
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetStickerAsync(System.UInt64)">
            <summary>
            Gets a sticker.
            </summary>
            <param name="stickerId">The ID of the sticker.</param>
            <returns>The specified sticker</returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetStickerPacksAsync">
            <summary>
            Gets a collection of sticker packs that may be used by nitro users.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetUserAsync(System.UInt64,System.Boolean)">
            <summary>
            Gets a user
            </summary>
            <param name="userId">ID of the user</param>
            <param name="updateCache">Whether to always make a REST request and update cache. Passing true will update the user, updating stale properties such as <see cref="P:DSharpPlus.Entities.DiscordUser.BannerHash"/>.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetChannelAsync(System.UInt64)">
            <summary>
            Gets a channel
            </summary>
            <param name="id">The ID of the channel to get.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.DiscordClient.SendMessageAsync(DSharpPlus.Entities.DiscordChannel,System.String)">
            <summary>
            Sends a message
            </summary>
            <param name="channel">Channel to send to.</param>
            <param name="content">Message content to send.</param>
            <returns>The Discord Message that was sent.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.SendMessages"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.DiscordClient.SendMessageAsync(DSharpPlus.Entities.DiscordChannel,DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Sends a message
            </summary>
            <param name="channel">Channel to send to.</param>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The Discord Message that was sent.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.SendMessages"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.DiscordClient.SendMessageAsync(DSharpPlus.Entities.DiscordChannel,System.String,DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Sends a message
            </summary>
            <param name="channel">Channel to send to.</param>
            <param name="content">Message content to send.</param>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The Discord Message that was sent.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.SendMessages"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.DiscordClient.SendMessageAsync(DSharpPlus.Entities.DiscordChannel,DSharpPlus.Entities.DiscordMessageBuilder)">
            <summary>
            Sends a message
            </summary>
            <param name="channel">Channel to send to.</param>
            <param name="builder">The Discord Message builder.</param>
            <returns>The Discord Message that was sent.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.SendMessages"/> permission if TTS is false and <see cref="F:DSharpPlus.Permissions.SendTtsMessages"/> if TTS is true.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.DiscordClient.SendMessageAsync(DSharpPlus.Entities.DiscordChannel,System.Action{DSharpPlus.Entities.DiscordMessageBuilder})">
            <summary>
            Sends a message
            </summary>
            <param name="channel">Channel to send to.</param>
            <param name="action">The Discord Message builder.</param>
            <returns>The Discord Message that was sent.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.SendMessages"/> permission if TTS is false and <see cref="F:DSharpPlus.Permissions.SendTtsMessages"/> if TTS is true.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.DiscordClient.CreateGuildAsync(System.String,System.String,DSharpPlus.Entities.Optional{System.IO.Stream},System.Nullable{DSharpPlus.Entities.VerificationLevel},System.Nullable{DSharpPlus.Entities.DefaultMessageNotifications},System.Nullable{DSharpPlus.SystemChannelFlags})">
            <summary>
            Creates a guild. This requires the bot to be in less than 10 guilds total.
            </summary>
            <param name="name">Name of the guild.</param>
            <param name="region">Voice region of the guild.</param>
            <param name="icon">Stream containing the icon for the guild.</param>
            <param name="verificationLevel">Verification level for the guild.</param>
            <param name="defaultMessageNotifications">Default message notification settings for the guild.</param>
            <param name="systemChannelFlags">System channel flags fopr the guild.</param>
            <returns>The created guild.</returns>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.DiscordClient.CreateGuildFromTemplateAsync(System.String,System.String,DSharpPlus.Entities.Optional{System.IO.Stream})">
            <summary>
            Creates a guild from a template. This requires the bot to be in less than 10 guilds total.
            </summary>
            <param name="code">The template code.</param>
            <param name="name">Name of the guild.</param>
            <param name="icon">Stream containing the icon for the guild.</param>
            <returns>The created guild.</returns>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetGuildAsync(System.UInt64,System.Nullable{System.Boolean})">
            <summary>
            Gets a guild.
            <para>Setting <paramref name="withCounts"/> to true will make a REST request.</para>
            </summary>
            <param name="id">The guild ID to search for.</param>
            <param name="withCounts">Whether to include approximate presence and member counts in the returned guild.</param>
            <returns>The requested Guild.</returns>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetGuildPreviewAsync(System.UInt64)">
            <summary>
            Gets a guild preview
            </summary>
            <param name="id">The guild ID.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetInviteByCodeAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Gets an invite.
            </summary>
            <param name="code">The invite code.</param>
            <param name="withCounts">Whether to include presence and total member counts in the returned invite.</param>
            <param name="withExpiration">Whether to include the expiration date in the returned invite.</param>
            <returns>The requested Invite.</returns>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the invite does not exists.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetConnectionsAsync">
            <summary>
            Gets a list of connections
            </summary>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetWebhookAsync(System.UInt64)">
            <summary>
            Gets a webhook
            </summary>
            <param name="id">The ID of webhook to get.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the webhook does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetWebhookWithTokenAsync(System.UInt64,System.String)">
            <summary>
            Gets a webhook
            </summary>
            <param name="id">The ID of webhook to get.</param>
            <param name="token"></param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the webhook does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.DiscordClient.UpdateStatusAsync(DSharpPlus.Entities.DiscordActivity,System.Nullable{DSharpPlus.Entities.UserStatus},System.Nullable{System.DateTimeOffset})">
            <summary>
            Updates current user's activity and status.
            </summary>
            <param name="activity">Activity to set.</param>
            <param name="userStatus">Status of the user.</param>
            <param name="idleSince">Since when is the client performing the specified activity.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.UpdateCurrentUserAsync(System.String,DSharpPlus.Entities.Optional{System.IO.Stream})">
            <summary>
            Edits current user.
            </summary>
            <param name="username">New username.</param>
            <param name="avatar">New avatar.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the user does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetTemplateAsync(System.String)">
            <summary>
            Gets a guild template by the code.
            </summary>
            <param name="code">The code of the template.</param>
            <returns>The guild template for the code.</returns>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetGlobalApplicationCommandsAsync">
            <summary>
            Gets all the global application commands for this application.
            </summary>
            <returns>A list of global application commands.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.BulkOverwriteGlobalApplicationCommandsAsync(System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordApplicationCommand})">
            <summary>
            Overwrites the existing global application commands. New commands are automatically created and missing commands are automatically deleted.
            </summary>
            <param name="commands">The list of commands to overwrite with.</param>
            <returns>The list of global commands.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.CreateGlobalApplicationCommandAsync(DSharpPlus.Entities.DiscordApplicationCommand)">
            <summary>
            Creates or overwrites a global application command.
            </summary>
            <param name="command">The command to create.</param>
            <returns>The created command.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetGlobalApplicationCommandAsync(System.UInt64)">
            <summary>
            Gets a global application command by its id.
            </summary>
            <param name="commandId">The ID of the command to get.</param>
            <returns>The command with the ID.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetGlobalApplicationCommandAsync(System.String)">
            <summary>
            Gets a global application command by its name.
            </summary>
            <param name="commandName">The name of the command to get.</param>
            <returns>The command with the name.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.EditGlobalApplicationCommandAsync(System.UInt64,System.Action{DSharpPlus.Net.Models.ApplicationCommandEditModel})">
            <summary>
            Edits a global application command.
            </summary>
            <param name="commandId">The ID of the command to edit.</param>
            <param name="action">Action to perform.</param>
            <returns>The edited command.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.DeleteGlobalApplicationCommandAsync(System.UInt64)">
            <summary>
            Deletes a global application command.
            </summary>
            <param name="commandId">The ID of the command to delete.</param>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetGuildApplicationCommandsAsync(System.UInt64)">
            <summary>
            Gets all the application commands for a guild.
            </summary>
            <param name="guildId">The ID of the guild to get application commands for.</param>
            <returns>A list of application commands in the guild.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.BulkOverwriteGuildApplicationCommandsAsync(System.UInt64,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordApplicationCommand})">
            <summary>
            Overwrites the existing application commands in a guild. New commands are automatically created and missing commands are automatically deleted.
            </summary>
            <param name="guildId">The ID of the guild.</param>
            <param name="commands">The list of commands to overwrite with.</param>
            <returns>The list of guild commands.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.CreateGuildApplicationCommandAsync(System.UInt64,DSharpPlus.Entities.DiscordApplicationCommand)">
            <summary>
            Creates or overwrites a guild application command.
            </summary>
            <param name="guildId">The ID of the guild to create the application command in.</param>
            <param name="command">The command to create.</param>
            <returns>The created command.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.GetGuildApplicationCommandAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets a application command in a guild by its ID.
            </summary>
            <param name="guildId">The ID of the guild the application command is in.</param>
            <param name="commandId">The ID of the command to get.</param>
            <returns>The command with the ID.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.EditGuildApplicationCommandAsync(System.UInt64,System.UInt64,System.Action{DSharpPlus.Net.Models.ApplicationCommandEditModel})">
            <summary>
            Edits a application command in a guild.
            </summary>
            <param name="guildId">The ID of the guild the application command is in.</param>
            <param name="commandId">The ID of the command to edit.</param>
            <param name="action">Action to perform.</param>
            <returns>The edited command.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.DeleteGuildApplicationCommandAsync(System.UInt64,System.UInt64)">
            <summary>
            Deletes a application command in a guild.
            </summary>
            <param name="guildId">The ID of the guild to delete the application command in.</param>
            <param name="commandId">The ID of the command.</param>
        </member>
        <member name="M:DSharpPlus.DiscordClient.Dispose">
            <summary>
            Disposes your DiscordClient.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.SocketErrored">
            <summary>
            Fired whenever a WebSocket error occurs within the client.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.SocketOpened">
            <summary>
            Fired whenever WebSocket connection is established.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.SocketClosed">
            <summary>
            Fired whenever WebSocket connection is terminated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.Ready">
            <summary>
            Fired when this client has successfully completed its handshake with the websocket gateway.
            </summary>
            <remarks>
            <i><see cref="P:DSharpPlus.DiscordClient.Guilds"/> will not be populated when this event is fired.</i><br/>
            See also: <see cref="E:DSharpPlus.DiscordClient.GuildAvailable"/>, <see cref="E:DSharpPlus.DiscordClient.GuildDownloadCompleted"/>
            </remarks>
        </member>
        <member name="E:DSharpPlus.DiscordClient.Resumed">
            <summary>
            Fired whenever a session is resumed.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.Heartbeated">
            <summary>
            Fired on received heartbeat ACK.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.Zombied">
            <summary>
            Fired on heartbeat attempt cancellation due to too many failed heartbeats.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.ChannelCreated">
            <summary>
            Fired when a new channel is created.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.ChannelUpdated">
            <summary>
            Fired when a channel is updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.ChannelDeleted">
            <summary>
            Fired when a channel is deleted
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.DmChannelDeleted">
            <summary>
            Fired when a dm channel is deleted
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.DirectMessages"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.ChannelPinsUpdated">
            <summary>
            Fired whenever a channel's pinned message list is updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildCreated">
            <summary>
            Fired when the user joins a new guild.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
            <remarks>[alias="GuildJoined"][alias="JoinedGuild"]</remarks>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildAvailable">
            <summary>
            Fired when a guild is becoming available.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildUpdated">
            <summary>
            Fired when a guild is updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildDeleted">
            <summary>
            Fired when the user leaves or is removed from a guild.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildUnavailable">
            <summary>
            Fired when a guild becomes unavailable.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildDownloadCompleted">
            <summary>
            Fired when all guilds finish streaming from Discord.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildEmojisUpdated">
            <summary>
            Fired when a guilds emojis get updated
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildEmojis"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildIntegrationsUpdated">
            <summary>
            Fired when a guild integration is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildBanAdded">
            <summary>
            Fired when a guild ban gets added
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildBans"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildBanRemoved">
            <summary>
            Fired when a guild ban gets removed
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildBans"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildMemberAdded">
            <summary>
            Fired when a new user joins a guild.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMembers"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildMemberRemoved">
            <summary>
            Fired when a user is removed from a guild (leave/kick/ban).
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMembers"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildMemberUpdated">
            <summary>
            Fired when a guild member is updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMembers"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildMembersChunked">
            <summary>
            Fired in response to Gateway Request Guild Members.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildRoleCreated">
            <summary>
            Fired when a guild role is created.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildRoleUpdated">
            <summary>
            Fired when a guild role is updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.GuildRoleDeleted">
            <summary>
            Fired when a guild role is updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.InviteCreated">
            <summary>
            Fired when an invite is created.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildInvites"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.InviteDeleted">
            <summary>
            Fired when an invite is deleted.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildInvites"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.MessageCreated">
            <summary>
            Fired when a message is created.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMessages"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.MessageAcknowledged">
            <summary>
            Fired when message is acknowledged by the user.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMessages"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.MessageUpdated">
            <summary>
            Fired when a message is updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMessages"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.MessageDeleted">
            <summary>
            Fired when a message is deleted.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMessages"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.MessagesBulkDeleted">
            <summary>
            Fired when multiple messages are deleted at once.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMessages"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.MessageReactionAdded">
            <summary>
            Fired when a reaction gets added to a message.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMessageReactions"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.MessageReactionRemoved">
            <summary>
            Fired when a reaction gets removed from a message.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMessageReactions"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.MessageReactionsCleared">
            <summary>
            Fired when all reactions get removed from a message.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMessageReactions"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.MessageReactionRemovedEmoji">
            <summary>
            Fired when all reactions of a specific reaction are removed from a message.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMessageReactions"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.PresenceUpdated">
            <summary>
            Fired when a presence has been updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildPresences"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.UserSettingsUpdated">
            <summary>
            Fired when the current user updates their settings.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildPresences"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.UserUpdated">
            <summary>
            Fired when properties about the current user change.
            </summary>
            <remarks>
            NB: This event only applies for changes to the <b>current user</b>, the client that is connected to Discord.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildPresences"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </remarks>
        </member>
        <member name="E:DSharpPlus.DiscordClient.VoiceStateUpdated">
            <summary>
            Fired when someone joins/leaves/moves voice channels.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildVoiceStates"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.VoiceServerUpdated">
            <summary>
            Fired when a guild's voice server is updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildVoiceStates"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.ThreadCreated">
            <summary>
            Fired when a thread is created.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.ThreadUpdated">
            <summary>
            Fired when a thread is updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.ThreadDeleted">
            <summary>
            Fired when a thread is deleted.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.ThreadListSynced">
            <summary>
            Fired when the current member gains access to a channel(s) that has threads.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.ThreadMemberUpdated">
            <summary>
            Fired when the thread member for the current user is updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
            <remarks>
            This event is mostly documented for completeness, and it not fired every time
            DM channels in which no prior messages were received or sent.
            </remarks>
        </member>
        <member name="E:DSharpPlus.DiscordClient.ThreadMembersUpdated">
            <summary>
            Fired when the thread members are updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMembers"/> or <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.ApplicationCommandCreated">
            <summary>
            Fired when a new application command is registered.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.ApplicationCommandUpdated">
            <summary>
            Fired when an application command is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.ApplicationCommandDeleted">
            <summary>
            Fired when an application command is deleted.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.IntegrationCreated">
            <summary>
            Fired when an integration is created.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.IntegrationUpdated">
            <summary>
            Fired when an integration is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.IntegrationDeleted">
            <summary>
            Fired when an integration is deleted.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.StageInstanceCreated">
            <summary>
            Fired when a stage instance is created.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.StageInstanceUpdated">
            <summary>
            Fired when a stage instance is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.StageInstanceDeleted">
            <summary>
            Fired when a stage instance is deleted.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.InteractionCreated">
            <summary>
            Fired when an interaction is invoked.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.ComponentInteractionCreated">
            <summary>
            Fired when a component is invoked.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.ModalSubmitted">
            <summary>
            Fired when a modal is submitted. If a modal is closed, this event is not fired.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.ContextMenuInteractionCreated">
            <summary>
            Fired when a user uses a context menu.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.TypingStarted">
            <summary>
            Fired when a user starts typing in a channel.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.UnknownEvent">
            <summary>
            Fired when an unknown event gets received.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.WebhooksUpdated">
            <summary>
            Fired whenever webhooks update.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordClient.ClientErrored">
            <summary>
            Fired whenever an error occurs within an event handler.
            </summary>
        </member>
        <member name="M:DSharpPlus.DiscordClient.SendPayloadAsync``1(DSharpPlus.Net.Abstractions.GatewayOpCode,``0)">
            <summary>
            Sends a raw payload to the gateway. This method is not recommended for use unless you know what you're doing.
            </summary>
            <param name="opCode">The opcode to send to the Discord gateway.</param>
            <param name="data">The data to deserialize.</param>
            <typeparam name="T">The type of data that the object belongs to.</typeparam>
            <returns>A task representing the payload being sent.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordClient.SendPayloadAsync(DSharpPlus.Net.Abstractions.GatewayOpCode,System.Object)">
            <inheritdoc cref="M:DSharpPlus.DiscordClient.SendPayloadAsync``1(DSharpPlus.Net.Abstractions.GatewayOpCode,``0)"/>
            <param name="data">The data to deserialize.</param>
            <param name="opCode">The opcode to send to the Discord gateway.</param>
        </member>
        <member name="T:DSharpPlus.DiscordShardedClient">
            <summary>
            A Discord client that shards automatically.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordShardedClient.Logger">
            <summary>
            Gets the logger for this client.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordShardedClient.ShardClients">
            <summary>
            Gets all client shards.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordShardedClient.GatewayInfo">
            <summary>
            Gets the gateway info for the client's session.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordShardedClient.CurrentUser">
            <summary>
            Gets the current user.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordShardedClient.CurrentApplication">
            <summary>
            Gets the current application.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordShardedClient.VoiceRegions">
            <summary>
            Gets the list of available voice regions. Note that this property will not contain VIP voice regions.
            </summary>
        </member>
        <member name="F:DSharpPlus.DiscordShardedClient._internalVoiceRegions">
            <summary>
            Gets the list of available voice regions. This property is meant as a way to modify <see cref="P:DSharpPlus.DiscordShardedClient.VoiceRegions"/>.
            </summary>
        </member>
        <member name="M:DSharpPlus.DiscordShardedClient.#ctor(DSharpPlus.DiscordConfiguration)">
            <summary>
            Initializes new auto-sharding Discord client.
            </summary>
            <param name="config">Configuration to use.</param>
        </member>
        <member name="M:DSharpPlus.DiscordShardedClient.StartAsync">
            <summary>
            Initializes and connects all shards.
            </summary>
            <exception cref="T:System.AggregateException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordShardedClient.StopAsync">
            <summary>
            Disconnects and disposes of all shards.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:DSharpPlus.DiscordShardedClient.GetShard(System.UInt64)">
            <summary>
            Gets a shard from a guild ID.
            <para>
                If automatically sharding, this will use the <see cref="M:DSharpPlus.Utilities.GetShardId(System.UInt64,System.Int32)"/> method.
                Otherwise if manually sharding, it will instead iterate through each shard's guild caches.
            </para>
            </summary>
            <param name="guildId">The guild ID for the shard.</param>
            <returns>The found <see cref="T:DSharpPlus.DiscordClient"/> shard. Otherwise <see langword="null"/> if the shard was not found for the guild ID.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordShardedClient.GetShard(DSharpPlus.Entities.DiscordGuild)">
            <summary>
            Gets a shard from a guild.
            <para>
                If automatically sharding, this will use the <see cref="M:DSharpPlus.Utilities.GetShardId(System.UInt64,System.Int32)"/> method.
                Otherwise if manually sharding, it will instead iterate through each shard's guild caches.
            </para>
            </summary>
            <param name="guild">The guild for the shard.</param>
            <returns>The found <see cref="T:DSharpPlus.DiscordClient"/> shard. Otherwise <see langword="null"/> if the shard was not found for the guild.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordShardedClient.UpdateStatusAsync(DSharpPlus.Entities.DiscordActivity,System.Nullable{DSharpPlus.Entities.UserStatus},System.Nullable{System.DateTimeOffset})">
            <summary>
            Updates playing statuses on all shards.
            </summary>
            <param name="activity">Activity to set.</param>
            <param name="userStatus">Status of the user.</param>
            <param name="idleSince">Since when is the client performing the specified activity.</param>
            <returns>Asynchronous operation.</returns>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.SocketErrored">
            <summary>
            Fired whenever a WebSocket error occurs within the client.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.SocketOpened">
            <summary>
            Fired whenever WebSocket connection is established.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.SocketClosed">
            <summary>
            Fired whenever WebSocket connection is terminated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.Ready">
            <summary>
            Fired when the client enters ready state.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.Resumed">
            <summary>
            Fired whenever a session is resumed.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.Heartbeated">
            <summary>
            Fired on received heartbeat ACK.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.Zombied">
            <summary>
            Fired on heartbeat attempt cancellation due to too many failed heartbeats.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.ChannelCreated">
            <summary>
            Fired when a new channel is created.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.ChannelUpdated">
            <summary>
            Fired when a channel is updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.ChannelDeleted">
            <summary>
            Fired when a channel is deleted
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.DmChannelDeleted">
            <summary>
            Fired when a dm channel is deleted
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.DirectMessages"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.ChannelPinsUpdated">
            <summary>
            Fired whenever a channel's pinned message list is updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildCreated">
            <summary>
            Fired when the user joins a new guild.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
            <remarks>[alias="GuildJoined"][alias="JoinedGuild"]</remarks>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildAvailable">
            <summary>
            Fired when a guild is becoming available.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildUpdated">
            <summary>
            Fired when a guild is updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildDeleted">
            <summary>
            Fired when the user leaves or is removed from a guild.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildUnavailable">
            <summary>
            Fired when a guild becomes unavailable.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildDownloadCompleted">
            <summary>
            Fired when all guilds finish streaming from Discord.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildEmojisUpdated">
            <summary>
            Fired when a guild's emojis get updated
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildEmojis"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildStickersUpdated">
            <summary>
            Fired when a guild's stickers get updated
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildEmojis"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildIntegrationsUpdated">
            <summary>
            Fired when a guild integration is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildBanAdded">
            <summary>
            Fired when a guild ban gets added
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildBans"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildBanRemoved">
            <summary>
            Fired when a guild ban gets removed
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildBans"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildMemberAdded">
            <summary>
            Fired when a new user joins a guild.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMembers"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildMemberRemoved">
            <summary>
            Fired when a user is removed from a guild (leave/kick/ban).
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMembers"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildMemberUpdated">
            <summary>
            Fired when a guild member is updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMembers"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildMembersChunked">
            <summary>
            Fired in response to Gateway Request Guild Members.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildRoleCreated">
            <summary>
            Fired when a guild role is created.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildRoleUpdated">
            <summary>
            Fired when a guild role is updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.GuildRoleDeleted">
            <summary>
            Fired when a guild role is updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.InviteCreated">
            <summary>
            Fired when an invite is created.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildInvites"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.InviteDeleted">
            <summary>
            Fired when an invite is deleted.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildInvites"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.MessageCreated">
            <summary>
            Fired when a message is created.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMessages"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.MessageUpdated">
            <summary>
            Fired when a message is updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMessages"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.MessageDeleted">
            <summary>
            Fired when a message is deleted.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMessages"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.MessagesBulkDeleted">
            <summary>
            Fired when multiple messages are deleted at once.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMessages"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.MessageReactionAdded">
            <summary>
            Fired when a reaction gets added to a message.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMessageReactions"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.MessageReactionRemoved">
            <summary>
            Fired when a reaction gets removed from a message.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMessageReactions"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.MessageReactionsCleared">
            <summary>
            Fired when all reactions get removed from a message.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMessageReactions"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.MessageReactionRemovedEmoji">
            <summary>
            Fired when all reactions of a specific reaction are removed from a message.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMessageReactions"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.PresenceUpdated">
            <summary>
            Fired when a presence has been updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildPresences"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.UserSettingsUpdated">
            <summary>
            Fired when the current user updates their settings.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildPresences"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.UserUpdated">
            <summary>
            Fired when properties about the current user change.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildPresences"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
            <remarks>
            NB: This event only applies for changes to the <b>current user</b>, the client that is connected to Discord.
            </remarks>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.VoiceStateUpdated">
            <summary>
            Fired when someone joins/leaves/moves voice channels.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildVoiceStates"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.VoiceServerUpdated">
            <summary>
            Fired when a guild's voice server is updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildVoiceStates"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.ThreadCreated">
            <summary>
            Fired when a thread is created.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.ThreadUpdated">
            <summary>
            Fired when a thread is updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.ThreadDeleted">
            <summary>
            Fired when a thread is deleted.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.ThreadListSynced">
            <summary>
            Fired when the current member gains access to a channel(s).
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.ThreadMemberUpdated">
            <summary>
            Fired when a thread member is updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.ThreadMembersUpdated">
            <summary>
            Fired when the thread members are updated.
            For this Event you need the <see cref="F:DSharpPlus.DiscordIntents.GuildMembers"/> or <see cref="F:DSharpPlus.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.ApplicationCommandCreated">
            <summary>
            Fired when a new application command is registered.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.ApplicationCommandUpdated">
            <summary>
            Fired when an application command is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.ApplicationCommandDeleted">
            <summary>
            Fired when an application command is deleted.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.IntegrationCreated">
            <summary>
            Fired when an integration is created.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.IntegrationUpdated">
            <summary>
            Fired when an integration is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.IntegrationDeleted">
            <summary>
            Fired when an integration is deleted.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.StageInstanceCreated">
            <summary>
            Fired when a stage instance is created.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.StageInstanceUpdated">
            <summary>
            Fired when a stage instance is updated.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.StageInstanceDeleted">
            <summary>
            Fired when a stage instance is deleted.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.InteractionCreated">
            <summary>
            Fired when an interaction is invoked.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.ComponentInteractionCreated">
            <summary>
            Fired when a component is invoked.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.ModalSubmitted">
            <summary>
            Fired when a modal is submitted. If a modal is closed, this event will not be fired.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.ContextMenuInteractionCreated">
            <summary>
            Fired when a user uses a context menu.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.TypingStarted">
            <summary>
            Fired when a user starts typing in a channel.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.UnknownEvent">
            <summary>
            Fired when an unknown event gets received.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.WebhooksUpdated">
            <summary>
            Fired whenever webhooks update.
            </summary>
        </member>
        <member name="E:DSharpPlus.DiscordShardedClient.ClientErrored">
            <summary>
            Fired whenever an error occurs within an event handler.
            </summary>
        </member>
        <member name="T:DSharpPlus.DiscordWebhookClient">
            <summary>
            Represents a webhook-only client. This client can be used to execute Discord webhooks.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordWebhookClient.Logger">
            <summary>
            Gets the logger for this client.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordWebhookClient.Webhooks">
            <summary>
            Gets the collection of registered webhooks.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordWebhookClient.Username">
            <summary>
            Gets or sets the username override for registered webhooks. Note that this only takes effect when broadcasting.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordWebhookClient.AvatarUrl">
            <summary>
            Gets or set the avatar override for registered webhooks. Note that this only takes effect when broadcasting.
            </summary>
        </member>
        <member name="M:DSharpPlus.DiscordWebhookClient.#ctor">
            <summary>
            Creates a new webhook client.
            </summary>
        </member>
        <member name="M:DSharpPlus.DiscordWebhookClient.#ctor(System.Net.IWebProxy,System.Nullable{System.TimeSpan},System.Boolean,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.LogLevel,System.String)">
            <summary>
            Creates a new webhook client, with specified HTTP proxy, timeout, and logging settings.
            </summary>
            <param name="proxy">Proxy to use for HTTP connections.</param>
            <param name="timeout">Timeout to use for HTTP requests. Set to <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/> to disable timeouts.</param>
            <param name="useRelativeRateLimit">Whether to use the system clock for computing rate limit resets. See <see cref="P:DSharpPlus.DiscordConfiguration.UseRelativeRatelimit"/> for more details.</param>
            <param name="loggerFactory">The optional logging factory to use for this client.</param>
            <param name="minimumLogLevel">The minimum logging level for messages.</param>
            <param name="logTimestampFormat">The timestamp format to use for the logger.</param>
        </member>
        <member name="M:DSharpPlus.DiscordWebhookClient.AddWebhookAsync(System.UInt64,System.String)">
            <summary>
            Registers a webhook with this client. This retrieves a webhook based on the ID and token supplied.
            </summary>
            <param name="id">The ID of the webhook to add.</param>
            <param name="token">The token of the webhook to add.</param>
            <returns>The registered webhook.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordWebhookClient.AddWebhookAsync(System.Uri)">
            <summary>
            Registers a webhook with this client. This retrieves a webhook from webhook URL.
            </summary>
            <param name="url">URL of the webhook to retrieve. This URL must contain both ID and token.</param>
            <returns>The registered webhook.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordWebhookClient.AddWebhookAsync(System.UInt64,DSharpPlus.BaseDiscordClient)">
            <summary>
            Registers a webhook with this client. This retrieves a webhook using the supplied full discord client.
            </summary>
            <param name="id">ID of the webhook to register.</param>
            <param name="client">Discord client to which the webhook will belong.</param>
            <returns>The registered webhook.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordWebhookClient.AddWebhook(DSharpPlus.Entities.DiscordWebhook)">
            <summary>
            Registers a webhook with this client. This reuses the supplied webhook object.
            </summary>
            <param name="webhook">Webhook to register.</param>
            <returns>The registered webhook.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordWebhookClient.RemoveWebhook(System.UInt64)">
            <summary>
            Unregisters a webhook with this client.
            </summary>
            <param name="id">ID of the webhook to unregister.</param>
            <returns>The unregistered webhook.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordWebhookClient.GetRegisteredWebhook(System.UInt64)">
            <summary>
            Gets a registered webhook with specified ID.
            </summary>
            <param name="id">ID of the registered webhook to retrieve.</param>
            <returns>The requested webhook.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordWebhookClient.BroadcastMessageAsync(DSharpPlus.Entities.DiscordWebhookBuilder)">
            <summary>
            Broadcasts a message to all registered webhooks.
            </summary>
            <param name="builder">Webhook builder filled with data to send.</param>
            <returns></returns>
        </member>
        <member name="T:DSharpPlus.DiscordConfiguration">
            <summary>
            Represents configuration for <see cref="T:DSharpPlus.DiscordClient"/> and <see cref="T:DSharpPlus.DiscordShardedClient"/>.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.Token">
            <summary>
            Sets the token used to identify the client.
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.TokenType">
            <summary>
            <para>Sets the type of the token used to identify the client.</para>
            <para>Defaults to <see cref="F:DSharpPlus.TokenType.Bot"/>.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.MinimumLogLevel">
            <summary>
            <para>Sets the minimum logging level for messages.</para>
            <para>Typically, the default value of <see cref="F:Microsoft.Extensions.Logging.LogLevel.Information"/> is ok for most uses.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.UseRelativeRatelimit">
            <summary>
            <para>Sets whether to rely on Discord for NTP (Network Time Protocol) synchronization with the "X-Ratelimit-Reset-After" header.</para>
            <para>If the system clock is not synced, setting this to true will ensure ratelimits are synced with Discord and reduce the risk of hitting one.</para>
            <para>This should only be set to false if the system clock is synced with NTP.</para>
            <para>Defaults to true.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.LogTimestampFormat">
            <summary>
            <para>Allows you to overwrite the time format used by the internal debug logger.</para>
            <para>Only applicable when <see cref="P:DSharpPlus.DiscordConfiguration.LoggerFactory"/> is set left at default value. Defaults to ISO 8601-like format.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.LargeThreshold">
            <summary>
            <para>Sets the member count threshold at which guilds are considered large.</para>
            <para>Defaults to 250.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.AutoReconnect">
            <summary>
            <para>Sets whether to automatically reconnect in case a connection is lost.</para>
            <para>Defaults to true.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.ShardId">
            <summary>
            <para>Sets the ID of the shard to connect to.</para>
            <para>If not sharding, or sharding automatically, this value should be left with the default value of 0.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.ShardCount">
            <summary>
            <para>Sets the total number of shards the bot is on. If not sharding, this value should be left with a default value of 1.</para>
            <para>If sharding automatically, this value will indicate how many shards to boot. If left default for automatic sharding, the client will determine the shard count automatically.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.GatewayCompressionLevel">
            <summary>
            <para>Sets the level of compression for WebSocket traffic.</para>
            <para>Disabling this option will increase the amount of traffic sent via WebSocket. Setting <see cref="F:DSharpPlus.GatewayCompressionLevel.Payload"/> will enable compression for READY and GUILD_CREATE payloads. Setting <see cref="T:System.IO.Stream"/> will enable compression for the entire WebSocket stream, drastically reducing amount of traffic.</para>
            <para>Defaults to <see cref="T:System.IO.Stream"/>.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.MessageCacheSize">
            <summary>
            <para>Sets the size of the global message cache.</para>
            <para>Setting this to 0 will disable message caching entirely. Defaults to 1024.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.Proxy">
            <summary>
            <para>Sets the proxy to use for HTTP and WebSocket connections to Discord.</para>
            <para>Defaults to null.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.HttpTimeout">
            <summary>
            <para>Sets the timeout for HTTP requests.</para>
            <para>Set to <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/> to disable timeouts.</para>
            <para>Defaults to 10 seconds.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.ReconnectIndefinitely">
            <summary>
            <para>Defines that the client should attempt to reconnect indefinitely.</para>
            <para>This is typically a very bad idea to set to <c>true</c>, as it will swallow all connection errors.</para>
            <para>Defaults to false.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.AlwaysCacheMembers">
            <summary>
            Sets whether the client should attempt to cache members if exclusively using unprivileged intents.
            <para>
                This will only take effect if there are no <see cref="F:DSharpPlus.DiscordIntents.GuildMembers"/> or <see cref="F:DSharpPlus.DiscordIntents.GuildPresences"/>
                intents specified. Otherwise, this will always be overwritten to true.
            </para>
            <para>Defaults to true.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.Intents">
            <summary>
            <para>Sets the gateway intents for this client.</para>
            <para>If set, the client will only receive events that they specify with intents.</para>
            <para>Defaults to <see cref="F:DSharpPlus.DiscordIntents.AllUnprivileged"/>.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.WebSocketClientFactory">
            <summary>
            <para>Sets the factory method used to create instances of WebSocket clients.</para>
            <para>Use <see cref="M:DSharpPlus.Net.WebSocket.WebSocketClient.CreateNew(System.Net.IWebProxy)"/> and equivalents on other implementations to switch out client implementations.</para>
            <para>Defaults to <see cref="M:DSharpPlus.Net.WebSocket.WebSocketClient.CreateNew(System.Net.IWebProxy)"/>.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.UdpClientFactory">
            <summary>
            <para>Sets the factory method used to create instances of UDP clients.</para>
            <para>Use <see cref="M:DSharpPlus.Net.Udp.DspUdpClient.CreateNew"/> and equivalents on other implementations to switch out client implementations.</para>
            <para>Defaults to <see cref="M:DSharpPlus.Net.Udp.DspUdpClient.CreateNew"/>.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.LoggerFactory">
            <summary>
            <para>Sets the logger implementation to use.</para>
            <para>To create your own logger, implement the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> instance.</para>
            <para>Defaults to built-in implementation.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.DiscordConfiguration.LogUnknownEvents">
            <summary>
            Whether to log unknown events or not. Defaults to true.
            </summary>
        </member>
        <member name="M:DSharpPlus.DiscordConfiguration.#ctor">
            <summary>
            Creates a new configuration with default values.
            </summary>
        </member>
        <member name="M:DSharpPlus.DiscordConfiguration.#ctor(DSharpPlus.DiscordConfiguration)">
            <summary>
            Creates a clone of another discord configuration.
            </summary>
            <param name="other">Client configuration to clone.</param>
        </member>
        <member name="M:DSharpPlus.DiscordIntentExtensions.HasIntent(DSharpPlus.DiscordIntents,DSharpPlus.DiscordIntents)">
            <summary>
            Calculates whether these intents have a certain intent.
            </summary>
            <param name="intents">The base intents.</param>
            <param name="search">The intents to search for.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordIntentExtensions.AddIntent(DSharpPlus.DiscordIntents,DSharpPlus.DiscordIntents)">
            <summary>
            Adds an intent to these intents.
            </summary>
            <param name="intents">The base intents.</param>
            <param name="toAdd">The intents to add.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordIntentExtensions.RemoveIntent(DSharpPlus.DiscordIntents,DSharpPlus.DiscordIntents)">
            <summary>
            Removes an intent from these intents.
            </summary>
            <param name="intents">The base intents.</param>
            <param name="toRemove">The intents to remove.</param>
            <returns></returns>
        </member>
        <member name="T:DSharpPlus.DiscordIntents">
            <summary>
            Represents gateway intents to be specified for connecting to Discord.
            </summary>
        </member>
        <member name="F:DSharpPlus.DiscordIntents.Guilds">
            <summary>
            Whether to include general guild events.
            <para>These include <see cref="E:DSharpPlus.DiscordClient.GuildCreated"/>, <see cref="E:DSharpPlus.DiscordClient.GuildDeleted"/>, <see cref="E:DSharpPlus.DiscordClient.GuildAvailable"/>, <see cref="E:DSharpPlus.DiscordClient.GuildDownloadCompleted"/>,</para>
            <para><see cref="E:DSharpPlus.DiscordClient.GuildRoleCreated"/>, <see cref="E:DSharpPlus.DiscordClient.GuildRoleUpdated"/>, <see cref="E:DSharpPlus.DiscordClient.GuildRoleDeleted"/>,</para>
            <para><see cref="E:DSharpPlus.DiscordClient.ChannelCreated"/>, <see cref="E:DSharpPlus.DiscordClient.ChannelUpdated"/>, <see cref="E:DSharpPlus.DiscordClient.ChannelDeleted"/>, and <see cref="E:DSharpPlus.DiscordClient.ChannelPinsUpdated"/>.</para>
            </summary>
        </member>
        <member name="F:DSharpPlus.DiscordIntents.GuildMembers">
            <summary>
            Whether to include guild member events.
            <para>These include <see cref="E:DSharpPlus.DiscordClient.GuildMemberAdded"/>, <see cref="E:DSharpPlus.DiscordClient.GuildMemberUpdated"/>, and <see cref="E:DSharpPlus.DiscordClient.GuildMemberRemoved"/>.</para>
            <para>This is a privileged intent, and must be enabled on the bot's developer page.</para>
            </summary>
        </member>
        <member name="F:DSharpPlus.DiscordIntents.GuildBans">
            <summary>
            Whether to include guild ban events.
            <para>These include <see cref="E:DSharpPlus.DiscordClient.GuildBanAdded"/>, and <see cref="E:DSharpPlus.DiscordClient.GuildBanRemoved"/>.</para>
            </summary>
        </member>
        <member name="F:DSharpPlus.DiscordIntents.GuildEmojis">
            <summary>
            Whether to include guild emoji events.
            <para>This includes <see cref="E:DSharpPlus.DiscordClient.GuildEmojisUpdated"/>.</para>
            </summary>
        </member>
        <member name="F:DSharpPlus.DiscordIntents.GuildIntegrations">
            <summary>
            Whether to include guild integration events.
            <para>This includes <see cref="E:DSharpPlus.DiscordClient.GuildIntegrationsUpdated"/>.</para>
            </summary>
        </member>
        <member name="F:DSharpPlus.DiscordIntents.GuildWebhooks">
            <summary>
            Whether to include guild webhook events.
            <para>This includes <see cref="E:DSharpPlus.DiscordClient.WebhooksUpdated"/>.</para>
            </summary>
        </member>
        <member name="F:DSharpPlus.DiscordIntents.GuildInvites">
            <summary>
            Whether to include guild invite events.
            <para>These include <see cref="E:DSharpPlus.DiscordClient.InviteCreated"/>, and <see cref="E:DSharpPlus.DiscordClient.InviteDeleted"/>.</para>
            </summary>
        </member>
        <member name="F:DSharpPlus.DiscordIntents.GuildVoiceStates">
            <summary>
            Whether to include guild voice state events.
            <para>This includes <see cref="E:DSharpPlus.DiscordClient.VoiceStateUpdated"/>.</para>
            </summary>
        </member>
        <member name="F:DSharpPlus.DiscordIntents.GuildPresences">
            <summary>
            Whether to include guild presence events.
            <para>This includes <see cref="E:DSharpPlus.DiscordClient.PresenceUpdated"/>.</para>
            <para>This is a privileged intent, and must be enabled on the bot's developer page.</para>
            </summary>
        </member>
        <member name="F:DSharpPlus.DiscordIntents.GuildMessages">
            <summary>
            Whether to include guild message events.
            <para>These include <see cref="E:DSharpPlus.DiscordClient.MessageCreated"/>, <see cref="E:DSharpPlus.DiscordClient.MessageUpdated"/>, and <see cref="E:DSharpPlus.DiscordClient.MessageDeleted"/>.</para>
            </summary>
        </member>
        <member name="F:DSharpPlus.DiscordIntents.GuildMessageReactions">
            <summary>
            Whether to include guild reaction events.
            <para>These include <see cref="E:DSharpPlus.DiscordClient.MessageReactionAdded"/>, <see cref="E:DSharpPlus.DiscordClient.MessageReactionRemoved"/>, <see cref="E:DSharpPlus.DiscordClient.MessageReactionsCleared"/>,</para>
            <para>and <see cref="E:DSharpPlus.DiscordClient.MessageReactionRemovedEmoji"/>.</para>
            </summary>
        </member>
        <member name="F:DSharpPlus.DiscordIntents.GuildMessageTyping">
            <summary>
            Whether to include guild typing events.
            <para>These include <see cref="E:DSharpPlus.DiscordClient.TypingStarted"/>.</para>
            </summary>
        </member>
        <member name="F:DSharpPlus.DiscordIntents.DirectMessages">
            <summary>
            Whether to include general direct message events.
            <para>These include <see cref="E:DSharpPlus.DiscordClient.ChannelCreated"/>, <see cref="E:DSharpPlus.DiscordClient.MessageCreated"/>, <see cref="E:DSharpPlus.DiscordClient.MessageUpdated"/>, </para>
            <para><see cref="E:DSharpPlus.DiscordClient.MessageDeleted"/>, <see cref="E:DSharpPlus.DiscordClient.ChannelPinsUpdated"/>.</para>
            <para>These events only fire for DM channels.</para>
            </summary>
        </member>
        <member name="F:DSharpPlus.DiscordIntents.DirectMessageReactions">
            <summary>
            Whether to include direct message reaction events.
            <para>These include <see cref="E:DSharpPlus.DiscordClient.MessageReactionAdded"/>, <see cref="E:DSharpPlus.DiscordClient.MessageReactionRemoved"/>,</para>
            <para><see cref="E:DSharpPlus.DiscordClient.MessageReactionsCleared"/>, and <see cref="E:DSharpPlus.DiscordClient.MessageReactionRemovedEmoji"/>.</para>
            <para>These events only fire for DM channels.</para>
            </summary>
        </member>
        <member name="F:DSharpPlus.DiscordIntents.DirectMessageTyping">
            <summary>
            Whether to include direct message typing events.
            <para>This includes <see cref="E:DSharpPlus.DiscordClient.TypingStarted"/>.</para>
            <para>This event only fires for DM channels.</para>
            </summary>
        </member>
        <member name="F:DSharpPlus.DiscordIntents.MessageContents">
             <summary>
             Whether to include message content. This is a privileged event.
            
             <para>Message content includes text, attachments, embeds, components, and reply content.</para>
             <para>This intent is required for CommandsNext to function correctly.</para>
             </summary>
        </member>
        <member name="F:DSharpPlus.DiscordIntents.ScheduledGuildEvents">
            <summary>
            Whether to include scheduled event messages.
            //TODO: reference events
            </summary>
        </member>
        <member name="F:DSharpPlus.DiscordIntents.AllUnprivileged">
            <summary>
            Includes all unprivileged intents.
            <para>These are all intents excluding <see cref="F:DSharpPlus.DiscordIntents.GuildMembers"/> and <see cref="F:DSharpPlus.DiscordIntents.GuildPresences"/>.</para>
            </summary>
        </member>
        <member name="F:DSharpPlus.DiscordIntents.All">
            <summary>
            Includes all intents.
            <para>The <see cref="F:DSharpPlus.DiscordIntents.GuildMembers"/> and <see cref="F:DSharpPlus.DiscordIntents.GuildPresences"/> intents are privileged, and must be enabled on the bot's developer page.</para>
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordApplication">
            <summary>
            Represents an OAuth2 application.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplication.Summary">
            <summary>
            Gets the application's summary.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplication.Icon">
            <summary>
            Gets the application's icon.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplication.IconHash">
            <summary>
            Gets the application's icon hash.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplication.TermsOfServiceUrl">
            <summary>
            Gets the application's terms of service URL.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplication.PrivacyPolicyUrl">
            <summary>
            Gets the application's privacy policy URL.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplication.RpcOrigins">
            <summary>
            Gets the application's allowed RPC origins.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplication.Flags">
            <summary>
            Gets the application's flags.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplication.Owners">
            <summary>
            Gets the application's owners.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplication.RequiresCodeGrant">
            <summary>
            Gets whether this application's bot user requires code grant.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplication.IsPublic">
            <summary>
            Gets whether this bot application is public.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplication.CoverImageHash">
            <summary>
            Gets the hash of the application's cover image.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplication.CoverImageUrl">
            <summary>
            Gets this application's cover image URL.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplication.Team">
            <summary>
            Gets the team which owns this application.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplication.GetAvatarUrl(DSharpPlus.ImageFormat,System.UInt16)">
            <summary>
            Gets the application's cover image URL, in requested format and size.
            </summary>
            <param name="fmt">Format of the image to get.</param>
            <param name="size">Maximum size of the cover image. Must be a power of two, minimum 16, maximum 2048.</param>
            <returns>URL of the application's cover image.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplication.GetAssetsAsync(System.Boolean)">
            <summary>
            Retrieves this application's assets.
            </summary>
            <param name="updateCache">Whether to always make a REST request and update the cached assets.</param>
            <returns>This application's assets.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplication.GenerateOAuthUri(System.String,System.Nullable{DSharpPlus.Permissions},DSharpPlus.Entities.OAuthScope[])">
            <summary>
            Generates a new OAuth2 URI for this application.
            </summary>
            <param name="redirectUri">Redirect URI - the URI Discord will redirect users to as part of the OAuth flow.
            <remarks>
            This URI <b>must</b> be already registered as a valid redirect URI for your application on the developer portal.
            </remarks>
            </param>
            <param name="permissions">Permissions for your bot. Only required if the <seealso cref="F:DSharpPlus.Entities.OAuthScope.Bot"/> scope is passed.</param>
            <param name="scopes">OAuth scopes for your application.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplication.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordApplication"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Entities.DiscordApplication"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplication.Equals(DSharpPlus.Entities.DiscordApplication)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordApplication"/> is equal to another <see cref="T:DSharpPlus.Entities.DiscordApplication"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Entities.DiscordApplication"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Entities.DiscordApplication"/> is equal to this <see cref="T:DSharpPlus.Entities.DiscordApplication"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplication.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.DiscordApplication"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.DiscordApplication"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplication.op_Equality(DSharpPlus.Entities.DiscordApplication,DSharpPlus.Entities.DiscordApplication)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordApplication"/> objects are equal.
            </summary>
            <param name="e1">First application to compare.</param>
            <param name="e2">Second application to compare.</param>
            <returns>Whether the two applications are equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplication.op_Inequality(DSharpPlus.Entities.DiscordApplication,DSharpPlus.Entities.DiscordApplication)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordApplication"/> objects are not equal.
            </summary>
            <param name="e1">First application to compare.</param>
            <param name="e2">Second application to compare.</param>
            <returns>Whether the two applications are not equal.</returns>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAsset.Id">
            <summary>
            Gets the ID of this asset.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAsset.Url">
            <summary>
            Gets the URL of this asset.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordApplicationAsset">
            <summary>
            Represents an asset for an OAuth2 application.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationAsset.Discord">
            <summary>
            Gets the Discord client instance for this asset.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationAsset.Name">
            <summary>
            Gets the asset's name.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationAsset.Type">
            <summary>
            Gets the asset's type.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationAsset.Application">
            <summary>
            Gets the application this asset belongs to.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationAsset.Url">
            <summary>
            Gets the Url of this asset.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplicationAsset.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordApplicationAsset"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Entities.DiscordApplicationAsset"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplicationAsset.Equals(DSharpPlus.Entities.DiscordApplicationAsset)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordApplicationAsset"/> is equal to another <see cref="T:DSharpPlus.Entities.DiscordApplicationAsset"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Entities.DiscordApplicationAsset"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Entities.DiscordApplicationAsset"/> is equal to this <see cref="T:DSharpPlus.Entities.DiscordApplicationAsset"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplicationAsset.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.DiscordApplication"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.DiscordApplication"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplicationAsset.op_Equality(DSharpPlus.Entities.DiscordApplicationAsset,DSharpPlus.Entities.DiscordApplicationAsset)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordApplicationAsset"/> objects are equal.
            </summary>
            <param name="e1">First application asset to compare.</param>
            <param name="e2">Second application asset to compare.</param>
            <returns>Whether the two application assets not equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplicationAsset.op_Inequality(DSharpPlus.Entities.DiscordApplicationAsset,DSharpPlus.Entities.DiscordApplicationAsset)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordApplicationAsset"/> objects are not equal.
            </summary>
            <param name="e1">First application asset to compare.</param>
            <param name="e2">Second application asset to compare.</param>
            <returns>Whether the two application assets are not equal.</returns>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordSpotifyAsset.Url">
            <summary>
            Gets the URL of this asset.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.ApplicationAssetType">
            <summary>
            Determines the type of the asset attached to the application.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ApplicationAssetType.Unknown">
            <summary>
            Unknown type. This indicates something went terribly wrong.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ApplicationAssetType.SmallImage">
            <summary>
            This asset can be used as small image for rich presences.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ApplicationAssetType.LargeImage">
            <summary>
            This asset can be used as large image for rich presences.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.OAuthScope">
            <summary>
            Represents the possible OAuth scopes for application authorization.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.OAuthScope.Identify">
            <summary>
            Allows <c>/users/@me</c> without <c>email</c>.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.OAuthScope.Email">
            <summary>
            Enables <c>/users/@me</c> to return <c>email</c>.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.OAuthScope.Connections">
            <summary>
            Allows <c>/users/@me/connections</c> to return linked third-party accounts.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.OAuthScope.Guilds">
            <summary>
            Allows <c>/users/@me/guilds</c> to return basic information about all of a user's guilds.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.OAuthScope.GuildsJoin">
            <summary>
            Allows <c>/guilds/{guild.id}/members/{user.id}</c> to be used for joining users into a guild.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.OAuthScope.GuildsMembersRead">
            <summary>
            Allows <c>/users/@me/guilds/{guild.id}/members</c> to return a user's member information in a guild.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.OAuthScope.GdmJoin">
            <summary>
            Allows your app to join users into a group DM.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.OAuthScope.Rpc">
            <summary>
            For local RPC server access, this allows you to control a user's local Discord client.
            </summary>
            <remarks>
            This scope requires Discord approval.
            </remarks>
        </member>
        <member name="F:DSharpPlus.Entities.OAuthScope.RpcNotificationsRead">
            <summary>
            For local RPC server access, this allows you to receive notifications pushed to the user.
            </summary>
            <remarks>
            This scope requires Discord approval.
            </remarks>
        </member>
        <member name="F:DSharpPlus.Entities.OAuthScope.RpcVoiceRead">
            <summary>
            For local RPC server access, this allows you to read a user's voice settings and listen for voice events.
            </summary>
            <remarks>
            This scope requires Discord approval.
            </remarks>
        </member>
        <member name="F:DSharpPlus.Entities.OAuthScope.RpcVoiceWrite">
            <summary>
            For local RPC server access, this allows you to update a user's voice settings.
            </summary>
            <remarks>
            This scope requires Discord approval.
            </remarks>
        </member>
        <member name="F:DSharpPlus.Entities.OAuthScope.RpcActivitiesWrite">
            <summary>
            For local RPC server access, this allows you to update a user's activity.
            </summary>
            <remarks>
            This scope requires Discord approval.
            </remarks>
        </member>
        <member name="F:DSharpPlus.Entities.OAuthScope.Bot">
            <summary>
            For OAuth2 bots, this puts the bot in the user's selected guild by default.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.OAuthScope.WebhookIncoming">
            <summary>
            This generates a webhook that is returned in the OAuth token response for authorization code grants.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.OAuthScope.MessagesRead">
            <summary>
            For local RPC server access, this allows you to read messages from all client channels
            (otherwise restricted to channels/guilds your application creates).
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.OAuthScope.ApplicationsBuildsUpload">
            <summary>
            Allows your application to upload/update builds for a user's applications.
            </summary>
            <remarks>
            This scope requires Discord approval.
            </remarks>
        </member>
        <member name="F:DSharpPlus.Entities.OAuthScope.ApplicationsBuildsRead">
            <summary>
            Allows your application to read build data for a user's applications.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.OAuthScope.ApplicationsCommands">
            <summary>
            Allows your application to use application commands in a guild.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.OAuthScope.ApplicationsStoreUpdate">
            <summary>
            Allows your application to read and update store data (SKUs, store listings, achievements etc.) for a user's applications.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.OAuthScope.ApplicationsEntitlements">
            <summary>
            Allows your application to read entitlements for a user's applications.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.OAuthScope.ActivitiesRead">
            <summary>
            Allows your application to fetch data from a user's "Now Playing/Recently Played" list.
            </summary>
            <remarks>
            This scope requires Discord approval.
            </remarks>
        </member>
        <member name="F:DSharpPlus.Entities.OAuthScope.ActivitiesWrite">
            <summary>
            Allows your application to update a user's activity.
            </summary>
            <remarks>
            Outside of the GameSDK activity manager, this scope requires Discord approval.
            </remarks>
        </member>
        <member name="F:DSharpPlus.Entities.OAuthScope.RelationshipsRead">
            <summary>
            Allows your application to know a user's friends and implicit relationships.
            </summary>
            <remarks>
            This scope requires Discord approval.
            </remarks>
        </member>
        <member name="T:DSharpPlus.Entities.BaseDiscordMessageBuilder`1">
            <summary>
            Interface that provides abstractions for the various message builder types in DSharpPlus,
            allowing re-use of code.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.BaseDiscordMessageBuilder`1.Content">
            <summary>
            Message to send on this webhook request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.BaseDiscordMessageBuilder`1.Embeds">
            <summary>
            Embeds to send on this webhook request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.BaseDiscordMessageBuilder`1.Files">
            <summary>
            Files to send on this webhook request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.BaseDiscordMessageBuilder`1.Mentions">
            <summary>
            Mentions to send on this webhook request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.BaseDiscordMessageBuilder`1.Components">
            <summary>
            Components to send on this followup message.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.BaseDiscordMessageBuilder`1.#ctor">
            <summary>
            Thou shalt NOT PASS! ⚡
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.BaseDiscordMessageBuilder`1.#ctor(DSharpPlus.Entities.IDiscordMessageBuilder)">
            <summary>
            Constructs a new <see cref="T:DSharpPlus.Entities.BaseDiscordMessageBuilder`1"/> based on an existing <see cref="T:DSharpPlus.Entities.IDiscordMessageBuilder"/>.
            Existing file streams will have their position reset to 0.
            </summary>
            <param name="builder">The builder to copy.</param>
        </member>
        <member name="M:DSharpPlus.Entities.BaseDiscordMessageBuilder`1.WithContent(System.String)">
            <summary>
            Sets the Content of the Message.
            </summary>
            <param name="content">The content to be set.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.BaseDiscordMessageBuilder`1.AddComponents(DSharpPlus.Entities.DiscordComponent[])">
            <summary>
            Adds a row of components to a message, up to 5 components per row, and up to 5 rows per message.
            </summary>
            <param name="components">The components to add to the message.</param>
            <returns>The current builder to be chained.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">No components were passed.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.BaseDiscordMessageBuilder`1.AddComponents(System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordActionRowComponent})">
            <summary>
            Appends several rows of components to the message
            </summary>
            <param name="components">The rows of components to add, holding up to five each.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.BaseDiscordMessageBuilder`1.AddComponents(System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordComponent})">
            <summary>
            Adds a row of components to a message, up to 5 components per row, and up to 5 rows per message.
            </summary>
            <param name="components">The components to add to the message.</param>
            <returns>The current builder to be chained.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">No components were passed.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.BaseDiscordMessageBuilder`1.WithTTS(System.Boolean)">
            <summary>
            Sets if the message should be TTS.
            </summary>
            <param name="isTTS">If TTS should be set.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.BaseDiscordMessageBuilder`1.AddEmbed(DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Appends an embed to the current builder.
            </summary>
            <param name="embed">The embed that should be appended.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.BaseDiscordMessageBuilder`1.AddEmbeds(System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordEmbed})">
            <summary>
            Appends several embeds to the current builder.
            </summary>
            <param name="embeds">The embeds that should be appended.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.BaseDiscordMessageBuilder`1.AddFile(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Sets if the message has files to be sent.
            </summary>
            <param name="fileName">The fileName that the file should be sent as.</param>
            <param name="stream">The Stream to the file.</param>
            <param name="resetStreamPosition">Tells the API Client to reset the stream position to what it was after the file is sent.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.BaseDiscordMessageBuilder`1.AddFile(System.IO.FileStream,System.Boolean)">
            <summary>
            Sets if the message has files to be sent.
            </summary>
            <param name="stream">The Stream to the file.</param>
            <param name="resetStreamPosition">Tells the API Client to reset the stream position to what it was after the file is sent.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.BaseDiscordMessageBuilder`1.AddFiles(System.Collections.Generic.IDictionary{System.String,System.IO.Stream},System.Boolean)">
            <summary>
            Sets if the message has files to be sent.
            </summary>
            <param name="files">The Files that should be sent.</param>
            <param name="resetStreamPosition">Tells the API Client to reset the stream position to what it was after the file is sent.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.BaseDiscordMessageBuilder`1.AddMention(DSharpPlus.Entities.IMention)">
            <summary>
            Adds the mention to the mentions to parse, etc. with the interaction response.
            </summary>
            <param name="mention">Mention to add.</param>
        </member>
        <member name="M:DSharpPlus.Entities.BaseDiscordMessageBuilder`1.AddMentions(System.Collections.Generic.IEnumerable{DSharpPlus.Entities.IMention})">
            <summary>
            Adds the mentions to the mentions to parse, etc. with the interaction response.
            </summary>
            <param name="mentions">Mentions to add.</param>
        </member>
        <member name="M:DSharpPlus.Entities.BaseDiscordMessageBuilder`1.ClearComponents">
            <summary>
            Clears all message components on this builder.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.BaseDiscordMessageBuilder`1.Clear">
            <summary>
            Allows for clearing the Message Builder so that it can be used again to send a new message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.IDiscordMessageBuilder.Content">
            <summary>
            Getter / setter for message content.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.IDiscordMessageBuilder.IsTTS">
            <summary>
            Whether this message will play as a text-to-speech message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.IDiscordMessageBuilder.Embeds">
            <summary>
            All embeds on this message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.IDiscordMessageBuilder.Files">
            <summary>
            All files on this message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.IDiscordMessageBuilder.Components">
            <summary>
            All components on this message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.IDiscordMessageBuilder.Mentions">
            <summary>
            All allowed mentions on this message.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.IDiscordMessageBuilder.WithContent(System.String)">
            <summary>
            Adds content to this message
            </summary>
            <param name="content">Message content to use</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.IDiscordMessageBuilder.AddComponents(DSharpPlus.Entities.DiscordComponent[])">
            <summary>
            Adds components to this message. Each call should append to a new row.
            </summary>
            <param name="components">Components to add.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.IDiscordMessageBuilder.AddComponents(System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordComponent})">
            <summary>
            Adds components to this message. Each call should append to a new row.
            </summary>
            <param name="components">Components to add.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.IDiscordMessageBuilder.AddComponents(System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordActionRowComponent})">
            <summary>
            Adds an action row component to this message.
            </summary>
            <param name="components">Action row to add to this message. Should contain child components.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.IDiscordMessageBuilder.WithTTS(System.Boolean)">
            <summary>
            Sets whether this message should play as a text-to-speech message.
            </summary>
            <param name="isTTS"></param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.IDiscordMessageBuilder.AddEmbed(DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Adds an embed to this message.
            </summary>
            <param name="embed">Embed to add.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.IDiscordMessageBuilder.AddEmbeds(System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordEmbed})">
            <summary>
            Adds multiple embeds to this message.
            </summary>
            <param name="embeds">Collection of embeds to add.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.IDiscordMessageBuilder.AddFile(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Attaches a file to this message.
            </summary>
            <param name="fileName">Name of the file to attach.</param>
            <param name="stream">Stream containing said file's contents.</param>
            <param name="resetStream">Whether to reset the stream to position 0 after sending.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.IDiscordMessageBuilder.AddFile(System.IO.FileStream,System.Boolean)">
            <summary>
            Attaches a file to this message.
            </summary>
            <param name="stream">FileStream pointing to the file to attach.</param>
            <param name="resetStream">Whether to reset the stream position to 0 after sending.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.IDiscordMessageBuilder.AddFiles(System.Collections.Generic.IDictionary{System.String,System.IO.Stream},System.Boolean)">
            <summary>
            Attaches multiple files to this message.
            </summary>
            <param name="files">Dictionary of files to add, where <see cref="T:System.String"/> is a file name and <see cref="T:System.IO.Stream"/> is a stream containing the file's contents.</param>
            <param name="resetStreams">Whether to reset all stream positions to 0 after sending.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.IDiscordMessageBuilder.AddFiles(System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordMessageFile})">
            <summary>
            Attaches previously used files to this file stream.
            </summary>
            <param name="files">Previously attached files to reattach</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.IDiscordMessageBuilder.AddMention(DSharpPlus.Entities.IMention)">
            <summary>
            Adds an allowed mention to this message.
            </summary>
            <param name="mention">Mention to allow in this message.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.IDiscordMessageBuilder.AddMentions(System.Collections.Generic.IEnumerable{DSharpPlus.Entities.IMention})">
            <summary>
            Adds multiple allowed mentions to this message.
            </summary>
            <param name="mentions">Collection of mentions to allow in this message.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.IDiscordMessageBuilder.SuppressNotifications">
            <summary>
            Applies <see cref="F:DSharpPlus.MessageFlags.SupressNotifications"/> to the message.
            </summary>
            <returns></returns>
            <remarks>
            As per <see cref="F:DSharpPlus.MessageFlags.SupressNotifications"/>, this does not change the message's allowed mentions
            (controlled by <see cref="M:DSharpPlus.Entities.IDiscordMessageBuilder.AddMentions(System.Collections.Generic.IEnumerable{DSharpPlus.Entities.IMention})"/>), but instead prevents a mention from triggering a push notification.
            </remarks>
        </member>
        <member name="M:DSharpPlus.Entities.IDiscordMessageBuilder.ClearComponents">
            <summary>
            Clears all components attached to this builder.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.IDiscordMessageBuilder.Clear">
            <summary>
            Clears this builder.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordChannel">
            <summary>
            Represents a discord channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.GuildId">
            <summary>
            Gets ID of the guild to which this channel belongs.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.ParentId">
            <summary>
            Gets ID of the category that contains this channel. For threads, gets the ID of the channel this thread was created in.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.Parent">
            <summary>
            Gets the category that contains this channel. For threads, gets the channel this thread was created in.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.Name">
            <summary>
            Gets the name of this channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.Type">
            <summary>
            Gets the type of this channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.Position">
            <summary>
            Gets the position of this channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.IsPrivate">
            <summary>
            Gets whether this channel is a DM channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.IsCategory">
            <summary>
            Gets whether this channel is a channel category.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.IsThread">
            <summary>
            Gets whether this channel is a thread.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.Guild">
            <summary>
            Gets the guild to which this channel belongs.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.PermissionOverwrites">
            <summary>
            Gets a collection of permission overwrites for this channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.Topic">
            <summary>
            Gets the channel's topic. This is applicable to text channels only.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.LastMessageId">
            <summary>
            Gets the ID of the last message sent in this channel. This is applicable to text channels only.
            </summary>
            <remarks>For forum posts, this ID may point to an invalid mesage (e.g. the OP deleted the initial forum message).</remarks>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.Bitrate">
            <summary>
            Gets this channel's bitrate. This is applicable to voice channels only.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.UserLimit">
            <summary>
            Gets this channel's user limit. This is applicable to voice channels only.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.PerUserRateLimit">
            <summary>
            <para>Gets the slow mode delay configured for this channel.</para>
            <para>All bots, as well as users with <see cref="F:DSharpPlus.Permissions.ManageChannels"/> or <see cref="F:DSharpPlus.Permissions.ManageMessages"/> permissions in the channel are exempt from slow mode.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.QualityMode">
            <summary>
            Gets this channel's video quality mode. This is applicable to voice channels only.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.LastPinTimestamp">
            <summary>
            Gets when the last pinned message was pinned.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.Mention">
            <summary>
            Gets this channel's mention string.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.Children">
            <summary>
            Gets this channel's children. This applies only to channel categories.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.Threads">
            <summary>
            Gets this channel's threads. This applies only to text and news channels.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.Users">
            <summary>
            Gets the list of members currently in the channel (if voice channel), or members who can see the channel (otherwise).
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.IsNSFW">
            <summary>
            Gets whether this channel is an NSFW channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.RtcRegion">
            <summary>
            Gets this channel's region override (if voice channel).
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordChannel.UserPermissions">
            <summary>
            Gets the permissions of the user who invoked the command in this channel.
            <para>Only sent on the resolved channels of interaction responses for application commands.</para>
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.SendMessageAsync(System.String)">
            <summary>
            Sends a message to this channel.
            </summary>
            <param name="content">Content of the message to send.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.SendMessages"/> permission if TTS is true and <see cref="F:DSharpPlus.Permissions.SendTtsMessages"/> if TTS is true.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.SendMessageAsync(DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Sends a message to this channel.
            </summary>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.SendMessages"/> permission if TTS is true and <see cref="F:DSharpPlus.Permissions.SendTtsMessages"/> if TTS is true.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.SendMessageAsync(System.String,DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Sends a message to this channel.
            </summary>
            <param name="embed">Embed to attach to the message.</param>
            <param name="content">Content of the message to send.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.SendMessages"/> permission if TTS is true and <see cref="F:DSharpPlus.Permissions.SendTtsMessages"/> if TTS is true.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.SendMessageAsync(DSharpPlus.Entities.DiscordMessageBuilder)">
            <summary>
            Sends a message to this channel.
            </summary>
            <param name="builder">The builder with all the items to send.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.SendMessages"/> permission TTS is true and <see cref="F:DSharpPlus.Permissions.SendTtsMessages"/> if TTS is true.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.SendMessageAsync(System.Action{DSharpPlus.Entities.DiscordMessageBuilder})">
            <summary>
            Sends a message to this channel.
            </summary>
            <param name="action">The builder with all the items to send.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.SendMessages"/> permission TTS is true and <see cref="F:DSharpPlus.Permissions.SendTtsMessages"/> if TTS is true.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.CreateGuildEventAsync(System.String,System.String,DSharpPlus.Entities.ScheduledGuildEventPrivacyLevel,System.DateTimeOffset,System.Nullable{System.DateTimeOffset})">
            <summary>
            Creates an event bound to this channel.
            </summary>
            <param name="name">The name of the event, up to 100 characters.</param>
            <param name="description">The description of this event, up to 1000 characters.</param>
            <param name="privacyLevel">The privacy level. Currently only <see cref="F:DSharpPlus.Entities.ScheduledGuildEventPrivacyLevel.GuildOnly"/> is supported</param>
            <param name="start">When this event starts.</param>
            <param name="end">When this event ends. External events require an end time.</param>
            <returns>The created event.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.DeleteAsync(System.String)">
            <summary>
            Deletes a guild channel
            </summary>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.CloneAsync(System.String)">
            <summary>
            Clones this channel. This operation will create a channel with identical settings to this one. Note that this will not copy messages.
            </summary>
            <param name="reason">Reason for audit logs.</param>
            <returns>Newly-created channel.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.GetMessageAsync(System.UInt64,System.Boolean)">
            <summary>
            Returns a specific message
            </summary>
            <param name="id">The ID of the message</param>
            <param name="skipCache">Whether to always make a REST request.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ReadMessageHistory"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
            <remarks>Cached message objects will not be returned if <see cref="P:DSharpPlus.DiscordConfiguration.MessageCacheSize"/> is set to zero, if the client does not have the <see cref="F:DSharpPlus.DiscordIntents.GuildMessages"/> or <see cref="F:DSharpPlus.DiscordIntents.DirectMessages"/> intents, or if the discord client is a <see cref="T:DSharpPlus.DiscordShardedClient"/>.</remarks>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.ModifyAsync(System.Action{DSharpPlus.Net.Models.ChannelEditModel})">
            <summary>
            Modifies the current channel.
            </summary>
            <param name="action">Action to perform on this channel</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.ModifyPositionAsync(System.Int32,System.String,System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <summary>
            Updates the channel position
            </summary>
            <param name="position">Position the channel should be moved to.</param>
            <param name="reason">Reason for audit logs.</param>
            <param name="lockPermissions">Whether to sync channel permissions with the parent, if moving to a new category.</param>
            <param name="parentId">The new parent ID if the channel is to be moved to a new category.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.GetMessagesBeforeAsync(System.UInt64,System.Int32)">
            <summary>
            Returns a list of messages before a certain message.
            <param name="limit">The amount of messages to fetch.</param>
            <param name="before">Message to fetch before from.</param>
            </summary>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.AccessChannels"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.GetMessagesAfterAsync(System.UInt64,System.Int32)">
            <summary>
            Returns a list of messages after a certain message.
            <param name="limit">The amount of messages to fetch.</param>
            <param name="after">Message to fetch after from.</param>
            </summary>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.AccessChannels"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.GetMessagesAroundAsync(System.UInt64,System.Int32)">
            <summary>
            Returns a list of messages around a certain message.
            <param name="limit">The amount of messages to fetch.</param>
            <param name="around">Message to fetch around from.</param>
            </summary>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.AccessChannels"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.GetMessagesAsync(System.Int32)">
            <summary>
            Returns a list of messages from the last message in the channel.
            <param name="limit">The amount of messages to fetch.</param>
            </summary>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.AccessChannels"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.ListPublicArchivedThreadsAsync(System.Nullable{System.DateTimeOffset},System.Int32)">
            <summary>
            Gets the threads that are public and archived for this channel.
            </summary>
            <returns>A <seealso cref="T:DSharpPlus.Entities.ThreadQueryResult"/> containing the threads for this query and if an other call will yield more threads.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ReadMessageHistory"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.ListPrivateArchivedThreadsAsync(System.Nullable{System.DateTimeOffset},System.Int32)">
            <summary>
            Gets the threads that are private and archived for this channel.
            </summary>
            <returns>A <seealso cref="T:DSharpPlus.Entities.ThreadQueryResult"/> containing the threads for this query and if an other call will yield more threads.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ReadMessageHistory"/> and the <see cref="F:DSharpPlus.Permissions.ManageThreads"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.ListJoinedPrivateArchivedThreadsAsync(System.Nullable{System.DateTimeOffset},System.Int32)">
            <summary>
            Gets the private and archived threads that the current member has joined in this channel.
            </summary>
            <returns>A <seealso cref="T:DSharpPlus.Entities.ThreadQueryResult"/> containing the threads for this query and if an other call will yield more threads.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ReadMessageHistory"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordMessage},System.String)">
            <summary>
            Deletes multiple messages if they are less than 14 days old.  If they are older, none of the messages will be deleted and you will receive a <see cref="T:DSharpPlus.Exceptions.BadRequestException"/> error.
            </summary>
            <param name="messages">A collection of messages to delete.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageMessages"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.DeleteMessageAsync(DSharpPlus.Entities.DiscordMessage,System.String)">
            <summary>
            Deletes a message
            </summary>
            <param name="message">The message to be deleted.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageMessages"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.GetInvitesAsync">
            <summary>
            Returns a list of invite objects
            </summary>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.CreateInstantInvite"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.CreateInviteAsync(System.Int32,System.Int32,System.Boolean,System.Boolean,System.String,System.Nullable{DSharpPlus.InviteTargetType},System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Create a new invite object
            </summary>
            <param name="max_age">Duration of invite in seconds before expiry, or 0 for never.  Defaults to 86400.</param>
            <param name="max_uses">Max number of uses or 0 for unlimited.  Defaults to 0</param>
            <param name="temporary">Whether this invite only grants temporary membership.  Defaults to false.</param>
            <param name="unique">If true, don't try to reuse a similar invite (useful for creating many unique one time use invites)</param>
            <param name="reason">Reason for audit logs.</param>
            <param name="targetType">The target type of the invite, for stream and embedded application invites.</param>
            <param name="targetUserId">The ID of the target user.</param>
            <param name="targetApplicationId">The ID of the target application.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.CreateInstantInvite"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.AddOverwriteAsync(DSharpPlus.Entities.DiscordMember,DSharpPlus.Permissions,DSharpPlus.Permissions,System.String)">
            <summary>
            Adds a channel permission overwrite for specified member.
            </summary>
            <param name="member">The member to have the permission added.</param>
            <param name="allow">The permissions to allow.</param>
            <param name="deny">The permissions to deny.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.AddOverwriteAsync(DSharpPlus.Entities.DiscordRole,DSharpPlus.Permissions,DSharpPlus.Permissions,System.String)">
            <summary>
            Adds a channel permission overwrite for specified role.
            </summary>
            <param name="role">The role to have the permission added.</param>
            <param name="allow">The permissions to allow.</param>
            <param name="deny">The permissions to deny.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.DeleteOverwriteAsync(DSharpPlus.Entities.DiscordMember,System.String)">
            <summary>
            Deletes a channel permission overwrite for the specified member.
            </summary>
            <param name="member">The member to have the permission deleted.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.DeleteOverwriteAsync(DSharpPlus.Entities.DiscordRole,System.String)">
            <summary>
            Deletes a channel permission overwrite for the specified role.
            </summary>
            <param name="role">The role to have the permission deleted.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.TriggerTypingAsync">
            <summary>
            Post a typing indicator
            </summary>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.GetPinnedMessagesAsync">
            <summary>
            Returns all pinned messages
            </summary>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.AccessChannels"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.CreateWebhookAsync(System.String,DSharpPlus.Entities.Optional{System.IO.Stream},System.String)">
            <summary>
            Create a new webhook
            </summary>
            <param name="name">The name of the webhook.</param>
            <param name="avatar">The image for the default webhook avatar.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageWebhooks"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.GetWebhooksAsync">
            <summary>
            Returns a list of webhooks
            </summary>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageWebhooks"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.PlaceMemberAsync(DSharpPlus.Entities.DiscordMember)">
            <summary>
            Moves a member to this voice channel
            </summary>
            <param name="member">The member to be moved.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.MoveMembers"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exists or if the Member does not exists.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.FollowAsync(DSharpPlus.Entities.DiscordChannel)">
            <summary>
            Follows a news channel
            </summary>
            <param name="targetChannel">Channel to crosspost messages to</param>
            <exception cref="T:System.ArgumentException">Thrown when trying to follow a non-news channel</exception>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the current user doesn't have <see cref="F:DSharpPlus.Permissions.ManageWebhooks"/> on the target channel</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.CrosspostMessageAsync(DSharpPlus.Entities.DiscordMessage)">
            <summary>
            Publishes a message in a news channel to following channels
            </summary>
            <param name="message">Message to publish</param>
            <exception cref="T:System.ArgumentException">Thrown when the message has already been crossposted</exception>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">
                Thrown when the current user doesn't have <see cref="F:DSharpPlus.Permissions.ManageWebhooks"/> and/or <see cref="F:DSharpPlus.Permissions.SendMessages"/>
            </exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.UpdateCurrentUserVoiceStateAsync(System.Nullable{System.Boolean},System.Nullable{System.DateTimeOffset})">
            <summary>
            Updates the current user's suppress state in this channel, if stage channel.
            </summary>
            <param name="suppress">Toggles the suppress state.</param>
            <param name="requestToSpeakTimestamp">Sets the time the user requested to speak.</param>
            <exception cref="T:System.ArgumentException">Thrown when the channel is not a stage channel.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.CreateStageInstanceAsync(System.String,System.Nullable{DSharpPlus.PrivacyLevel},System.String)">
            <summary>
            Creates a stage instance in this stage channel.
            </summary>
            <param name="topic">The topic of the stage instance.</param>
            <param name="privacyLevel">The privacy level of the stage instance.</param>
            <param name="reason">The reason the stage instance was created.</param>
            <returns>The created stage instance.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.GetStageInstanceAsync">
            <summary>
            Gets the stage instance in this stage channel.
            </summary>
            <returns>The stage instance in the channel.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.ModifyStageInstanceAsync(System.Action{DSharpPlus.Net.Models.StageInstanceEditModel})">
            <summary>
            Modifies the stage instance in this stage channel.
            </summary>
            <param name="action">Action to perform.</param>
            <returns>The modified stage instance.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.DeleteStageInstanceAsync(System.String)">
            <summary>
            Deletes the stage instance in this stage channel.
            </summary>
            <param name="reason">The reason the stage instance was deleted.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.PermissionsFor(DSharpPlus.Entities.DiscordMember)">
            <summary>
            Calculates permissions for a given member.
            </summary>
            <param name="mbr">Member to calculate permissions for.</param>
            <returns>Calculated permissions for a given member.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.ToString">
            <summary>
            Returns a string representation of this channel.
            </summary>
            <returns>String representation of this channel.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.CreateThreadAsync(DSharpPlus.Entities.DiscordMessage,System.String,DSharpPlus.AutoArchiveDuration,System.String)">
            <summary>
            Creates a new thread within this channel from the given message.
            </summary>
            <param name="message">Message to create the thread from.</param>
            <param name="name">The name of the thread.</param>
            <param name="archiveAfter">The auto archive duration of the thread. 3 day and 7 day archive durations require a level 1 and 2 server boost respectively.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns>The created thread.</returns>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel or message does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.CreateThreadAsync(System.String,DSharpPlus.AutoArchiveDuration,DSharpPlus.ChannelType,System.String)">
            <summary>
            Creates a new thread within this channel.
            </summary>
            <param name="name">The name of the thread.</param>
            <param name="archiveAfter">The auto archive duration of the thread. 3 day and 7 day archive durations require a level 1 and 2 server boost respectively.</param>
            <param name="threadType">The type of thread to create, either a public, news or, private thread. Private threads requires a level 2 server boost and can only be created within channels of type <see cref="F:DSharpPlus.ChannelType.Text"/>.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns>The created thread.</returns>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel or message does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordChannel"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Entities.DiscordChannel"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.Equals(DSharpPlus.Entities.DiscordChannel)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordChannel"/> is equal to another <see cref="T:DSharpPlus.Entities.DiscordChannel"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Entities.DiscordChannel"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Entities.DiscordChannel"/> is equal to this <see cref="T:DSharpPlus.Entities.DiscordChannel"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.DiscordChannel"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.DiscordChannel"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.op_Equality(DSharpPlus.Entities.DiscordChannel,DSharpPlus.Entities.DiscordChannel)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordChannel"/> objects are equal.
            </summary>
            <param name="e1">First channel to compare.</param>
            <param name="e2">Second channel to compare.</param>
            <returns>Whether the two channels are equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannel.op_Inequality(DSharpPlus.Entities.DiscordChannel,DSharpPlus.Entities.DiscordChannel)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordChannel"/> objects are not equal.
            </summary>
            <param name="e1">First channel to compare.</param>
            <param name="e2">Second channel to compare.</param>
            <returns>Whether the two channels are not equal.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordDmChannel">
            <inheritdoc />
            <summary>
            Represents a direct message channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordDmChannel.Recipients">
            <summary>
            Gets the recipients of this direct message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordDmChannel.IconHash">
            <summary>
            Gets the hash of this channel's icon.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordDmChannel.OwnerId">
            <summary>
            Gets the ID of this direct message's creator.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordDmChannel.ApplicationId">
            <summary>
            Gets the application ID of the direct message's creator if it a bot.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordDmChannel.IconUrl">
            <summary>
            Gets the URL of this channel's icon.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordDmChannel.AddDmRecipientAsync(System.UInt64,System.String,System.String)">
            <summary>
            Only use for Group DMs! Whitelisted bots only. Requires user's oauth2 access token
            </summary>
            <param name="user_id">The ID of the user to add.</param>
            <param name="accesstoken">The OAuth2 access token.</param>
            <param name="nickname">The nickname to give to the user.</param>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordDmChannel.RemoveDmRecipientAsync(System.UInt64,System.String)">
            <summary>
            Only use for Group DMs!
            </summary>
            <param name="user_id">The ID of the User to remove.</param>
            <param name="accesstoken">The OAuth2 access token.</param>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordFollowedChannel">
            <summary>
            Represents a followed channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordFollowedChannel.ChannelId">
            <summary>
            Gets the ID of the channel following the announcement channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordFollowedChannel.WebhookId">
            <summary>
            Gets the ID of the webhook that posts crossposted messages to the channel.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordAttachment">
            <summary>
            Represents an attachment for a message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAttachment.FileName">
            <summary>
            Gets the name of the file.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAttachment.FileSize">
            <summary>
            Gets the file size in bytes.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAttachment.MediaType">
            <summary>
            Gets the media, or MIME, type of the file.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAttachment.Url">
            <summary>
            Gets the URL of the file.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAttachment.ProxyUrl">
            <summary>
            Gets the proxied URL of the file.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAttachment.Height">
            <summary>
            Gets the height. Applicable only if the attachment is an image.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAttachment.Width">
            <summary>
            Gets the width. Applicable only if the attachment is an image.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAttachment.Ephemeral">
            <summary>
            Gets whether this attachment is ephemeral.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordMentions">
            <summary>
            Handles mentionables
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMentions.Roles">
            <summary>
            Collection roles to serialize
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMentions.Users">
            <summary>
            Collection of users to serialize
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMentions.Parse">
            <summary>
            The values to be parsed
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordMessage">
            <summary>
            Represents a Discord text message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.Channel">
            <summary>
            Gets the channel in which the message was sent.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.ChannelId">
            <summary>
            Gets the ID of the channel in which the message was sent.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.Components">
            <summary>
            Gets the components this message was sent with.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.Author">
            <summary>
            Gets the user or member that sent the message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.Content">
            <summary>
            Gets the message's content.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.Timestamp">
            <summary>
            Gets the message's creation timestamp.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.EditedTimestamp">
            <summary>
            Gets the message's edit timestamp. Will be null if the message was not edited.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.IsEdited">
            <summary>
            Gets whether this message was edited.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.IsTTS">
            <summary>
            Gets whether the message is a text-to-speech message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.MentionEveryone">
            <summary>
            Gets whether the message mentions everyone.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.MentionedUsers">
            <summary>
            Gets users or members mentioned by this message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.MentionedRoles">
            <summary>
            Gets roles mentioned by this message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.MentionedChannels">
            <summary>
            Gets channels mentioned by this message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.Attachments">
            <summary>
            Gets files attached to this message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.Embeds">
            <summary>
            Gets embeds attached to this message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.Reactions">
            <summary>
            Gets reactions used on this message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.Pinned">
            <summary>
            Gets whether the message is pinned.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.WebhookId">
            <summary>
            Gets the id of the webhook that generated this message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.MessageType">
            <summary>
            Gets the type of the message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.Activity">
            <summary>
            Gets the message activity in the Rich Presence embed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.Application">
            <summary>
            Gets the message application in the Rich Presence embed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.Reference">
            <summary>
            Gets the original message reference from the crossposted message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.Flags">
            <summary>
            Gets the bitwise flags for this message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.WebhookMessage">
            <summary>
            Gets whether the message originated from a webhook.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.JumpLink">
            <summary>
            Gets the jump link to this message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.Stickers">
            <summary>
            Gets stickers for this message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.ReferencedMessage">
            <summary>
            Gets the message object for the referenced message
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.Interaction">
            <summary>
            Gets whether the message is a response to an interaction.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessage.ApplicationId">
            <summary>
            Gets the id of the interaction application, if a response to an interaction.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.ModifyAsync(DSharpPlus.Entities.Optional{System.String})">
            <summary>
            Edits the message.
            </summary>
            <param name="content">New content.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client tried to modify a message not sent by them.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.ModifyAsync(DSharpPlus.Entities.Optional{DSharpPlus.Entities.DiscordEmbed})">
            <summary>
            Edits the message.
            </summary>
            <param name="embed">New embed.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client tried to modify a message not sent by them.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.ModifyAsync(DSharpPlus.Entities.Optional{System.String},DSharpPlus.Entities.Optional{DSharpPlus.Entities.DiscordEmbed})">
            <summary>
            Edits the message.
            </summary>
            <param name="content">New content.</param>
            <param name="embed">New embed.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client tried to modify a message not sent by them.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.ModifyAsync(DSharpPlus.Entities.Optional{System.String},DSharpPlus.Entities.Optional{System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordEmbed}})">
            <summary>
            Edits the message.
            </summary>
            <param name="content">New content.</param>
            <param name="embeds">New embeds.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client tried to modify a message not sent by them.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.ModifyAsync(DSharpPlus.Entities.DiscordMessageBuilder,System.Boolean,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordAttachment})">
            <summary>
            Edits the message.
            </summary>
            <param name="builder">The builder of the message to edit.</param>
            <param name="suppressEmbeds">Whether to suppress embeds on the message.</param>
            <param name="attachments">Attached files to keep.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client tried to modify a message not sent by them.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.ModifyAsync(System.Action{DSharpPlus.Entities.DiscordMessageBuilder},System.Boolean,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordAttachment})">
            <summary>
            Edits the message.
            </summary>
            <param name="action">The builder of the message to edit.</param>
            <param name="suppressEmbeds">Whether to suppress embeds on the message.</param>
            <param name="attachments">Attached files to keep.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client tried to modify a message not sent by them.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.ModifyEmbedSuppressionAsync(System.Boolean)">
            <summary>
            Modifies the visibility of embeds in this message.
            </summary>
            <param name="hideEmbeds">Whether to hide all embeds.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageMessages"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.DeleteAsync(System.String)">
            <summary>
            Deletes the message.
            </summary>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageMessages"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.PinAsync">
            <summary>
            Pins the message in its channel.
            </summary>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageMessages"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.UnpinAsync">
            <summary>
            Unpins the message in its channel.
            </summary>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageMessages"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.RespondAsync(System.String)">
            <summary>
            Responds to the message. This produces a reply.
            </summary>
            <param name="content">Message content to respond with.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.SendMessages"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.RespondAsync(DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Responds to the message. This produces a reply.
            </summary>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.SendMessages"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.RespondAsync(System.String,DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Responds to the message. This produces a reply.
            </summary>
            <param name="content">Message content to respond with.</param>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.SendMessages"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.RespondAsync(DSharpPlus.Entities.DiscordMessageBuilder)">
            <summary>
            Responds to the message. This produces a reply.
            </summary>
            <param name="builder">The Discord message builder.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.SendMessages"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.RespondAsync(System.Action{DSharpPlus.Entities.DiscordMessageBuilder})">
            <summary>
            Responds to the message. This produces a reply.
            </summary>
            <param name="action">The Discord message builder.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.SendMessages"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.CreateThreadAsync(System.String,DSharpPlus.AutoArchiveDuration,System.String)">
            <summary>
            Creates a new thread within this channel from this message.
            </summary>
            <param name="name">The name of the thread.</param>
            <param name="archiveAfter">The auto archive duration of the thread. Three and seven day archive options are locked behind level 2 and level 3 server boosts respectively.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns>The created thread.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.SendMessages"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.CreateReactionAsync(DSharpPlus.Entities.DiscordEmoji)">
            <summary>
            Creates a reaction to this message.
            </summary>
            <param name="emoji">The emoji you want to react with, either an emoji or name:id</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.AddReactions"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the emoji does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.DeleteOwnReactionAsync(DSharpPlus.Entities.DiscordEmoji)">
            <summary>
            Deletes your own reaction
            </summary>
            <param name="emoji">Emoji for the reaction you want to remove, either an emoji or name:id</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the emoji does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.DeleteReactionAsync(DSharpPlus.Entities.DiscordEmoji,DSharpPlus.Entities.DiscordUser,System.String)">
            <summary>
            Deletes another user's reaction.
            </summary>
            <param name="emoji">Emoji for the reaction you want to remove, either an emoji or name:id.</param>
            <param name="user">Member you want to remove the reaction for</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageMessages"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the emoji does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.GetReactionsAsync(DSharpPlus.Entities.DiscordEmoji,System.Int32,System.Nullable{System.UInt64})">
            <summary>
            Gets users that reacted with this emoji.
            </summary>
            <param name="emoji">Emoji to react with.</param>
            <param name="limit">Limit of users to fetch.</param>
            <param name="after">Fetch users after this user's id.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the emoji does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.DeleteAllReactionsAsync(System.String)">
            <summary>
            Deletes all reactions for this message.
            </summary>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageMessages"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the emoji does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.DeleteReactionsEmojiAsync(DSharpPlus.Entities.DiscordEmoji)">
            <summary>
            Deletes all reactions of a specific reaction for this message.
            </summary>
            <param name="emoji">The emoji to clear, either an emoji or name:id.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageMessages"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the emoji does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.ToString">
            <summary>
            Returns a string representation of this message.
            </summary>
            <returns>String representation of this message.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordMessage"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Entities.DiscordMessage"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.Equals(DSharpPlus.Entities.DiscordMessage)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordMessage"/> is equal to another <see cref="T:DSharpPlus.Entities.DiscordMessage"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Entities.DiscordMessage"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Entities.DiscordMessage"/> is equal to this <see cref="T:DSharpPlus.Entities.DiscordMessage"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.DiscordMessage"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.DiscordMessage"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.op_Equality(DSharpPlus.Entities.DiscordMessage,DSharpPlus.Entities.DiscordMessage)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordMessage"/> objects are equal.
            </summary>
            <param name="e1">First message to compare.</param>
            <param name="e2">Second message to compare.</param>
            <returns>Whether the two messages are equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessage.op_Inequality(DSharpPlus.Entities.DiscordMessage,DSharpPlus.Entities.DiscordMessage)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordMessage"/> objects are not equal.
            </summary>
            <param name="e1">First message to compare.</param>
            <param name="e2">Second message to compare.</param>
            <returns>Whether the two messages are not equal.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordMessageActivity">
            <summary>
            Represents a Rich Presence activity.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageActivity.Type">
            <summary>
            Gets the activity type.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageActivity.PartyId">
            <summary>
            Gets the party id of the activity.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordMessageApplication">
            <summary>
            Represents a Rich Presence application.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageApplication.CoverImageUrl">
            <summary>
            Gets the ID of this application's cover image.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageApplication.Description">
            <summary>
            Gets the application's description.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageApplication.Icon">
            <summary>
            Gets the ID of the application's icon.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageApplication.Name">
            <summary>
            Gets the application's name.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordMessageBuilder">
            <summary>
            Constructs a Message to be sent.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageBuilder.Embed">
            <summary>
            Gets or sets the embed for the builder. This will always set the builder to have one embed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageBuilder.Sticker">
            <summary>
            Gets or sets the sticker for the builder. This will always set the builder to have one sticker.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageBuilder.Stickers">
            <summary>
            The stickers to attach to the message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageBuilder.ReplyId">
            <summary>
            Gets the Reply Message ID.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageBuilder.MentionOnReply">
            <summary>
            Gets if the Reply should mention the user.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageBuilder.FailOnInvalidReply">
            <summary>
            Gets if the Reply will error if the Reply Message Id does not reference a valid message.
            <para>If set to false, invalid replies are send as a regular message.</para>
            <para>Defaults to false.</para>
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessageBuilder.#ctor">
            <summary>
            Constructs a new discord message builder
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessageBuilder.#ctor(DSharpPlus.Entities.DiscordMessageBuilder)">
            <summary>
            Constructs a new discord message builder based on a previous builder.
            </summary>
            <param name="builder">The builder to copy.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessageBuilder.#ctor(DSharpPlus.Entities.IDiscordMessageBuilder)">
            <summary>
            Copies the common properties from the passed builder.
            </summary>
            <param name="builder">The builder to copy.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessageBuilder.#ctor(DSharpPlus.Entities.DiscordMessage)">
            <summary>
            Constructs a new discord message builder based on the passed message.
            </summary>
            <param name="baseMessage">The message to copy.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessageBuilder.WithSticker(DSharpPlus.Entities.DiscordMessageSticker)">
            <summary>
            Adds a sticker to the message. Sticker must be from current guild.
            </summary>
            <param name="sticker">The sticker to add.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessageBuilder.WithStickers(System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordMessageSticker})">
            <summary>
            Adds a sticker to the message. Sticker must be from current guild.
            </summary>
            <param name="stickers">The sticker to add.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessageBuilder.WithEmbed(DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Sets the embed for the current builder.
            </summary>
            <param name="embed">The embed that should be set.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessageBuilder.WithAllowedMention(DSharpPlus.Entities.IMention)">
            <summary>
            Sets if the message has allowed mentions.
            </summary>
            <param name="allowedMention">The allowed Mention that should be sent.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessageBuilder.WithAllowedMentions(System.Collections.Generic.IEnumerable{DSharpPlus.Entities.IMention})">
            <summary>
            Sets if the message has allowed mentions.
            </summary>
            <param name="allowedMentions">The allowed Mentions that should be sent.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessageBuilder.WithReply(System.Nullable{System.UInt64},System.Boolean,System.Boolean)">
            <summary>
            Sets if the message is a reply
            </summary>
            <param name="messageId">The ID of the message to reply to.</param>
            <param name="mention">If we should mention the user in the reply.</param>
            <param name="failOnInvalidReply">Whether sending a reply that references an invalid message should be </param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessageBuilder.SendAsync(DSharpPlus.Entities.DiscordChannel)">
            <summary>
            Sends the Message to a specific channel
            </summary>
            <param name="channel">The channel the message should be sent to.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessageBuilder.ModifyAsync(DSharpPlus.Entities.DiscordMessage)">
            <summary>
            Sends the modified message.
            <para>Note: Message replies cannot be modified. To clear the reply, simply pass <see langword="null"/> to <see cref="M:DSharpPlus.Entities.DiscordMessageBuilder.WithReply(System.Nullable{System.UInt64},System.Boolean,System.Boolean)"/>.</para>
            </summary>
            <param name="msg">The original Message to modify.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMessageBuilder.Validate(System.Boolean)">
            <summary>
            Does the validation before we send a the Create/Modify request.
            </summary>
            <param name="isModify">Tells the method to perform the Modify Validation or Create Validation.</param>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordMessageFile">
            <summary>
            Represents the File that should be sent to Discord from the <see cref="T:DSharpPlus.Entities.DiscordMessageBuilder"/>.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageFile.FileName">
            <summary>
            Gets the FileName of the File.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageFile.Stream">
            <summary>
            Gets the stream of the File.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageFile.ResetPositionTo">
            <summary>
            Gets the position the File should be reset to.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordMessageInteraction">
            <summary>
            Represents the message interaction data sent when a message is an interaction response.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageInteraction.Type">
            <summary>
            Gets the type of the interaction.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageInteraction.Name">
            <summary>
            Gets the name of the <see cref="T:DSharpPlus.Entities.DiscordApplicationCommand"/>.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageInteraction.User">
            <summary>
            Gets the user who invoked the interaction.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordMessageReference">
            <summary>
            Represents data from the original message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageReference.Message">
            <summary>
            Gets the original message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageReference.Channel">
            <summary>
            Gets the channel of the original message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageReference.Guild">
            <summary>
            Gets the guild of the original message.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordMessageSticker">
            <summary>
            Represents a Discord Sticker.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageSticker.PackId">
            <summary>
            Gets the Pack ID of this sticker.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageSticker.Name">
            <summary>
            Gets the Name of the sticker.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageSticker.Description">
            <summary>
            Gets the Description of the sticker.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageSticker.Type">
            <summary>
            Gets the type of sticker.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageSticker.User">
            <summary>
            For guild stickers, gets the user that made the sticker.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageSticker.Guild">
            <summary>
            Gets the guild associated with this sticker, if any.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageSticker.GuildId">
            <summary>
            Gets the Id of the sticker this guild belongs to, if any.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageSticker.Available">
            <summary>
            Gets whether this sticker is available. Only applicable to guild stickers.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageSticker.SortValue">
            <summary>
            Gets the sticker's sort order, if it's in a pack.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageSticker.Tags">
            <summary>
            Gets the list of tags for the sticker.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageSticker.Asset">
            <summary>
            Gets the asset hash of the sticker.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageSticker.PreviewAsset">
            <summary>
            Gets the preview asset hash of the sticker.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageSticker.FormatType">
            <summary>
            Gets the Format type of the sticker.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordMessageStickerPack">
            <summary>
            Represents a Discord message sticker pack.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageStickerPack.Stickers">
            <summary>
            Gets the stickers contained in this pack.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageStickerPack.Name">
            <summary>
            Gets the name of this sticker pack.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageStickerPack.SkuId">
            <summary>
            Gets the Id of this pack's SKU.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageStickerPack.CoverStickerId">
            <summary>
            Gets the Id of this pack's cover.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageStickerPack.Description">
            <summary>
            Gets the description of this sticker pack.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMessageStickerPack.BannerAssetId">
            <summary>
            Gets the Id of the sticker pack's banner image.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordReaction">
            <summary>
            Represents a reaction to a message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordReaction.Count">
            <summary>
            Gets the total number of users who reacted with this emoji.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordReaction.IsMe">
            <summary>
            Gets whether the current user reacted with this emoji.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordReaction.Emoji">
            <summary>
            Gets the emoji used to react to this message.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordEmbed">
            <summary>
            Represents a discord embed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Title">
            <summary>
            Gets the embed's title.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Type">
            <summary>
            Gets the embed's type.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Description">
            <summary>
            Gets the embed's description.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Url">
            <summary>
            Gets the embed's url.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Timestamp">
            <summary>
            Gets the embed's timestamp.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Color">
            <summary>
            Gets the embed's color.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Footer">
            <summary>
            Gets the embed's footer.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Image">
            <summary>
            Gets the embed's image.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Thumbnail">
            <summary>
            Gets the embed's thumbnail.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Video">
            <summary>
            Gets the embed's video.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Provider">
            <summary>
            Gets the embed's provider.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Author">
            <summary>
            Gets the embed's author.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbed.Fields">
            <summary>
            Gets the embed's fields.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordEmbedAuthor">
            <summary>
            Gets the author of a discord embed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedAuthor.Name">
            <summary>
            Gets the name of the author.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedAuthor.Url">
            <summary>
            Gets the url of the author.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedAuthor.IconUrl">
            <summary>
            Gets the url of the author's icon.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedAuthor.ProxyIconUrl">
            <summary>
            Gets the proxied url of the author's icon.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordEmbedBuilder">
            <summary>
            Constructs embeds.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.Title">
            <summary>
            Gets or sets the embed's title.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.Description">
            <summary>
            Gets or sets the embed's description.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.Url">
            <summary>
            Gets or sets the url for the embed's title.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.Color">
            <summary>
            Gets or sets the embed's color.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.Timestamp">
            <summary>
            Gets or sets the embed's timestamp.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.ImageUrl">
            <summary>
            Gets or sets the embed's image url.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.Author">
            <summary>
            Gets or sets the embed's author.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.Footer">
            <summary>
            Gets or sets the embed's footer.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.Thumbnail">
            <summary>
            Gets or sets the embed's thumbnail.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.Fields">
            <summary>
            Gets the embed's fields.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.#ctor">
            <summary>
            Constructs a new empty embed builder.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.#ctor(DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Constructs a new embed builder using another embed as prototype.
            </summary>
            <param name="original">Embed to use as prototype.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithTitle(System.String)">
            <summary>
            Sets the embed's title.
            </summary>
            <param name="title">Title to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithDescription(System.String)">
            <summary>
            Sets the embed's description.
            </summary>
            <param name="description">Description to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithUrl(System.String)">
            <summary>
            Sets the embed's title url.
            </summary>
            <param name="url">Title url to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithUrl(System.Uri)">
            <summary>
            Sets the embed's title url.
            </summary>
            <param name="url">Title url to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithColor(DSharpPlus.Entities.DiscordColor)">
            <summary>
            Sets the embed's color.
            </summary>
            <param name="color">Embed color to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithTimestamp(System.Nullable{System.DateTimeOffset})">
            <summary>
            Sets the embed's timestamp.
            </summary>
            <param name="timestamp">Timestamp to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithTimestamp(System.Nullable{System.DateTime})">
            <summary>
            Sets the embed's timestamp.
            </summary>
            <param name="timestamp">Timestamp to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithTimestamp(System.UInt64)">
            <summary>
            Sets the embed's timestamp based on a snowflake.
            </summary>
            <param name="snowflake">Snowflake to calculate timestamp from.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithImageUrl(System.String)">
            <summary>
            Sets the embed's image url.
            </summary>
            <param name="url">Image url to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithImageUrl(System.Uri)">
            <summary>
            Sets the embed's image url.
            </summary>
            <param name="url">Image url to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithThumbnail(System.String,System.Int32,System.Int32)">
            <summary>
            Sets the embed's thumbnail.
            </summary>
            <param name="url">Thumbnail url to set.</param>
            <param name="height">The height of the thumbnail to set.</param>
            <param name="width">The width of the thumbnail to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithThumbnail(System.Uri,System.Int32,System.Int32)">
            <summary>
            Sets the embed's thumbnail.
            </summary>
            <param name="url">Thumbnail url to set.</param>
            <param name="height">The height of the thumbnail to set.</param>
            <param name="width">The width of the thumbnail to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithAuthor(System.String,System.String,System.String)">
            <summary>
            Sets the embed's author.
            </summary>
            <param name="name">Author's name.</param>
            <param name="url">Author's url.</param>
            <param name="iconUrl">Author icon's url.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.WithFooter(System.String,System.String)">
            <summary>
            Sets the embed's footer.
            </summary>
            <param name="text">Footer's text.</param>
            <param name="iconUrl">Footer icon's url.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.AddField(System.String,System.String,System.Boolean)">
            <summary>
            Adds a field to this embed.
            </summary>
            <param name="name">Name of the field to add.</param>
            <param name="value">Value of the field to add.</param>
            <param name="inline">Whether the field is to be inline or not.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.RemoveFieldAt(System.Int32)">
            <summary>
            Removes a field of the specified index from this embed.
            </summary>
            <param name="index">Index of the field to remove.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.RemoveFieldRange(System.Int32,System.Int32)">
            <summary>
            Removes fields of the specified range from this embed.
            </summary>
            <param name="index">Index of the first field to remove.</param>
            <param name="count">Number of fields to remove.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.ClearFields">
            <summary>
            Removes all fields from this embed.
            </summary>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.Build">
            <summary>
            Constructs a new embed from data supplied to this builder.
            </summary>
            <returns>New discord embed.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmbedBuilder.op_Implicit(DSharpPlus.Entities.DiscordEmbedBuilder)~DSharpPlus.Entities.DiscordEmbed">
            <summary>
            Implicitly converts this builder to an embed.
            </summary>
            <param name="builder">Builder to convert.</param>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordEmbedBuilder.EmbedAuthor">
            <summary>
            Represents an embed author.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.EmbedAuthor.Name">
            <summary>
            Gets or sets the name of the author.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.EmbedAuthor.Url">
            <summary>
            Gets or sets the Url to which the author's link leads.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.EmbedAuthor.IconUrl">
            <summary>
            Gets or sets the Author's icon url.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordEmbedBuilder.EmbedFooter">
            <summary>
            Represents an embed footer.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.EmbedFooter.Text">
            <summary>
            Gets or sets the text of the footer.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.EmbedFooter.IconUrl">
            <summary>
            Gets or sets the Url
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordEmbedBuilder.EmbedThumbnail">
            <summary>
            Represents an embed thumbnail.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.EmbedThumbnail.Url">
            <summary>
            Gets or sets the thumbnail's image url.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.EmbedThumbnail.Height">
            <summary>
            Gets or sets the thumbnail's height.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedBuilder.EmbedThumbnail.Width">
            <summary>
            Gets or sets the thumbnail's width.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordEmbedField">
            <summary>
            Represents a field inside a discord embed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedField.Name">
            <summary>
            Gets the name of the field.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedField.Value">
            <summary>
            Gets the value of the field.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedField.Inline">
            <summary>
            Gets whether or not this field should display inline.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordEmbedFooter">
            <summary>
            Represents a footer in an embed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedFooter.Text">
            <summary>
            Gets the footer's text.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedFooter.IconUrl">
            <summary>
            Gets the url of the footer's icon.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedFooter.ProxyIconUrl">
            <summary>
            Gets the proxied url of the footer's icon.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordEmbedImage">
            <summary>
            Represents an image in an embed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedImage.Url">
            <summary>
            Gets the source url of the image.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedImage.ProxyUrl">
            <summary>
            Gets a proxied url of the image.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedImage.Height">
            <summary>
            Gets the height of the image.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedImage.Width">
            <summary>
            Gets the width of the image.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordEmbedProvider">
            <summary>
            Represents an embed provider.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedProvider.Name">
            <summary>
            Gets the name of the provider.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedProvider.Url">
            <summary>
            Gets the url of the provider.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordEmbedThumbnail">
            <summary>
            Represents a thumbnail in an embed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedThumbnail.Url">
            <summary>
            Gets the source url of the thumbnail (only https).
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedThumbnail.ProxyUrl">
            <summary>
            Gets a proxied url of the thumbnail.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedThumbnail.Height">
            <summary>
            Gets the height of the thumbnail.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedThumbnail.Width">
            <summary>
            Gets the width of the thumbnail.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordEmbedVideo">
            <summary>
            Represents a video inside an embed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedVideo.Url">
            <summary>
            Gets the source url of the video.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedVideo.Height">
            <summary>
            Gets the height of the video.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmbedVideo.Width">
            <summary>
            Gets the width of the video.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.IMention">
            <summary>
            Interface for mentionables
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.RepliedUserMention">
            <summary>
            Allows a reply to ping the user being replied to.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.RepliedUserMention.All">
            <summary>
            Mention the user being replied to.  Alias to <see cref="M:DSharpPlus.Entities.RepliedUserMention.#ctor"/> constructor.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.EveryoneMention">
            <summary>
            Allows @everyone and @here pings to mention in the message.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.EveryoneMention.All">
            <summary>
            Allow the mentioning of @everyone and @here. Alias to <see cref="M:DSharpPlus.Entities.EveryoneMention.#ctor"/> constructor.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.UserMention">
            <summary>
            Allows @user pings to mention in the message.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.UserMention.All">
            <summary>
            Allow mentioning of all users. Alias to <see cref="M:DSharpPlus.Entities.UserMention.#ctor"/> constructor.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.UserMention.Id">
            <summary>
            Optional Id of the user that is allowed to be mentioned. If null, then all user mentions will be allowed.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.UserMention.#ctor(System.UInt64)">
            <summary>
            Allows the specific user to be mentioned
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:DSharpPlus.Entities.UserMention.#ctor(DSharpPlus.Entities.DiscordUser)">
            <summary>
            Allows the specific user to be mentioned
            </summary>
            <param name="user"></param>
        </member>
        <member name="T:DSharpPlus.Entities.RoleMention">
            <summary>
            Allows @role pings to mention in the message.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.RoleMention.All">
            <summary>
            Allow the mentioning of all roles.  Alias to <see cref="M:DSharpPlus.Entities.RoleMention.#ctor"/> constructor.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.RoleMention.Id">
            <summary>
            Optional Id of the role that is allowed to be mentioned. If null, then all role mentions will be allowed.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.RoleMention.#ctor(System.UInt64)">
            <summary>
            Allows the specific id to be mentioned
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:DSharpPlus.Entities.RoleMention.#ctor(DSharpPlus.Entities.DiscordRole)">
            <summary>
            Allows the specific role to be mentioned
            </summary>
            <param name="role"></param>
        </member>
        <member name="T:DSharpPlus.Entities.Mentions">
            <summary>
            Contains static instances of common mention patterns.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.Mentions.All">
            <summary>
            All possible mentions - @everyone + @here, users, and roles.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.Mentions.None">
            <summary>
            No mentions allowed.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordOverwrite">
            <summary>
            Represents a permission overwrite for a channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordOverwrite.Type">
            <summary>
            Gets the type of the overwrite. Either "role" or "member".
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordOverwrite.Allowed">
            <summary>
            Gets the allowed permission set.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordOverwrite.Denied">
            <summary>
            Gets the denied permission set.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordOverwrite.DeleteAsync(System.String)">
            <summary>
            Deletes this channel overwrite.
            </summary>
            <param name="reason">Reason as to why this overwrite gets deleted.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordOverwrite.UpdateAsync(System.Nullable{DSharpPlus.Permissions},System.Nullable{DSharpPlus.Permissions},System.String)">
            <summary>
            Updates this channel overwrite.
            </summary>
            <param name="allow">Permissions that are allowed.</param>
            <param name="deny">Permissions that are denied.</param>
            <param name="reason">Reason as to why you made this change.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the overwrite does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordOverwrite.GetMemberAsync">
            <summary>
            Gets the DiscordMember that is affected by this overwrite.
            </summary>
            <returns>The DiscordMember that is affected by this overwrite</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.AccessChannels"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the overwrite does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordOverwrite.GetRoleAsync">
            <summary>
            Gets the DiscordRole that is affected by this overwrite.
            </summary>
            <returns>The DiscordRole that is affected by this overwrite</returns>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the role does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordOverwrite.CheckPermission(DSharpPlus.Permissions)">
            <summary>
            Checks whether given permissions are allowed, denied, or not set.
            </summary>
            <param name="permission">Permissions to check.</param>
            <returns>Whether given permissions are allowed, denied, or not set.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordOverwriteBuilder">
            <summary>
            Represents a Discord permission overwrite builder.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordOverwriteBuilder.Allowed">
            <summary>
            Gets or sets the allowed permissions for this overwrite.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordOverwriteBuilder.Denied">
            <summary>
            Gets or sets the denied permissions for this overwrite.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordOverwriteBuilder.Type">
            <summary>
            Gets the type of this overwrite's target.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordOverwriteBuilder.Target">
            <summary>
            Gets the target for this overwrite.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordOverwriteBuilder.#ctor(DSharpPlus.Entities.DiscordMember)">
            <summary>
            Creates a new Discord permission overwrite builder for a member. This class can be used to construct permission overwrites for guild channels, used when creating channels.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordOverwriteBuilder.#ctor(DSharpPlus.Entities.DiscordRole)">
            <summary>
            Creates a new Discord permission overwrite builder for a role. This class can be used to construct permission overwrites for guild channels, used when creating channels.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordOverwriteBuilder.#ctor">
            <summary>
            Creates a new Discord permission overwrite builder. This class can be used to construct permission overwrites for guild channels, used when creating channels.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordOverwriteBuilder.Allow(DSharpPlus.Permissions)">
            <summary>
            Allows a permission for this overwrite.
            </summary>
            <param name="permission">Permission or permission set to allow for this overwrite.</param>
            <returns>This builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordOverwriteBuilder.Deny(DSharpPlus.Permissions)">
            <summary>
            Denies a permission for this overwrite.
            </summary>
            <param name="permission">Permission or permission set to deny for this overwrite.</param>
            <returns>This builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordOverwriteBuilder.For(DSharpPlus.Entities.DiscordMember)">
            <summary>
            Sets the member to which this overwrite applies.
            </summary>
            <param name="member">Member to which apply this overwrite's permissions.</param>
            <returns>This builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordOverwriteBuilder.For(DSharpPlus.Entities.DiscordRole)">
            <summary>
            Sets the role to which this overwrite applies.
            </summary>
            <param name="role">Role to which apply this overwrite's permissions.</param>
            <returns>This builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordOverwriteBuilder.FromAsync(DSharpPlus.Entities.DiscordOverwrite)">
            <summary>
            Populates this builder with data from another overwrite object.
            </summary>
            <param name="other">Overwrite from which data will be used.</param>
            <returns>This builder.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordOverwriteBuilder.Build">
            <summary>
            Builds this DiscordOverwrite.
            </summary>
            <returns>Use this object for creation of new overwrites.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordStageInstance">
            <summary>
            Represents a discord stage instance.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordStageInstance.Guild">
            <summary>
            Gets the guild this stage instance is in.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordStageInstance.GuildId">
            <summary>
            Gets the id of the guild this stage instance is in.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordStageInstance.Channel">
            <summary>
            Gets the channel this stage instance is in.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordStageInstance.ChannelId">
            <summary>
            Gets the id of the channel this stage instance is in.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordStageInstance.Topic">
            <summary>
            Gets the topic of this stage instance.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordStageInstance.PrivacyLevel">
            <summary>
            Gets the privacy level of this stage instance.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordStageInstance.DiscoverableDisabled">
            <summary>
            Gets whether or not stage discovery is disabled.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordStageInstance.BecomeSpeakerAsync">
            <summary>
            Become speaker of current stage.
            </summary>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.MoveMembers"/> permission</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordStageInstance.SendSpeakerRequestAsync">
            <summary>
            Request to become a speaker in the stage instance.
            </summary>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.RequestToSpeak"/> permission</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordStageInstance.InviteToSpeakAsync(DSharpPlus.Entities.DiscordMember)">
            <summary>
            Invite a member to become a speaker in the state instance.
            </summary>
            <param name="member">The member to invite to speak on stage.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.MoveMembers"/> permission</exception>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordThreadChannel">
            <summary>
            Represents a Discord thread in a channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordThreadChannel.CreatorId">
            <summary>
            Gets the ID of this thread's creator.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordThreadChannel.MessageCount">
            <summary>
            Gets the approximate count of messages in a thread, capped to 50.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordThreadChannel.MemberCount">
            <summary>
            Gets the approximate count of members in a thread, capped to 50.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordThreadChannel.CurrentMember">
            <summary>
            Represents the current member for this thread. This will have a value if the user has joined the thread.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordThreadChannel.ThreadMetadata">
            <summary>
            Gets the approximate count of members in a thread, up to 50.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordThreadChannel.IsNew">
            <summary>
            Gets whether this thread has been newly created. This property is not populated when fetched by REST.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordThreadChannel.AppliedTags">
            <summary>
            Gets the tags applied to this forum post.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordThreadChannel.JoinThreadAsync">
            <summary>
            Makes the current user join the thread.
            </summary>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordThreadChannel.LeaveThreadAsync">
            <summary>
            Makes the current user leave the thread.
            </summary>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordThreadChannel.ListJoinedMembersAsync">
            <summary>
            Returns a full list of the thread members in this thread.
            Requires the <see cref="F:DSharpPlus.DiscordIntents.GuildMembers"/> intent specified in <seealso cref="P:DSharpPlus.DiscordConfiguration.Intents"/>
            </summary>
            <returns>A collection of all threads members in this thread.</returns>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordThreadChannel.AddThreadMemberAsync(DSharpPlus.Entities.DiscordMember)">
            <summary>
            Adds the given DiscordMember to this thread. Requires an not archived thread and send message permissions.
            </summary>
            <param name="member">The member to add to the thread.</param>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.SendMessages"/>.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordThreadChannel.RemoveThreadMemberAsync(DSharpPlus.Entities.DiscordMember)">
            <summary>
            Removes the given DiscordMember from this thread. Requires an not archived thread and send message permissions.
            </summary>
            <param name="member">The member to remove from the thread.</param>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageThreads"/> permission, or is not the creator of the thread if it is private.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordThreadChannel.ModifyAsync(System.Action{DSharpPlus.Net.Models.ThreadChannelEditModel})">
            <summary>
            Modifies the current thread.
            </summary>
            <param name="action">Action to perform on this thread</param>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordThreadChannel.GetThreadMemberAsync(DSharpPlus.Entities.DiscordMember)">
            <summary>
            Returns a thread member object for the specified user if they are a member of the thread, returns a 404 response otherwise.
            </summary>
            <param name="member">The guild member to retrieve.</param>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when a GuildMember has not joined the channel thread.</exception>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordThreadChannelMember.ThreadId">
            <summary>
            Gets ID of the thread.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordThreadChannelMember.Id">
            <summary>
            Gets ID of the user.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordThreadChannelMember.JoinTimeStamp">
            <summary>
            Gets timestamp when the user joined the thread.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordThreadChannelMember.Member">
            <summary>
            Gets the DiscordMember that represents this ThreadMember. Can be a skeleton object.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordThreadChannelMember.Thread">
            <summary>
            Gets the category that contains this channel. For threads, gets the channel this thread was created in.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordThreadChannelMember.Guild">
            <summary>
            Gets the guild to which this channel belongs.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordThreadChannelMember.Discord">
            <summary>
            Gets the client instance this object is tied to.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordThreadChannelMember.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordThreadChannelMember"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Entities.DiscordThreadChannelMember"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordThreadChannelMember.Equals(DSharpPlus.Entities.DiscordThreadChannelMember)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordThreadChannelMember"/> is equal to another <see cref="T:DSharpPlus.Entities.DiscordThreadChannelMember"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Entities.DiscordThreadChannelMember"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Entities.DiscordThreadChannelMember"/> is equal to this <see cref="T:DSharpPlus.Entities.DiscordThreadChannelMember"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordThreadChannelMember.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.DiscordThreadChannelMember"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.DiscordThreadChannelMember"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordThreadChannelMember.op_Equality(DSharpPlus.Entities.DiscordThreadChannelMember,DSharpPlus.Entities.DiscordThreadChannelMember)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordThreadChannelMember"/> objects are equal.
            </summary>
            <param name="e1">First message to compare.</param>
            <param name="e2">Second message to compare.</param>
            <returns>Whether the two messages are equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordThreadChannelMember.op_Inequality(DSharpPlus.Entities.DiscordThreadChannelMember,DSharpPlus.Entities.DiscordThreadChannelMember)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordThreadChannelMember"/> objects are not equal.
            </summary>
            <param name="e1">First message to compare.</param>
            <param name="e2">Second message to compare.</param>
            <returns>Whether the two messages are not equal.</returns>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordThreadChannelMetadata.IsArchived">
            <summary>
            Gets whether this thread is archived or not.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordThreadChannelMetadata.AutoArchiveDuration">
            <summary>
            Gets the duration in minutes to automatically archive the thread after recent activity. Can be set to: 60, 1440, 4320, 10080.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordThreadChannelMetadata.ArchiveTimestamp">
            <summary>
            Gets the time timestamp for when the thread's archive status was last changed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordThreadChannelMetadata.IsLocked">
            <summary>
            Gets whether this thread is locked or not.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordThreadChannelMetadata.CreationTimestamp">
            <summary>
            Gets the time this thread was created. Only populated for threads created after 2022-01-09 (YYYY-MM-DD).
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DefaultReaction">
            <summary>
            Represents an emoji used for reacting to a forum post.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DefaultReaction.EmojiId">
            <summary>
            The ID of the emoji, if applicable.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DefaultReaction.EmojiName">
            <summary>
            The unicoide emoji, if applicable.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordForumChannel">
            <summary>
            Represents either a forum channel or a post in the forum.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordForumChannel.Topic">
            <summary>
            Gets the topic of the forum. This doubles as the guidelines for the forum.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordForumChannel.DefaultPerUserRateLimit">
            <summary>
            Gets the default ratelimit per user for the forum. This is applied to all posts upon creation.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordForumChannel.AvailableTags">
            <summary>
            Gets the available tags for the forum.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordForumChannel.DefaultReaction">
            <summary>
            The default reaction shown on posts when they are created.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordForumChannel.DefaultSortOrder">
            <summary>
            The default sort order of posts in the forum.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordForumChannel.DefaultLayout">
            <summary>
            The default layout of posts in the forum. Defaults to <see cref="F:DSharpPlus.DefaultForumLayout.ListView"/>
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordForumChannel.CreateForumPostAsync(DSharpPlus.Entities.ForumPostBuilder)">
            <summary>
            Creates a forum post.
            </summary>
            <param name="builder">The builder to create the forum post with.</param>
            <returns>The starter (the created thread, and the initial message) from creating the post.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordForumPostStarter">
            <summary>
            Represents the return of creating a forum post.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordForumPostStarter.Channel">
            <summary>
            The channel of the forum post.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordForumPostStarter.Message">
            <summary>
            The message of the forum post.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordForumTag.Name">
            <summary>
            Gets the name of this tag.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordForumTag.Moderated">
            <summary>
            Gets whether this tag is moderated. Moderated tags can only be applied by users with the <see cref="F:DSharpPlus.Permissions.ManageThreads"/> permission.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordForumTag.EmojiId">
            <summary>
            Gets the Id of the emoji for this tag, if applicable.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordForumTag.EmojiName">
            <summary>
            Gets the unicode emoji for this tag, if applicable.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordForumTagBuilder.WithName(System.String)">
            <summary>
            Sets the name of this tag.
            </summary>
            <param name="name">The name of the tag.</param>
            <returns>The builder to chain calls with.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordForumTagBuilder.IsModerated(System.Boolean)">
            <summary>
            Sets this tag to be moderated (as in, it can only be set by users with the <see cref="F:DSharpPlus.Permissions.ManageThreads"/> permission).
            </summary>
            <param name="moderated">Whether the tag is moderated.</param>
            <returns>The builder to chain calls with.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordForumTagBuilder.WithEmojiId(System.Nullable{System.UInt64})">
            <summary>
            Sets the emoji ID for this tag (which will overwrite the emoji name).
            </summary>
            <param name="emojiId"></param>
            <returns>The builder to chain calls with.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordForumTagBuilder.WithEmoji(DSharpPlus.Entities.DiscordEmoji)">
            <summary>
            Sets the emoji for this tag.
            </summary>
            <param name="emoji">The emoji to use.</param>
            <returns>The builder to chain calls with.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordForumTagBuilder.WithEmojiName(System.String)">
            <returns>The builder to chain calls with.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.ForumPostBuilder">
            <summary>
            A builder to create a forum post.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.ForumPostBuilder.Name">
            <summary>
            The name (or title) of the post.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.ForumPostBuilder.SlowMode">
            <summary>
            The time (in seconds) that users must wait between messages.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.ForumPostBuilder.Message">
            <summary>
            The message to initiate the forum post with.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.ForumPostBuilder.AppliedTags">
            <summary>
            The tags to apply to this post.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.ForumPostBuilder.AutoArchiveDuration">
            <summary>
            When to automatically archive the post.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.ForumPostBuilder.#ctor">
            <summary>
            Creates a new forum post builder.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.ForumPostBuilder.WithName(System.String)">
            <summary>
            Sets the name (or title) of the post.
            </summary>
            <param name="name">The name of the post.</param>
            <returns>The builder to chain calls with</returns>
        </member>
        <member name="M:DSharpPlus.Entities.ForumPostBuilder.WithSlowMode(System.Int32)">
            <summary>
            Sets slowmode for the post.
            </summary>
            <param name="slowMode">The time in seconds to apply</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.ForumPostBuilder.WithSlowMode(System.TimeSpan)">
            <summary>
            Sets slow mode for the post.
            </summary>
            <param name="slowMode">The slowmode delay to set.</param>
            <returns>The builder to chain calls with.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.ForumPostBuilder.WithMessage(DSharpPlus.Entities.DiscordMessageBuilder)">
            <summary>
            Sets the message to initiate the forum post with.
            </summary>
            <param name="message">The message to start the post with.</param>
            <returns>The builder to chain calls with.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.ForumPostBuilder.WithAutoArchiveDuration(DSharpPlus.AutoArchiveDuration)">
            <summary>
            Sets the auto archive duration for the post.
            </summary>
            <param name="autoArchiveDuration">The duration in which the post will automatically archive</param>
            <returns>The builder to chain calls with</returns>
        </member>
        <member name="M:DSharpPlus.Entities.ForumPostBuilder.AddTag(DSharpPlus.Entities.DiscordForumTag)">
            <summary>
            Adds a tag to the post.
            </summary>
            <param name="tag">The tag to add.</param>
            <returns>The builder to chain calls with.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.ForumPostBuilder.AddTags(System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordForumTag})">
            <summary>
            Adds several tags to the post.
            </summary>
            <param name="tags">The tags to add.</param>
            <returns>The builder to chain calls with.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.ForumPostBuilder.RemoveTag(DSharpPlus.Entities.DiscordForumTag)">
            <summary>
            Removes a tag from the post.
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="P:DSharpPlus.Entities.ThreadQueryResult.HasMore">
            <summary>
            Gets whether additional calls will yield more threads.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.ThreadQueryResult.Threads">
            <summary>
            Gets the list of threads returned by the query. Generally ordered by <seealso cref="P:DSharpPlus.Entities.DiscordThreadChannelMetadata.ArchiveTimestamp"/> in descending order.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordColor">
            <summary>
            Represents a color used in Discord API.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.None">
            <summary>
            Represents no color, or integer 0;
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Black">
            <summary>
            A near-black color. Due to API limitations, the color is #010101, rather than #000000, as the latter is treated as no color.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.White">
            <summary>
            White, or #FFFFFF.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Gray">
            <summary>
            Gray, or #808080.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.DarkGray">
            <summary>
            Dark gray, or #A9A9A9.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.LightGray">
            <summary>
            Light gray, or #808080.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.VeryDarkGray">
            <summary>
            Very dark gray, or #666666.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Blurple">
            <summary>
            Discord Blurple, or #7289DA.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Grayple">
            <summary>
            Discord Grayple, or #99AAB5.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.DarkButNotBlack">
            <summary>
            Discord Dark, But Not Black, or #2C2F33.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.NotQuiteBlack">
            <summary>
            Discord Not QuiteBlack, or #23272A.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Red">
            <summary>
            Red, or #FF0000.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.DarkRed">
            <summary>
            Dark red, or #7F0000.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Green">
            <summary>
            Green, or #00FF00.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.DarkGreen">
            <summary>
            Dark green, or #007F00.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Blue">
            <summary>
            Blue, or #0000FF.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.DarkBlue">
            <summary>
            Dark blue, or #00007F.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Yellow">
            <summary>
            Yellow, or #FFFF00.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Cyan">
            <summary>
            Cyan, or #00FFFF.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Magenta">
            <summary>
            Magenta, or #FF00FF.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Teal">
            <summary>
            Teal, or #008080.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Aquamarine">
            <summary>
            Aquamarine, or #00FFBF.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Gold">
            <summary>
            Gold, or #FFD700.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Goldenrod">
            <summary>
            Goldenrod, or #DAA520.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Azure">
            <summary>
            Azure, or #007FFF.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Rose">
            <summary>
            Rose, or #FF007F.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.SpringGreen">
            <summary>
            Spring green, or #00FF7F.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Chartreuse">
            <summary>
            Chartreuse, or #7FFF00.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Orange">
            <summary>
            Orange, or #FFA500.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Purple">
            <summary>
            Purple, or #800080.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Violet">
            <summary>
            Violet, or #EE82EE.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Brown">
            <summary>
            Brown, or #A52A2A.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.HotPink">
            <summary>
            Hot pink, or #FF69B4
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Lilac">
            <summary>
            Lilac, or #C8A2C8.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.CornflowerBlue">
            <summary>
            Cornflower blue, or #6495ED.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.MidnightBlue">
            <summary>
            Midnight blue, or #191970.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Wheat">
            <summary>
            Wheat, or #F5DEB3.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.IndianRed">
            <summary>
            Indian red, or #CD5C5C.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Turquoise">
            <summary>
            Turquoise, or #30D5C8.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.SapGreen">
            <summary>
            Sap green, or #507D2A.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.PhthaloBlue">
            <summary>
            Phthalo blue, or #000F89.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.PhthaloGreen">
            <summary>
            Phthalo green, or #123524.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Sienna">
            <summary>
            Sienna, or #882D17.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.Value">
            <summary>
            Gets the integer representation of this color.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.R">
            <summary>
            Gets the red component of this color as an 8-bit integer.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.G">
            <summary>
            Gets the green component of this color as an 8-bit integer.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordColor.B">
            <summary>
            Gets the blue component of this color as an 8-bit integer.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordColor.#ctor(System.Int32)">
            <summary>
            Creates a new color with specified value.
            </summary>
            <param name="color">Value of the color.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new color with specified values for red, green, and blue components.
            </summary>
            <param name="r">Value of the red component.</param>
            <param name="g">Value of the green component.</param>
            <param name="b">Value of the blue component.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordColor.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new color with specified values for red, green, and blue components.
            </summary>
            <param name="r">Value of the red component.</param>
            <param name="g">Value of the green component.</param>
            <param name="b">Value of the blue component.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordColor.#ctor(System.String)">
            <summary>
            Creates a new color from specified string representation.
            </summary>
            <param name="color">String representation of the color. Must be 6 hexadecimal characters, optionally with # prefix.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordColor.ToString">
            <summary>
            Gets a string representation of this color.
            </summary>
            <returns>String representation of this color.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordAuditLogEntry">
            <summary>
            Represents an audit log entry.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogEntry.ActionType">
            <summary>
            Gets the entry's action type.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogEntry.UserResponsible">
            <summary>
            Gets the user responsible for the action.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogEntry.Reason">
            <summary>
            Gets the reason defined in the action.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogEntry.ActionCategory">
            <summary>
            Gets the category under which the action falls.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.PropertyChange`1">
            <summary>
            Represents a description of how a property changed.
            </summary>
            <typeparam name="T">Type of the changed property.</typeparam>
        </member>
        <member name="P:DSharpPlus.Entities.PropertyChange`1.Before">
            <summary>
            The property's value before it was changed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.PropertyChange`1.After">
            <summary>
            The property's value after it was changed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.Target">
            <summary>
            Gets the affected guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.NameChange">
            <summary>
            Gets the description of guild name's change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.OwnerChange">
            <summary>
            Gets the description of owner's change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.IconChange">
            <summary>
            Gets the description of icon's change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.VerificationLevelChange">
            <summary>
            Gets the description of verification level's change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.AfkChannelChange">
            <summary>
            Gets the description of afk channel's change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.EmbedChannelChange">
            <summary>
            Gets the description of widget channel's change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.NotificationSettingsChange">
            <summary>
            Gets the description of notification settings' change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.SystemChannelChange">
            <summary>
            Gets the description of system message channel's change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.ExplicitContentFilterChange">
            <summary>
            Gets the description of explicit content filter settings' change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.MfaLevelChange">
            <summary>
            Gets the description of guild's mfa level change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.SplashChange">
            <summary>
            Gets the description of invite splash's change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildEntry.RegionChange">
            <summary>
            Gets the description of the guild's region change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogChannelEntry.Target">
            <summary>
            Gets the affected channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogChannelEntry.NameChange">
            <summary>
            Gets the description of channel's name change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogChannelEntry.TypeChange">
            <summary>
            Gets the description of channel's type change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogChannelEntry.NsfwChange">
            <summary>
            Gets the description of channel's nsfw flag change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogChannelEntry.BitrateChange">
            <summary>
            Gets the description of channel's bitrate change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogChannelEntry.OverwriteChange">
            <summary>
            Gets the description of channel permission overwrites' change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogChannelEntry.TopicChange">
            <summary>
            Gets the description of channel's topic change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogChannelEntry.PerUserRateLimitChange">
            <summary>
            Gets the description of channel's slow mode timeout change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogOverwriteEntry.Target">
            <summary>
            Gets the affected overwrite.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogOverwriteEntry.Channel">
            <summary>
            Gets the channel for which the overwrite was changed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogOverwriteEntry.AllowChange">
            <summary>
            Gets the description of overwrite's allow value change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogOverwriteEntry.DenyChange">
            <summary>
            Gets the description of overwrite's deny value change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogOverwriteEntry.TypeChange">
            <summary>
            Gets the description of overwrite's type change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogOverwriteEntry.TargetIdChange">
            <summary>
            Gets the description of overwrite's target id change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogKickEntry.Target">
            <summary>
            Gets the kicked member.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogPruneEntry.Days">
            <summary>
            Gets the number inactivity days after which members were pruned.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogPruneEntry.Toll">
            <summary>
            Gets the number of members pruned.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogBanEntry.Target">
            <summary>
            Gets the banned member.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMemberUpdateEntry.Target">
            <summary>
            Gets the affected member.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMemberUpdateEntry.NicknameChange">
            <summary>
            Gets the description of member's nickname change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMemberUpdateEntry.RemovedRoles">
            <summary>
            Gets the roles that were removed from the member.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMemberUpdateEntry.AddedRoles">
            <summary>
            Gets the roles that were added to the member.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMemberUpdateEntry.MuteChange">
            <summary>
            Gets the description of member's mute status change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMemberUpdateEntry.DeafenChange">
            <summary>
            Gets the description of member's deaf status change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMemberUpdateEntry.TimeoutChange">
            <summary>
            Gets the change in a user's timeout status
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogRoleUpdateEntry.Target">
            <summary>
            Gets the affected role.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogRoleUpdateEntry.NameChange">
            <summary>
            Gets the description of role's name change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogRoleUpdateEntry.ColorChange">
            <summary>
            Gets the description of role's color change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogRoleUpdateEntry.PermissionChange">
            <summary>
            Gets the description of role's permission set change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogRoleUpdateEntry.PositionChange">
            <summary>
            Gets the description of the role's position change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogRoleUpdateEntry.MentionableChange">
            <summary>
            Gets the description of the role's mentionability change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogRoleUpdateEntry.HoistChange">
            <summary>
            Gets the description of the role's hoist status change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogInviteEntry.Target">
            <summary>
            Gets the affected invite.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogInviteEntry.MaxAgeChange">
            <summary>
            Gets the description of invite's max age change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogInviteEntry.CodeChange">
            <summary>
            Gets the description of invite's code change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogInviteEntry.TemporaryChange">
            <summary>
            Gets the description of invite's temporariness change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogInviteEntry.InviterChange">
            <summary>
            Gets the description of invite's inviting member change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogInviteEntry.ChannelChange">
            <summary>
            Gets the description of invite's target channel change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogInviteEntry.UsesChange">
            <summary>
            Gets the description of invite's use count change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogInviteEntry.MaxUsesChange">
            <summary>
            Gets the description of invite's max use count change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogWebhookEntry.Target">
            <summary>
            Gets the affected webhook.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogWebhookEntry.NameChange">
            <summary>
            Gets the description of webhook's name change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogWebhookEntry.ChannelChange">
            <summary>
            Gets the description of webhook's target channel change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogWebhookEntry.TypeChange">
            <summary>
            Gets the description of webhook's type change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogWebhookEntry.AvatarHashChange">
            <summary>
            Gets the description of webhook's avatar change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogWebhookEntry.ApplicationIdChange">
            <summary>
            Gets the change in application ID.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogEmojiEntry.Target">
            <summary>
            Gets the affected emoji.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogEmojiEntry.NameChange">
            <summary>
            Gets the description of emoji's name change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogStickerEntry.Target">
            <summary>
            Gets the affected sticker.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogStickerEntry.NameChange">
            <summary>
            Gets the description of sticker's name change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogStickerEntry.DescriptionChange">
            <summary>
            Gets the description of sticker's description change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogStickerEntry.TagsChange">
            <summary>
            Gets the description of sticker's tags change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogStickerEntry.AssetChange">
            <summary>
            Gets the description of sticker's tags change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogStickerEntry.GuildIdChange">
            <summary>
            Gets the description of sticker's guild id change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogStickerEntry.AvailabilityChange">
            <summary>
            Gets the description of sticker's availability change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogStickerEntry.IdChange">
            <summary>
            Gets the description of sticker's id change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogStickerEntry.TypeChange">
            <summary>
            Gets the description of sticker's type change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogStickerEntry.FormatChange">
            <summary>
            Gets the description of sticker's format change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMessageEntry.Target">
            <summary>
            Gets the affected message. Note that more often than not, this will only have ID specified.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMessageEntry.Channel">
            <summary>
            Gets the channel in which the action occurred.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMessageEntry.MessageCount">
            <summary>
            Gets the number of messages that were affected.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMessagePinEntry.Target">
            <summary>
            Gets the affected message's user.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMessagePinEntry.Channel">
            <summary>
            Gets the channel the message is in.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMessagePinEntry.Message">
            <summary>
            Gets the message the pin action was for.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogBotAddEntry.TargetBot">
            <summary>
            Gets the bot that has been added to the guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMemberMoveEntry.Channel">
            <summary>
            Gets the channel the members were moved in.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMemberMoveEntry.UserCount">
            <summary>
            Gets the amount of users that were moved out from the voice channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogMemberDisconnectEntry.UserCount">
            <summary>
            Gets the amount of users that were disconnected from the voice channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogIntegrationEntry.EnableEmoticons">
            <summary>
            Gets the description of emoticons' change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogIntegrationEntry.ExpireGracePeriod">
            <summary>
            Gets the description of expire grace period's change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogIntegrationEntry.ExpireBehavior">
            <summary>
            Gets the description of expire behavior change.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildScheduledEventEntry.Name">
            <summary>
            Gets a change in the event's name
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildScheduledEventEntry.Target">
            <summary>
            Gets the target event. Note that this will only have the ID specified if it is not cached.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildScheduledEventEntry.Channel">
            <summary>
            Gets the channel the event was changed to.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildScheduledEventEntry.Description">
            <summary>
            Gets the description change of the event.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildScheduledEventEntry.Type">
            <summary>
            Gets the change of type for the event.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildScheduledEventEntry.ImageHash">
            <summary>
            Gets the change in image hash.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildScheduledEventEntry.Location">
            <summary>
            Gets the change in event location, if it's an external event.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildScheduledEventEntry.PrivacyLevel">
            <summary>
            Gets change in privacy level.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogGuildScheduledEventEntry.Status">
            <summary>
            Gets the change in status.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogThreadEventEntry.Target">
            <summary>
            Gets the target thread.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogThreadEventEntry.Name">
            <summary>
            Gets a change in the thread's name.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogThreadEventEntry.Type">
            <summary>
            Gets a change in channel type.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogThreadEventEntry.Archived">
            <summary>
            Gets a change in the thread's archived status.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogThreadEventEntry.AutoArchiveDuration">
            <summary>
            Gets a change in the thread's auto archive duration.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogThreadEventEntry.Invitable">
            <summary>
            Gets a change in the threads invitibility
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogThreadEventEntry.Locked">
            <summary>
            Gets a change in the thread's locked status
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAuditLogThreadEventEntry.PerUserRateLimit">
            <summary>
            Gets a change in the thread's slowmode setting
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.AuditLogActionCategory">
            <summary>
            Indicates audit log action category.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionCategory.Create">
            <summary>
            Indicates that this action resulted in creation or addition of an object.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionCategory.Update">
            <summary>
            Indicates that this action resulted in update of an object.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionCategory.Delete">
            <summary>
            Indicates that this action resulted in deletion or removal of an object.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionCategory.Other">
            <summary>
            Indicates that this action resulted in something else than creation, addition, update, deleteion, or removal of an object.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.AuditLogActionType">
            <summary>
            Represents type of the action that was taken in given audit log event.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.GuildUpdate">
            <summary>
            Indicates that the guild was updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.ChannelCreate">
            <summary>
            Indicates that the channel was created.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.ChannelUpdate">
            <summary>
            Indicates that the channel was updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.ChannelDelete">
            <summary>
            Indicates that the channel was deleted.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.OverwriteCreate">
            <summary>
            Indicates that the channel permission overwrite was created.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.OverwriteUpdate">
            <summary>
            Indicates that the channel permission overwrite was updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.OverwriteDelete">
            <summary>
            Indicates that the channel permission overwrite was deleted.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.Kick">
            <summary>
            Indicates that the user was kicked.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.Prune">
            <summary>
            Indicates that users were pruned.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.Ban">
            <summary>
            Indicates that the user was banned.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.Unban">
            <summary>
            Indicates that the user was unbanned.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.MemberUpdate">
            <summary>
            Indicates that the member was updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.MemberRoleUpdate">
            <summary>
            Indicates that the member's roles were updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.MemberMove">
            <summary>
            Indicates that the member has moved to another voice channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.MemberDisconnect">
            <summary>
            Indicates that the member has disconnected from a voice channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.BotAdd">
            <summary>
            Indicates that a bot was added to the guild.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.RoleCreate">
            <summary>
            Indicates that the role was created.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.RoleUpdate">
            <summary>
            Indicates that the role was updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.RoleDelete">
            <summary>
            Indicates that the role was deleted.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.InviteCreate">
            <summary>
            Indicates that the invite was created.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.InviteUpdate">
            <summary>
            Indicates that the invite was updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.InviteDelete">
            <summary>
            Indicates that the invite was deleted.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.WebhookCreate">
            <summary>
            Indicates that the webhook was created.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.WebhookUpdate">
            <summary>
            Indicates that the webook was updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.WebhookDelete">
            <summary>
            Indicates that the webhook was deleted.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.EmojiCreate">
            <summary>
            Indicates that the emoji was created.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.EmojiUpdate">
            <summary>
            Indicates that the emoji was updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.EmojiDelete">
            <summary>
            Indicates that the emoji was deleted.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.MessageDelete">
            <summary>
            Indicates that the message was deleted.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.MessageBulkDelete">
            <summary>
            Indicates that messages were bulk-deleted.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.MessagePin">
            <summary>
            Indicates that a message was pinned.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.MessageUnpin">
            <summary>
            Indicates that a message was unpinned.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.IntegrationCreate">
            <summary>
            Indicates that an integration was created.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.IntegrationUpdate">
            <summary>
            Indicates that an integration was updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.IntegrationDelete">
            <summary>
            Indicates that an integration was deleted.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.StickerCreate">
            <summary>
            Indicates that an sticker was created.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.StickerUpdate">
            <summary>
            Indicates that an sticker was updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.StickerDelete">
            <summary>
            Indicates that an sticker was deleted.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.GuildScheduledEventCreate">
            <summary>
            Indicates that a guild event was created.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.GuildScheduledEventUpdate">
            <summary>
            Indicates that a guild event was updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.GuildScheduledEventDelete">
            <summary>
            Indicates that a guild event was deleted.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.ThreadCreate">
            <summary>
            Indicates that a thread was created.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.ThreadUpdate">
            <summary>
            Indicates that a thread was updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.AuditLogActionType.ThreadDelete">
            <summary>
            Indicates that a thread was deleted.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordConnection">
            <summary>
            Gets a Discord connection to a 3rd party service.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordConnection.Id">
            <summary>
            Gets the id of the connection account
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordConnection.Name">
            <summary>
            Gets the username of the connection account.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordConnection.Type">
            <summary>
            Gets the service of the connection (twitch, youtube, steam, twitter, facebook, spotify, leagueoflegends, reddit)
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordConnection.IsRevoked">
            <summary>
            Gets whether the connection is revoked.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordConnection.Integrations">
            <summary>
            Gets a collection of partial server integrations.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordConnection.Verified">
            <summary>
            Gets the connection is verified or not.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordConnection.ShowActivity">
            <summary>
            Gets the connection will show activity or not.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordConnection.FriendSync">
            <summary>
            Gets the connection will sync friends or not.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordConnection.Visibility">
            <summary>
            Gets the visibility of the connection.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordConnection.Discord">
            <summary>
            Gets the client instance this object is tied to.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordTeam">
            <summary>
            Represents a team consisting of users. A team can own an application.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordTeam.Name">
            <summary>
            Gets the team's name.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordTeam.IconHash">
            <summary>
            Gets the team's icon hash.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordTeam.Icon">
            <summary>
            Gets the team's icon.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordTeam.Owner">
            <summary>
            Gets the owner of the team.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordTeam.Members">
            <summary>
            Gets the members of this team.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordTeam.Equals(System.Object)">
            <summary>
            Compares this team to another object and returns whether they are equal.
            </summary>
            <param name="obj">Object to compare this team to.</param>
            <returns>Whether this team is equal to the given object.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordTeam.Equals(DSharpPlus.Entities.DiscordTeam)">
            <summary>
            Compares this team to another team and returns whether they are equal.
            </summary>
            <param name="other">Team to compare to.</param>
            <returns>Whether the teams are equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordTeam.GetHashCode">
            <summary>
            Gets the hash code of this team.
            </summary>
            <returns>Hash code of this team.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordTeam.ToString">
            <summary>
            Converts this team to its string representation.
            </summary>
            <returns>The string representation of this team.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordTeamMember">
            <summary>
            Represents a member of <see cref="T:DSharpPlus.Entities.DiscordTeam"/>.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordTeamMember.MembershipStatus">
            <summary>
            Gets the member's membership status.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordTeamMember.Permissions">
            <summary>
            Gets the member's permissions within the team.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordTeamMember.Team">
            <summary>
            Gets the team this member belongs to.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordTeamMember.User">
            <summary>
            Gets the user who is the team member.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordTeamMember.Equals(System.Object)">
            <summary>
            Compares this team member to another object and returns whether they are equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether this team is equal to given object.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordTeamMember.Equals(DSharpPlus.Entities.DiscordTeamMember)">
            <summary>
            Compares this team member to another team member and returns whether they are equal.
            </summary>
            <param name="other">Team member to compare to.</param>
            <returns>Whether this team member is equal to the given one.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordTeamMember.GetHashCode">
            <summary>
            Gets a hash code of this team member.
            </summary>
            <returns>Hash code of this team member.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordTeamMember.ToString">
            <summary>
            Converts this team member to their string representation.
            </summary>
            <returns>String representation of this team member.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordTeamMembershipStatus">
            <summary>
            Signifies the status of user's team membership.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.DiscordTeamMembershipStatus.Invited">
            <summary>
            Indicates that this user is invited to the team, and is pending membership.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.DiscordTeamMembershipStatus.Accepted">
            <summary>
            Indicates that this user is a member of the team.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordEmoji">
            <summary>
            Represents a Discord emoji.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmoji.Name">
            <summary>
            Gets the name of this emoji.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmoji.Roles">
            <summary>
            Gets IDs the roles this emoji is enabled for.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmoji.RequiresColons">
            <summary>
            Gets whether this emoji requires colons to use.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmoji.IsManaged">
            <summary>
            Gets whether this emoji is managed by an integration.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmoji.IsAnimated">
            <summary>
            Gets whether this emoji is animated.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmoji.Url">
            <summary>
            Gets the image URL of this emoji.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmoji.IsAvailable">
            <summary>
            Gets whether the emoji is available for use.
            An emoji may not be available due to loss of server boost.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.GetDiscordName">
            <summary>
            Gets emoji's name in non-Unicode format (eg. :thinking: instead of the Unicode representation of the emoji).
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.ToString">
            <summary>
            Returns a string representation of this emoji.
            </summary>
            <returns>String representation of this emoji.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordEmoji"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Entities.DiscordEmoji"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.Equals(DSharpPlus.Entities.DiscordEmoji)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordEmoji"/> is equal to another <see cref="T:DSharpPlus.Entities.DiscordEmoji"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Entities.DiscordEmoji"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Entities.DiscordEmoji"/> is equal to this <see cref="T:DSharpPlus.Entities.DiscordEmoji"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.DiscordEmoji"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.DiscordEmoji"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.op_Equality(DSharpPlus.Entities.DiscordEmoji,DSharpPlus.Entities.DiscordEmoji)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordEmoji"/> objects are equal.
            </summary>
            <param name="e1">First emoji to compare.</param>
            <param name="e2">Second emoji to compare.</param>
            <returns>Whether the two emoji are equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.op_Inequality(DSharpPlus.Entities.DiscordEmoji,DSharpPlus.Entities.DiscordEmoji)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordEmoji"/> objects are not equal.
            </summary>
            <param name="e1">First emoji to compare.</param>
            <param name="e2">Second emoji to compare.</param>
            <returns>Whether the two emoji are not equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.op_Implicit(DSharpPlus.Entities.DiscordEmoji)~System.String">
            <summary>
            Implicitly converts this emoji to its string representation.
            </summary>
            <param name="e1">Emoji to convert.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.IsValidUnicode(System.String)">
            <summary>
            Checks whether specified unicode entity is a valid unicode emoji.
            </summary>
            <param name="unicodeEntity">Entity to check.</param>
            <returns>Whether it's a valid emoji.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.FromUnicode(DSharpPlus.BaseDiscordClient,System.String)">
            <summary>
            Creates an emoji object from a unicode entity.
            </summary>
            <param name="client"><see cref="T:DSharpPlus.BaseDiscordClient"/> to attach to the object.</param>
            <param name="unicodeEntity">Unicode entity to create the object from.</param>
            <returns>Create <see cref="T:DSharpPlus.Entities.DiscordEmoji"/> object.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.FromUnicode(System.String)">
            <summary>
            Creates an emoji object from a unicode entity.
            </summary>
            <param name="unicodeEntity">Unicode entity to create the object from.</param>
            <returns>Create <see cref="T:DSharpPlus.Entities.DiscordEmoji"/> object.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.TryFromUnicode(DSharpPlus.BaseDiscordClient,System.String,DSharpPlus.Entities.DiscordEmoji@)">
            <summary>
            Attempts to create an emoji object from a unicode entity.
            </summary>
            <param name="client"><see cref="T:DSharpPlus.BaseDiscordClient"/> to attach to the object.</param>
            <param name="unicodeEntity">Unicode entity to create the object from.</param>
            <param name="emoji">Resulting <see cref="T:DSharpPlus.Entities.DiscordEmoji"/> object.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.TryFromUnicode(System.String,DSharpPlus.Entities.DiscordEmoji@)">
            <summary>
            Attempts to create an emoji object from a unicode entity.
            </summary>
            <param name="unicodeEntity">Unicode entity to create the object from.</param>
            <param name="emoji">Resulting <see cref="T:DSharpPlus.Entities.DiscordEmoji"/> object.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.FromGuildEmote(DSharpPlus.BaseDiscordClient,System.UInt64)">
            <summary>
            Creates an emoji object from a guild emote.
            </summary>
            <param name="client"><see cref="T:DSharpPlus.BaseDiscordClient"/> to attach to the object.</param>
            <param name="id">Id of the emote.</param>
            <returns>Create <see cref="T:DSharpPlus.Entities.DiscordEmoji"/> object.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.TryFromGuildEmote(DSharpPlus.BaseDiscordClient,System.UInt64,DSharpPlus.Entities.DiscordEmoji@)">
            <summary>
            Attempts to create an emoji object from a guild emote.
            </summary>
            <param name="client"><see cref="T:DSharpPlus.BaseDiscordClient"/> to attach to the object.</param>
            <param name="id">Id of the emote.</param>
            <param name="emoji">Resulting <see cref="T:DSharpPlus.Entities.DiscordEmoji"/> object.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.FromName(DSharpPlus.BaseDiscordClient,System.String,System.Boolean)">
            <summary>
            Creates an emoji object from emote name that includes colons (eg. :thinking:). This method also supports
            skin tone variations (eg. :ok_hand::skin-tone-2:), standard emoticons (eg. :D), as well as guild emoji
            (still specified by :name:).
            </summary>
            <param name="client"><see cref="T:DSharpPlus.BaseDiscordClient"/> to attach to the object.</param>
            <param name="name">Name of the emote to find, including colons (eg. :thinking:).</param>
            <param name="includeGuilds">Should guild emojis be included in the search.</param>
            <returns>Create <see cref="T:DSharpPlus.Entities.DiscordEmoji"/> object.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.TryFromName(DSharpPlus.BaseDiscordClient,System.String,DSharpPlus.Entities.DiscordEmoji@)">
            <summary>
            Attempts to create an emoji object from emote name that includes colons (eg. :thinking:). This method also
            supports skin tone variations (eg. :ok_hand::skin-tone-2:), standard emoticons (eg. :D), as well as guild
            emoji (still specified by :name:).
            </summary>
            <param name="client"><see cref="T:DSharpPlus.BaseDiscordClient"/> to attach to the object.</param>
            <param name="name">Name of the emote to find, including colons (eg. :thinking:).</param>
            <param name="emoji">Resulting <see cref="T:DSharpPlus.Entities.DiscordEmoji"/> object.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordEmoji.TryFromName(DSharpPlus.BaseDiscordClient,System.String,System.Boolean,DSharpPlus.Entities.DiscordEmoji@)">
            <summary>
            Attempts to create an emoji object from emote name that includes colons (eg. :thinking:). This method also
            supports skin tone variations (eg. :ok_hand::skin-tone-2:), standard emoticons (eg. :D), as well as guild
            emoji (still specified by :name:).
            </summary>
            <param name="client"><see cref="T:DSharpPlus.BaseDiscordClient"/> to attach to the object.</param>
            <param name="name">Name of the emote to find, including colons (eg. :thinking:).</param>
            <param name="includeGuilds">Should guild emojis be included in the search.</param>
            <param name="emoji">Resulting <see cref="T:DSharpPlus.Entities.DiscordEmoji"/> object.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmoji.UnicodeEmojis">
            <summary>
            Gets a mapping of :name: => unicode.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordEmoji.DiscordNameLookup">
            <summary>
            Gets a mapping of unicode => :name:.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordBan">
            <summary>
            Represents a Discord ban
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordBan.Reason">
            <summary>
            Gets the reason for the ban
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordBan.User">
            <summary>
            Gets the banned user
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordGuild">
            <summary>
            Represents a Discord guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.Name">
            <summary>
            Gets the guild's name.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.IconHash">
            <summary>
            Gets the guild icon's hash.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.IconUrl">
            <summary>
            Gets the guild icon's url.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.SplashHash">
            <summary>
            Gets the guild splash's hash.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.SplashUrl">
            <summary>
            Gets the guild splash's url.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.DiscoverySplashHash">
            <summary>
            Gets the guild discovery splash's hash.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.DiscoverySplashUrl">
            <summary>
            Gets the guild discovery splash's url.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.PreferredLocale">
            <summary>
            Gets the preferred locale of this guild.
            <para>This is used for server discovery and notices from Discord. Defaults to en-US.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.OwnerId">
            <summary>
            Gets the ID of the guild's owner.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.Permissions">
            <summary>
            Gets permissions for the user in the guild (does not include channel overrides)
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.Owner">
            <summary>
            Gets the guild's owner.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild._voiceRegionId">
            <summary>
            Gets the guild's voice region ID.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.VoiceRegion">
            <summary>
            Gets the guild's voice region.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild._afkChannelId">
            <summary>
            Gets the guild's AFK voice channel ID.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.AfkChannel">
            <summary>
            Gets the guild's AFK voice channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.AfkTimeout">
            <summary>
            Gets the guild's AFK timeout.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.VerificationLevel">
            <summary>
            Gets the guild's verification level.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.DefaultMessageNotifications">
            <summary>
            Gets the guild's default notification settings.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.ExplicitContentFilter">
            <summary>
            Gets the guild's explicit content filter settings.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.NsfwLevel">
            <summary>
            Gets the guild's nsfw level.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.SystemChannel">
            <summary>
            Gets the channel where system messages (such as boost and welcome messages) are sent.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.SystemChannelFlags">
            <summary>
            Gets the settings for this guild's system channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.WidgetEnabled">
            <summary>
            Gets whether this guild's widget is enabled.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.WidgetChannel">
            <summary>
            Gets the widget channel for this guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.RulesChannel">
            <summary>
            Gets the rules channel for this guild.
            <para>This is only available if the guild is considered "discoverable".</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.PublicUpdatesChannel">
            <summary>
            Gets the public updates channel (where admins and moderators receive messages from Discord) for this guild.
            <para>This is only available if the guild is considered "discoverable".</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.ApplicationId">
            <summary>
            Gets the application ID of this guild if it is bot created.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.ScheduledEvents">
            <summary>
            Sceduled events for this guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.Roles">
            <summary>
            Gets a collection of this guild's roles.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.Stickers">
            <summary>
            Gets a collection of this guild's stickers.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.Emojis">
            <summary>
            Gets a collection of this guild's emojis.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.Features">
            <summary>
            Gets a collection of this guild's features.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.MfaLevel">
            <summary>
            Gets the required multi-factor authentication level for this guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.JoinedAt">
            <summary>
            Gets this guild's join date.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.IsLarge">
            <summary>
            Gets whether this guild is considered to be a large guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.IsUnavailable">
            <summary>
            Gets whether this guild is unavailable.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.MemberCount">
            <summary>
            Gets the total number of members in this guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.MaxMembers">
            <summary>
            Gets the maximum amount of members allowed for this guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.MaxPresences">
            <summary>
            Gets the maximum amount of presences allowed for this guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.ApproximateMemberCount">
            <summary>
            Gets the approximate number of members in this guild, when using <see cref="M:DSharpPlus.DiscordClient.GetGuildAsync(System.UInt64,System.Nullable{System.Boolean})"/> and having <paramref name="withCounts"></paramref> set to true.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.ApproximatePresenceCount">
            <summary>
            Gets the approximate number of presences in this guild, when using <see cref="M:DSharpPlus.DiscordClient.GetGuildAsync(System.UInt64,System.Nullable{System.Boolean})"/> and having <paramref name="withCounts"></paramref> set to true.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.MaxVideoChannelUsers">
            <summary>
            Gets the maximum amount of users allowed per video channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.VoiceStates">
            <summary>
            Gets a dictionary of all the voice states for this guilds. The key for this dictionary is the ID of the user
            the voice state corresponds to.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.Members">
            <summary>
            Gets a dictionary of all the members that belong to this guild. The dictionary's key is the member ID.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.Channels">
            <summary>
            Gets a dictionary of all the channels associated with this guild. The dictionary's key is the channel ID.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.Threads">
            <summary>
            Gets a dictionary of all the active threads associated with this guild the user has permission to view. The dictionary's key is the channel ID.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.CurrentMember">
            <summary>
            Gets the guild member for current user.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.EveryoneRole">
            <summary>
            Gets the @everyone role for this guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.IsOwner">
            <summary>
            Gets whether the current user is the guild's owner.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.VanityUrlCode">
            <summary>
            Gets the vanity URL code for this guild, when applicable.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.Description">
            <summary>
            Gets the guild description, when applicable.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.Banner">
            <summary>
            Gets this guild's banner hash, when applicable.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.BannerUrl">
            <summary>
            Gets this guild's banner in url form.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.PremiumTier">
            <summary>
            Gets this guild's premium tier (Nitro boosting).
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.PremiumSubscriptionCount">
            <summary>
            Gets the amount of members that boosted this guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.PremiumProgressBarEnabled">
            <summary>
            Whether the guild has the boost progress bar enabled.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.IsNSFW">
            <summary>
            Gets whether this guild is designated as NSFW.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.StageInstances">
            <summary>
            Gets the stage instances in this guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuild.OrderedChannels">
            <summary>
            Gets channels ordered in a manner in which they'd be ordered in the UI of the discord client.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetIconUrl(DSharpPlus.ImageFormat,System.UInt16)">
            <summary>
            Gets guild's icon URL, in requested format and size.
            </summary>
            <param name="imageFormat">The image format of the icon to get.</param>
            <param name="imageSize">The maximum size of the icon. Must be a power of two, minimum 16, maximum 4096.</param>
            <returns>The URL of the guild's icon.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.CreateEventAsync(System.String,System.String,System.Nullable{System.UInt64},DSharpPlus.Entities.ScheduledGuildEventType,DSharpPlus.Entities.ScheduledGuildEventPrivacyLevel,System.DateTimeOffset,System.Nullable{System.DateTimeOffset},System.String,System.String)">
            <summary>
            Creates a new scheduled event in this guild.
            </summary>
            <param name="name">The name of the event to create, up to 100 characters.</param>
            <param name="description">The description of the event, up to 1000 characters.</param>
            <param name="channelId">If a <see cref="F:DSharpPlus.Entities.ScheduledGuildEventType.StageInstance"/> or <see cref="F:DSharpPlus.Entities.ScheduledGuildEventType.VoiceChannel"/>, the id of the channel the event will be hosted in</param>
            <param name="type">The type of the event. <see paramref="channelId"/> must be supplied if not an external event.</param>
            <param name="privacyLevel">The privacy level of thi</param>
            <param name="start">When this event starts. Must be in the future, and before the end date.</param>
            <param name="end">When this event ends. If supplied, must be in the future and after the end date. This is requred for <see cref="F:DSharpPlus.Entities.ScheduledGuildEventType.External"/>.</param>
            <param name="location">Where this event takes place, up to 100 characters. Only applicable if the type is <see cref="F:DSharpPlus.Entities.ScheduledGuildEventType.External"/></param>
            <param name="reason">Reason for audit log.</param>
            <returns>The created event.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.StartEventAsync(DSharpPlus.Entities.DiscordScheduledGuildEvent)">
            <summary>
            Starts a scheduled event in this guild.
            </summary>
            <param name="guildEvent">The event to cancel.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.CancelEventAsync(DSharpPlus.Entities.DiscordScheduledGuildEvent)">
            <summary>
            Cancels an event. The event must be scheduled for it to be cancelled.
            </summary>
            <param name="guildEvent">The event to delete.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.ModifyEventAsync(DSharpPlus.Entities.DiscordScheduledGuildEvent,System.Action{DSharpPlus.Net.Models.ScheduledGuildEventEditModel},System.String)">
            <summary>
            Modifies an existing scheduled event in this guild.
            </summary>
            <param name="guildEvent">The event to modify.</param>
            <param name="mdl">The action to perform on this event</param>
            <param name="reason">The reason this event is being modified</param>
            <returns>The modified object</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.DeleteEventAsync(DSharpPlus.Entities.DiscordScheduledGuildEvent,System.String)">
            <summary>
            Deletes an exising scheduled event in this guild.
            </summary>
            <param name="guildEvent"></param>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetEventsAsync(System.Boolean)">
            <summary>
            Gets the currently active or scheduled events in this guild.
            </summary>
            <param name="withUserCounts">Whether to include number of users subscribed to each event</param>
            <returns>The active and scheduled events on the server, if any.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetEventUsersAsync(DSharpPlus.Entities.DiscordScheduledGuildEvent,System.Int32,System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Gets a list of users who are interested in this event.
            </summary>
            <param name="guildEvent">The event to query users from</param>
            <param name="limit">How many users to fetch.</param>
            <param name="after">Fetch users after this id. Mutually exclusive with before</param>
            <param name="before">Fetch users before this id. Mutually exclusive with after</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.SearchMembersAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Searches the current guild for members who's display name start with the specified name.
            </summary>
            <param name="name">The name to search for.</param>
            <param name="limit">The maximum amount of members to return. Max 1000. Defaults to 1.</param>
            <returns>The members found, if any.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.AddMemberAsync(DSharpPlus.Entities.DiscordUser,System.String,System.String,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordRole},System.Boolean,System.Boolean)">
            <summary>
            Adds a new member to this guild
            </summary>
            <param name="user">User to add</param>
            <param name="access_token">User's access token (OAuth2)</param>
            <param name="nickname">new nickname</param>
            <param name="roles">new roles</param>
            <param name="muted">whether this user has to be muted</param>
            <param name="deaf">whether this user has to be deafened</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.CreateInstantInvite" /> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the <paramref name="user"/> or <paramref name="access_token"/> is not found.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.DeleteAsync">
            <summary>
            Deletes this guild. Requires the caller to be the owner of the guild.
            </summary>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client is not the owner of the guild.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.ModifyAsync(System.Action{DSharpPlus.Net.Models.GuildEditModel})">
            <summary>
            Modifies this guild.
            </summary>
            <param name="action">Action to perform on this guild..</param>
            <returns>The modified guild object.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.ModifyRolePositionsAsync(System.Collections.Generic.IDictionary{System.Int32,DSharpPlus.Entities.DiscordRole},System.String)">
            <summary>
            Batch modifies the role order in the guild.
            </summary>
            <param name="roles">A dictionary of guild roles indexed by their new role positions.</param>
            <param name="reason">An optional Audit log reason on why this action was done.</param>
            <returns>A list of all the current guild roles ordered in their new role positions.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.BanMemberAsync(DSharpPlus.Entities.DiscordMember,System.Int32,System.String)">
            <summary>
            Bans a specified member from this guild.
            </summary>
            <param name="member">Member to ban.</param>
            <param name="delete_message_days">How many days to remove messages from.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.BanMembers"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.BanMemberAsync(System.UInt64,System.Int32,System.String)">
            <summary>
            Bans a specified user by ID. This doesn't require the user to be in this guild.
            </summary>
            <param name="user_id">ID of the user to ban.</param>
            <param name="delete_message_days">How many days to remove messages from.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.BanMembers"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.UnbanMemberAsync(DSharpPlus.Entities.DiscordUser,System.String)">
            <summary>
            Unbans a user from this guild.
            </summary>
            <param name="user">User to unban.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.BanMembers"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the user does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.UnbanMemberAsync(System.UInt64,System.String)">
            <summary>
            Unbans a user by ID.
            </summary>
            <param name="user_id">ID of the user to unban.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.BanMembers"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the user does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.LeaveAsync">
            <summary>
            Leaves this guild.
            </summary>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetBansAsync(System.Nullable{System.Int32},System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Gets the bans for this guild.
            </summary>
            <param name="limit">The number of users to return (up to maximum 1000, default 1000).</param>
            <param name="before">Consider only users before the given user id.</param>
            <param name="after">Consider only users after the given user id.</param>
            <returns>Collection of bans in this guild.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.BanMembers"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetBanAsync(System.UInt64)">
            <summary>
            Gets a ban for a specific user.
            </summary>
            <param name="userId">The ID of the user to get the ban for.</param>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the specified user is not banned.</exception>
            <returns>The requested ban object.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetBanAsync(DSharpPlus.Entities.DiscordUser)">
            <summary>
            Gets a ban for a specific user.
            </summary>
            <param name="user">The user to get the ban for.</param>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the specified user is not banned.</exception>
            <returns>The requested ban object.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.CreateTextChannelAsync(System.String,DSharpPlus.Entities.DiscordChannel,DSharpPlus.Entities.Optional{System.String},System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordOverwriteBuilder},System.Nullable{System.Boolean},DSharpPlus.Entities.Optional{System.Nullable{System.Int32}},System.Nullable{System.Int32},System.String)">
            <summary>
            Creates a new text channel in this guild.
            </summary>
            <param name="name">Name of the new channel.</param>
            <param name="parent">Category to put this channel in.</param>
            <param name="topic">Topic of the channel.</param>
            <param name="overwrites">Permission overwrites for this channel.</param>
            <param name="nsfw">Whether the channel is to be flagged as not safe for work.</param>
            <param name="position">Sorting position of the channel.</param>
            <param name="reason">Reason for audit logs.</param>
            <param name="perUserRateLimit">Slow mode timeout for users.</param>
            <returns>The newly-created channel.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.CreateChannelCategoryAsync(System.String,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordOverwriteBuilder},System.Nullable{System.Int32},System.String)">
            <summary>
            Creates a new channel category in this guild.
            </summary>
            <param name="name">Name of the new category.</param>
            <param name="overwrites">Permission overwrites for this category.</param>
            <param name="position">Sorting position of the channel.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns>The newly-created channel category.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.CreateVoiceChannelAsync(System.String,DSharpPlus.Entities.DiscordChannel,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordOverwriteBuilder},System.Nullable{DSharpPlus.VideoQualityMode},System.Nullable{System.Int32},System.String)">
            <summary>
            Creates a new voice channel in this guild.
            </summary>
            <param name="name">Name of the new channel.</param>
            <param name="parent">Category to put this channel in.</param>
            <param name="bitrate">Bitrate of the channel.</param>
            <param name="user_limit">Maximum number of users in the channel.</param>
            <param name="overwrites">Permission overwrites for this channel.</param>
            <param name="qualityMode">Video quality mode of the channel.</param>
            <param name="position">Sorting position of the channel.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns>The newly-created channel.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.CreateChannelAsync(System.String,DSharpPlus.ChannelType,DSharpPlus.Entities.DiscordChannel,DSharpPlus.Entities.Optional{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordOverwriteBuilder},System.Nullable{System.Boolean},DSharpPlus.Entities.Optional{System.Nullable{System.Int32}},System.Nullable{DSharpPlus.VideoQualityMode},System.Nullable{System.Int32},System.String,System.Nullable{DSharpPlus.AutoArchiveDuration},DSharpPlus.Entities.DefaultReaction,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordForumTagBuilder},System.Nullable{DSharpPlus.DefaultSortOrder})">
            <summary>
            Creates a new channel in this guild.
            </summary>
            <param name="name">Name of the new channel.</param>
            <param name="type">Type of the new channel.</param>
            <param name="parent">Category to put this channel in.</param>
            <param name="topic">Topic of the channel.</param>
            <param name="bitrate">Bitrate of the channel. Applies to voice only.</param>
            <param name="userLimit">Maximum number of users in the channel. Applies to voice only.</param>
            <param name="overwrites">Permission overwrites for this channel.</param>
            <param name="nsfw">Whether the channel is to be flagged as not safe for work. Applies to text only.</param>
            <param name="perUserRateLimit">Slow mode timeout for users.</param>
            <param name="qualityMode">Video quality mode of the channel. Applies to voice only.</param>
            <param name="position">Sorting position of the channel.</param>
            <param name="reason">Reason for audit logs.</param>
            <param name="defaultAutoArchiveDuration">The default duration in which threads (or posts) will archive.</param>
            <param name="defaultReactionEmoji">If applied to a forum, the default emoji to use for forum post reactions.</param>
            <param name="availableTags">The tags available for a post in this channel.</param>
            <param name="defaultSortOrder">The default sorting order.</param>
            <returns>The newly-created channel.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.DeleteAllChannelsAsync">
            <summary>
            <para>Deletes all channels in this guild.</para>
            <para>Note that this is irreversible. Use carefully!</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetPruneCountAsync(System.Int32,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordRole})">
            <summary>
            Estimates the number of users to be pruned.
            </summary>
            <param name="days">Minimum number of inactivity days required for users to be pruned. Defaults to 7.</param>
            <param name="includedRoles">The roles to be included in the prune.</param>
            <returns>Number of users that will be pruned.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.KickMembers"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.PruneAsync(System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordRole},System.String)">
            <summary>
            Prunes inactive users from this guild.
            </summary>
            <param name="days">Minimum number of inactivity days required for users to be pruned. Defaults to 7.</param>
            <param name="computePruneCount">Whether to return the prune count after this method completes. This is discouraged for larger guilds.</param>
            <param name="includedRoles">The roles to be included in the prune.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns>Number of users pruned.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetIntegrationsAsync">
            <summary>
            Gets integrations attached to this guild.
            </summary>
            <returns>Collection of integrations attached to this guild.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.AttachUserIntegrationAsync(DSharpPlus.Entities.DiscordIntegration)">
            <summary>
            Attaches an integration from current user to this guild.
            </summary>
            <param name="integration">Integration to attach.</param>
            <returns>The integration after being attached to the guild.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.ModifyIntegrationAsync(DSharpPlus.Entities.DiscordIntegration,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Modifies an integration in this guild.
            </summary>
            <param name="integration">Integration to modify.</param>
            <param name="expire_behaviour">Number of days after which the integration expires.</param>
            <param name="expire_grace_period">Length of grace period which allows for renewing the integration.</param>
            <param name="enable_emoticons">Whether emotes should be synced from this integration.</param>
            <returns>The modified integration.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.DeleteIntegrationAsync(DSharpPlus.Entities.DiscordIntegration,System.String)">
            <summary>
            Removes an integration from this guild.
            </summary>
            <param name="integration">Integration to remove.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.SyncIntegrationAsync(DSharpPlus.Entities.DiscordIntegration)">
            <summary>
            Forces re-synchronization of an integration for this guild.
            </summary>
            <param name="integration">Integration to synchronize.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.ListVoiceRegionsAsync">
            <summary>
            Gets the voice regions for this guild.
            </summary>
            <returns>Voice regions available for this guild.</returns>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.ListActiveThreadsAsync">
            <summary>
            Gets the active and private threads for this guild.
            </summary>
            <returns>A list of all the active and private threads the user can access in the server.</returns>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetInvite(System.String)">
            <summary>
            Gets an invite from this guild from an invite code.
            </summary>
            <param name="code">The invite code</param>
            <returns>An invite, or null if not in cache.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetInvitesAsync">
            <summary>
            Gets all the invites created for all the channels in this guild.
            </summary>
            <returns>A collection of invites.</returns>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetVanityInviteAsync">
            <summary>
            Gets the vanity invite for this guild.
            </summary>
            <returns>A partial vanity invite.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetWebhooksAsync">
            <summary>
            Gets all the webhooks created for all the channels in this guild.
            </summary>
            <returns>A collection of webhooks this guild has.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageWebhooks"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetWidgetImage(DSharpPlus.Entities.WidgetType)">
            <summary>
            Gets this guild's widget image.
            </summary>
            <param name="bannerType">The format of the widget.</param>
            <returns>The URL of the widget image.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetMemberAsync(System.UInt64,System.Boolean)">
            <summary>
            Gets a member of this guild by their user ID.
            </summary>
            <param name="userId">ID of the member to get.</param>
            <param name="updateCache">Whether to always make a REST request and update the member cache.</param>
            <returns>The requested member.</returns>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetAllMembersAsync">
            <summary>
            Retrieves a full list of members from Discord. This method will bypass cache.
            </summary>
            <returns>A collection of all members in this guild.</returns>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.RequestMembersAsync(System.String,System.Int32,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.UInt64},System.String)">
            <summary>
            Requests that Discord send a list of guild members based on the specified arguments. This method will fire the <see cref="E:DSharpPlus.DiscordClient.GuildMembersChunked"/> event.
            <para>If no arguments aside from <paramref name="presences"/> and <paramref name="nonce"/> are specified, this will request all guild members.</para>
            </summary>
            <param name="query">Filters the returned members based on what the username starts with. Either this or <paramref name="userIds"/> must not be null.
            The <paramref name="limit"/> must also be greater than 0 if this is specified.</param>
            <param name="limit">Total number of members to request. This must be greater than 0 if <paramref name="query"/> is specified.</param>
            <param name="presences">Whether to include the <see cref="P:DSharpPlus.EventArgs.GuildMembersChunkEventArgs.Presences"/> associated with the fetched members.</param>
            <param name="userIds">Whether to limit the request to the specified user ids. Either this or <paramref name="query"/> must not be null.</param>
            <param name="nonce">The unique string to identify the response.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetChannelsAsync">
            <summary>
            Gets all the channels this guild has.
            </summary>
            <returns>A collection of this guild's channels.</returns>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.CreateRoleAsync(System.String,System.Nullable{DSharpPlus.Permissions},System.Nullable{DSharpPlus.Entities.DiscordColor},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.IO.Stream,DSharpPlus.Entities.DiscordEmoji)">
            <summary>
            Creates a new role in this guild.
            </summary>
            <param name="name">Name of the role.</param>
            <param name="permissions">Permissions for the role.</param>
            <param name="color">Color for the role.</param>
            <param name="hoist">Whether the role is to be hoisted.</param>
            <param name="mentionable">Whether the role is to be mentionable.</param>
            <param name="reason">Reason for audit logs.</param>
            <param name="icon">The icon to add to this role</param>
            <param name="emoji">The emoji to add to this role. Must be unicode.</param>
            <returns>The newly-created role.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetRole(System.UInt64)">
            <summary>
            Gets a role from this guild by its ID.
            </summary>
            <param name="id">ID of the role to get.</param>
            <returns>Requested role.</returns>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetChannel(System.UInt64)">
            <summary>
            Gets a channel from this guild by its ID.
            </summary>
            <param name="id">ID of the channel to get.</param>
            <returns>Requested channel.</returns>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetAuditLogsAsync(System.Nullable{System.Int32},DSharpPlus.Entities.DiscordMember,System.Nullable{DSharpPlus.Entities.AuditLogActionType})">
            <summary>
            Gets audit log entries for this guild.
            </summary>
            <param name="limit">Maximum number of entries to fetch.</param>
            <param name="by_member">Filter by member responsible.</param>
            <param name="action_type">Filter by action type.</param>
            <returns>A collection of requested audit log entries.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ViewAuditLog"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetEmojisAsync">
            <summary>
            Gets all of this guild's custom emojis.
            </summary>
            <returns>All of this guild's custom emojis.</returns>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetEmojiAsync(System.UInt64)">
            <summary>
            Gets this guild's specified custom emoji.
            </summary>
            <param name="id">ID of the emoji to get.</param>
            <returns>The requested custom emoji.</returns>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.CreateEmojiAsync(System.String,System.IO.Stream,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordRole},System.String)">
            <summary>
            Creates a new custom emoji for this guild.
            </summary>
            <param name="name">Name of the new emoji.</param>
            <param name="image">Image to use as the emoji.</param>
            <param name="roles">Roles for which the emoji will be available. This works only if your application is whitelisted as integration.</param>
            <param name="reason">Reason for audit log.</param>
            <returns>The newly-created emoji.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageEmojis"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.ModifyEmojiAsync(DSharpPlus.Entities.DiscordGuildEmoji,System.String,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordRole},System.String)">
            <summary>
            Modifies a this guild's custom emoji.
            </summary>
            <param name="emoji">Emoji to modify.</param>
            <param name="name">New name for the emoji.</param>
            <param name="roles">Roles for which the emoji will be available. This works only if your application is whitelisted as integration.</param>
            <param name="reason">Reason for audit log.</param>
            <returns>The modified emoji.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageEmojis"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.DeleteEmojiAsync(DSharpPlus.Entities.DiscordGuildEmoji,System.String)">
            <summary>
            Deletes this guild's custom emoji.
            </summary>
            <param name="emoji">Emoji to delete.</param>
            <param name="reason">Reason for audit log.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageEmojis"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetDefaultChannel">
            <summary>
            <para>Gets the default channel for this guild.</para>
            <para>Default channel is the first channel current member can see.</para>
            </summary>
            <returns>This member's default guild.</returns>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetWidgetAsync">
            <summary>
            Gets the guild's widget
            </summary>
            <returns>The guild's widget</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetWidgetSettingsAsync">
            <summary>
            Gets the guild's widget settings
            </summary>
            <returns>The guild's widget settings</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.ModifyWidgetSettingsAsync(System.Nullable{System.Boolean},DSharpPlus.Entities.DiscordChannel,System.String)">
            <summary>
            Modifies the guild's widget settings
            </summary>
            <param name="isEnabled">If the widget is enabled or not</param>
            <param name="channel">Widget channel</param>
            <param name="reason">Reason the widget settings were modified</param>
            <returns>The newly modified widget settings</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetTemplatesAsync">
            <summary>
            Gets all of this guild's templates.
            </summary>
            <returns>All of the guild's templates.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Throws when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.CreateTemplateAsync(System.String,System.String)">
            <summary>
            Creates a guild template.
            </summary>
            <param name="name">Name of the template.</param>
            <param name="description">Description of the template.</param>
            <returns>The template created.</returns>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Throws when a template already exists for the guild or a null parameter is provided for the name.</exception>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Throws when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.SyncTemplateAsync(System.String)">
            <summary>
            Syncs the template to the current guild's state.
            </summary>
            <param name="code">The code of the template to sync.</param>
            <returns>The template synced.</returns>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Throws when the template for the code cannot be found</exception>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Throws when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.ModifyTemplateAsync(System.String,System.String,System.String)">
            <summary>
            Modifies the template's metadata.
            </summary>
            <param name="code">The template's code.</param>
            <param name="name">Name of the template.</param>
            <param name="description">Description of the template.</param>
            <returns>The template modified.</returns>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Throws when the template for the code cannot be found</exception>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Throws when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.DeleteTemplateAsync(System.String)">
            <summary>
            Deletes the template.
            </summary>
            <param name="code">The code of the template to delete.</param>
            <returns>The deleted template.</returns>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Throws when the template for the code cannot be found</exception>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Throws when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetMembershipScreeningFormAsync">
            <summary>
            Gets this guild's membership screening form.
            </summary>
            <returns>This guild's membership screening form.</returns>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.ModifyMembershipScreeningFormAsync(System.Action{DSharpPlus.Net.Models.MembershipScreeningEditModel})">
            <summary>
            Modifies this guild's membership screening form.
            </summary>
            <param name="action">Action to perform</param>
            <returns>The modified screening form.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client doesn't have the <see cref="F:DSharpPlus.Permissions.ManageGuild"/> permission, or community is not enabled on this guild.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetStickersAsync">
            <summary>
            Gets a list of stickers from this guild.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetStickerAsync(System.UInt64)">
            <summary>
            Gets a sticker from this guild.
            </summary>
            <param name="stickerId">The id of the sticker.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.CreateStickerAsync(System.String,System.String,System.String,System.IO.Stream,DSharpPlus.Entities.StickerFormat,System.String)">
            <summary>
            Creates a sticker in this guild. Lottie stickers can only be created on verified and/or partnered servers.
            </summary>
            <param name="name">The name of the sticker.</param>
            <param name="description">The description of the sticker.</param>
            <param name="tags">The tags of the sticker. This must be a unicode emoji.</param>
            <param name="imageContents">The image content of the sticker.</param>
            <param name="format">The image format of the sticker.</param>
            <param name="reason">The reason this sticker is being created.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.ModifyStickerAsync(System.UInt64,System.Action{DSharpPlus.Net.Models.StickerEditModel},System.String)">
            <summary>
            Modifies a sticker in this guild.
            </summary>
            <param name="stickerId">The id of the sticker.</param>
            <param name="action">Action to perform.</param>
            <param name="reason">Reason for audit log.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.ModifyStickerAsync(DSharpPlus.Entities.DiscordMessageSticker,System.Action{DSharpPlus.Net.Models.StickerEditModel},System.String)">
            <summary>
            Modifies a sticker in this guild.
            </summary>
            <param name="sticker">Sticker to modify.</param>
            <param name="action">Action to perform.</param>
            <param name="reason">Reason for audit log.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.DeleteStickerAsync(System.UInt64,System.String)">
            <summary>
            Deletes a sticker in this guild.
            </summary>
            <param name="stickerId">The id of the sticker.</param>
            <param name="reason">Reason for audit log.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.DeleteStickerAsync(DSharpPlus.Entities.DiscordMessageSticker,System.String)">
            <summary>
            Deletes a sticker in this guild.
            </summary>
            <param name="sticker">Sticker to delete.</param>
            <param name="reason">Reason for audit log.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetApplicationCommandsAsync">
            <summary>
            Gets all the application commands in this guild.
            </summary>
            <returns>A list of application commands in this guild.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.BulkOverwriteApplicationCommandsAsync(System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordApplicationCommand})">
            <summary>
            Overwrites the existing application commands in this guild. New commands are automatically created and missing commands are automatically delete
            </summary>
            <param name="commands">The list of commands to overwrite with.</param>
            <returns>The list of guild commands</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.CreateApplicationCommandAsync(DSharpPlus.Entities.DiscordApplicationCommand)">
            <summary>
            Creates or overwrites a application command in this guild.
            </summary>
            <param name="command">The command to create.</param>
            <returns>The created command.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.EditApplicationCommandAsync(System.UInt64,System.Action{DSharpPlus.Net.Models.ApplicationCommandEditModel})">
            <summary>
            Edits a application command in this guild.
            </summary>
            <param name="commandId">The id of the command to edit.</param>
            <param name="action">Action to perform.</param>
            <returns>The edit command.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetApplicationCommandAsync(System.UInt64)">
            <summary>
            Gets a application command in this guild by its id.
            </summary>
            <param name="commandId">The ID of the command to get.</param>
            <returns>The command with the ID.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetApplicationCommandAsync(System.String)">
            <summary>
            Gets a application command in this guild by its name.
            </summary>
            <param name="commandName">The name of the command to get.</param>
            <returns>The command with the name.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetWelcomeScreenAsync">
            <summary>
            Gets this guild's welcome screen.
            </summary>
            <returns>This guild's welcome screen object.</returns>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.ModifyWelcomeScreenAsync(System.Action{DSharpPlus.Net.Models.WelcomeScreenEditModel},System.String)">
            <summary>
            Modifies this guild's welcome screen.
            </summary>
            <param name="action">Action to perform.</param>
            <param name="reason">Reason for audit log.</param>
            <returns>The modified welcome screen.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client doesn't have the <see cref="F:DSharpPlus.Permissions.ManageGuild"/> permission, or community is not enabled on this guild.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetApplicationCommandsPermissionsAsync">
            <summary>
            Gets all application command permissions in this guild.
            </summary>
            <returns>A list of permissions.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetApplicationCommandPermissionsAsync(DSharpPlus.Entities.DiscordApplicationCommand)">
            <summary>
            Gets permissions for a application command in this guild.
            </summary>
            <param name="command">The command to get them for.</param>
            <returns>The permissions.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.EditApplicationCommandPermissionsAsync(DSharpPlus.Entities.DiscordApplicationCommand,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordApplicationCommandPermission})">
            <summary>
            Edits permissions for a application command in this guild.
            </summary>
            <param name="command">The command to edit permissions for.</param>
            <param name="permissions">The list of permissions to use.</param>
            <returns>The edited permissions.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.BatchEditApplicationCommandPermissionsAsync(System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordGuildApplicationCommandPermissions})">
            <summary>
            Batch edits permissions for a application command in this guild.
            </summary>
            <param name="permissions">The list of permissions to use.</param>
            <returns>A list of edited permissions.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.ToString">
            <summary>
            Returns a string representation of this guild.
            </summary>
            <returns>String representation of this guild.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordGuild"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Entities.DiscordGuild"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.Equals(DSharpPlus.Entities.DiscordGuild)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordGuild"/> is equal to another <see cref="T:DSharpPlus.Entities.DiscordGuild"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Entities.DiscordGuild"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Entities.DiscordGuild"/> is equal to this <see cref="T:DSharpPlus.Entities.DiscordGuild"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.DiscordGuild"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.DiscordGuild"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.op_Equality(DSharpPlus.Entities.DiscordGuild,DSharpPlus.Entities.DiscordGuild)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordGuild"/> objects are equal.
            </summary>
            <param name="e1">First member to compare.</param>
            <param name="e2">Second member to compare.</param>
            <returns>Whether the two members are equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuild.op_Inequality(DSharpPlus.Entities.DiscordGuild,DSharpPlus.Entities.DiscordGuild)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordGuild"/> objects are not equal.
            </summary>
            <param name="e1">First member to compare.</param>
            <param name="e2">Second member to compare.</param>
            <returns>Whether the two members are not equal.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.VerificationLevel">
            <summary>
            Represents guild verification level.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.VerificationLevel.None">
            <summary>
            No verification. Anyone can join and chat right away.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.VerificationLevel.Low">
            <summary>
            Low verification level. Users are required to have a verified email attached to their account in order to be able to chat.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.VerificationLevel.Medium">
            <summary>
            Medium verification level. Users are required to have a verified email attached to their account, and account age need to be at least 5 minutes in order to be able to chat.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.VerificationLevel.High">
            <summary>
            (╯°□°）╯︵ ┻━┻ verification level. Users are required to have a verified email attached to their account, account age need to be at least 5 minutes, and they need to be in the server for at least 10 minutes in order to be able to chat.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.VerificationLevel.Highest">
            <summary>
            ┻━┻ ﾐヽ(ಠ益ಠ)ノ彡┻━┻ verification level. Users are required to have a verified phone number attached to their account.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DefaultMessageNotifications">
            <summary>
            Represents default notification level for a guild.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.DefaultMessageNotifications.AllMessages">
            <summary>
            All messages will trigger push notifications.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.DefaultMessageNotifications.MentionsOnly">
            <summary>
            Only messages that mention the user (or a role he's in) will trigger push notifications.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.MfaLevel">
            <summary>
            Represents multi-factor authentication level required by a guild to use administrator functionality.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.MfaLevel.Disabled">
            <summary>
            Multi-factor authentication is not required to use administrator functionality.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.MfaLevel.Enabled">
            <summary>
            Multi-factor authentication is required to use administrator functionality.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.ExplicitContentFilter">
            <summary>
            Represents the value of explicit content filter in a guild.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ExplicitContentFilter.Disabled">
            <summary>
            Explicit content filter is disabled.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ExplicitContentFilter.MembersWithoutRoles">
            <summary>
            Only messages from members without any roles are scanned.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ExplicitContentFilter.AllMembers">
            <summary>
            Messages from all members are scanned.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.WidgetType">
            <summary>
            Represents the formats for a guild widget.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.WidgetType.Shield">
            <summary>
            The widget is represented in shield format.
            <para>This is the default widget type.</para>
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.WidgetType.Banner1">
            <summary>
            The widget is represented as the first banner type.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.WidgetType.Banner2">
            <summary>
            The widget is represented as the second banner type.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.WidgetType.Banner3">
            <summary>
            The widget is represented as the third banner type.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.WidgetType.Banner4">
            <summary>
            The widget is represented in the fourth banner type.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordGuildEmbed">
            <summary>
            Represents a Discord guild widget.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildEmbed.IsEnabled">
            <summary>
            Gets whether the embed is enabled.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildEmbed.ChannelId">
            <summary>
            Gets the ID of the widget channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildEmoji.User">
            <summary>
            Gets the user that created this emoji.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildEmoji.Guild">
            <summary>
            Gets the guild to which this emoji belongs.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuildEmoji.ModifyAsync(System.String,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordRole},System.String)">
            <summary>
            Modifies this emoji.
            </summary>
            <param name="name">New name for this emoji.</param>
            <param name="roles">Roles for which this emoji will be available. This works only if your application is whitelisted as integration.</param>
            <param name="reason">Reason for audit log.</param>
            <returns>The modified emoji.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageEmojis"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the emoji does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuildEmoji.DeleteAsync(System.String)">
            <summary>
            Deletes this emoji.
            </summary>
            <param name="reason">Reason for audit log.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageEmojis"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the emoji does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordGuildMembershipScreening">
            <summary>
            Represents a guild's membership screening form.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildMembershipScreening.Version">
            <summary>
            Gets when the fields were last updated.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildMembershipScreening.Fields">
            <summary>
            Gets the steps in the screening form.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildMembershipScreening.Description">
            <summary>
            Gets the server description shown in the screening form.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordGuildMembershipScreeningField">
            <summary>
            Represents a field in a guild's membership screening form
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildMembershipScreeningField.Type">
            <summary>
            Gets the type of the field.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildMembershipScreeningField.Label">
            <summary>
            Gets the title of the field.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildMembershipScreeningField.Values">
            <summary>
            Gets the list of rules
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildMembershipScreeningField.IsRequired">
            <summary>
            Gets whether the user has to fill out this field
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordGuildPreview">
            <summary>
            Represents a guild preview.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildPreview.Name">
            <summary>
            Gets the guild's name.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildPreview.Icon">
            <summary>
            Gets the guild's icon.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildPreview.Splash">
            <summary>
            Gets the guild's splash.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildPreview.DiscoverySplash">
            <summary>
            Gets the guild's discovery splash.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildPreview.Emojis">
            <summary>
            Gets a collection of this guild's emojis.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildPreview.Features">
            <summary>
            Gets a collection of this guild's features.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildPreview.ApproximateMemberCount">
            <summary>
            Gets the approximate member count.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildPreview.ApproximatePresenceCount">
            <summary>
            Gets the approximate presence count.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildPreview.Description">
            <summary>
            Gets the description for the guild, if the guild is discoverable.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildTemplate.Code">
            <summary>
            Gets the template code.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildTemplate.Name">
            <summary>
            Gets the name of the template.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildTemplate.Description">
            <summary>
            Gets the description of the template.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildTemplate.UsageCount">
            <summary>
            Gets the number of times the template has been used.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildTemplate.CreatorId">
            <summary>
            Gets the ID of the creator of the template.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildTemplate.Creator">
            <summary>
            Gets the creator of the template.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildTemplate.CreatedAt">
            <summary>
            Date the template was created.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildTemplate.UpdatedAt">
            <summary>
            Date the template was updated.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildTemplate.SourceGuildId">
            <summary>
            Gets the ID of the source guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildTemplate.SourceGuild">
            <summary>
            Gets the source guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildTemplate.IsDirty">
            <summary>
            Gets whether the template has not synced changes.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordGuildWelcomeScreen">
            <summary>
            Represents a discord welcome screen object.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildWelcomeScreen.Description">
            <summary>
            Gets the server description shown in the welcome screen.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildWelcomeScreen.WelcomeChannels">
            <summary>
            Gets the channels shown in the welcome screen.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordGuildWelcomeScreenChannel">
            <summary>
            Represents a channel in a welcome screen
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildWelcomeScreenChannel.ChannelId">
            <summary>
            Gets the id of the channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildWelcomeScreenChannel.Description">
            <summary>
            Gets the description shown for the channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildWelcomeScreenChannel.EmojiId">
            <summary>
            Gets the emoji id if the emoji is custom, when applicable.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildWelcomeScreenChannel.EmojiName">
            <summary>
            Gets the name of the emoji if custom or the unicode character if standard, when applicable.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordMember">
            <summary>
            Represents a Discord guild member.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.GuildAvatarHash">
            <summary>
            Gets the member's avatar for the current guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.GuildAvatarUrl">
            <summary>
            Gets the members avatar url for the current guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.Nickname">
            <summary>
            Gets this member's nickname.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.DisplayName">
            <summary>
            Gets this member's display name.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.CommunicationDisabledUntil">
            <summary>
            How long this member's communication will be suppressed for.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.RoleIds">
            <summary>
            List of role IDs
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.Roles">
            <summary>
            Gets the list of roles associated with this member.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.Color">
            <summary>
            Gets the color associated with this user's top color-giving role, otherwise 0 (no color).
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.JoinedAt">
            <summary>
            Date the user joined the guild
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.PremiumSince">
            <summary>
            Date the user started boosting this server
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.IsDeafened">
            <summary>
            If the user is deafened
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.IsMuted">
            <summary>
            If the user is muted
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.IsPending">
            <summary>
            If the user has passed the guild's Membership Screening requirements
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.VoiceState">
            <summary>
            Gets this member's voice state.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.Guild">
            <summary>
            Gets the guild of which this member is a part of.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.IsOwner">
            <summary>
            Gets whether this member is the Guild owner.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.Hierarchy">
            <summary>
            Gets the member's position in the role hierarchy, which is the member's highest role's position. Returns <see cref="F:System.Int32.MaxValue"/> for the guild's owner.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.Permissions">
            <summary>
            Gets the permissions for the current member.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.Username">
            <summary>
            Gets this member's username.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.Discriminator">
            <summary>
            Gets the member's 4-digit discriminator.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.BannerHash">
            <summary>
            Gets the member's banner hash.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.BannerColor">
            <summary>
            The color of this member's banner. Mutually exclusive with <see cref="P:DSharpPlus.Entities.DiscordMember.BannerHash"/>.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.AvatarHash">
            <summary>
            Gets the member's avatar hash.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.IsBot">
            <summary>
            Gets whether the member is a bot.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.Email">
            <summary>
            Gets the member's email address.
            <para>This is only present in OAuth.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.MfaEnabled">
            <summary>
            Gets whether the member has multi-factor authentication enabled.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.Verified">
            <summary>
            Gets whether the member is verified.
            <para>This is only present in OAuth.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.Locale">
            <summary>
            Gets the member's chosen language
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.OAuthFlags">
            <summary>
            Gets the user's flags.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordMember.Flags">
            <summary>
            Gets the member's flags for OAuth.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.CreateDmChannelAsync">
            <summary>
            Creates a direct message channel to this member.
            </summary>
            <returns>Direct message channel to this member.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the member has the bot blocked, the member is no longer in the guild, or if the member has Allow DM from server members off.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.SendMessageAsync(System.String)">
            <summary>
            Sends a direct message to this member. Creates a direct message channel if one does not exist already.
            </summary>
            <param name="content">Content of the message to send.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the member has the bot blocked, the member is no longer in the guild, or if the member has Allow DM from server members off.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.SendMessageAsync(DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Sends a direct message to this member. Creates a direct message channel if one does not exist already.
            </summary>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the member has the bot blocked, the member is no longer in the guild, or if the member has Allow DM from server members off.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.SendMessageAsync(System.String,DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Sends a direct message to this member. Creates a direct message channel if one does not exist already.
            </summary>
            <param name="content">Content of the message to send.</param>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the member has the bot blocked, the member is no longer in the guild, or if the member has Allow DM from server members off.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.SendMessageAsync(DSharpPlus.Entities.DiscordMessageBuilder)">
            <summary>
            Sends a direct message to this member. Creates a direct message channel if one does not exist already.
            </summary>
            <param name="message">Builder to with the message.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the member has the bot blocked, the member is no longer in the guild, or if the member has Allow DM from server members off.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.TimeoutAsync(System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Times-out a member and restricts their ability to send messages, add reactions, speak in threads, and join voice channels.
            </summary>
            <param name="until">How long the timeout should last. Set to <see langword="null"/> or a time in the past to remove the timeout.</param>
            <param name="reason">Why this member is being restricted.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.SetMuteAsync(System.Boolean,System.String)">
            <summary>
            Sets this member's voice mute status.
            </summary>
            <param name="mute">Whether the member is to be muted.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.MuteMembers"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.SetDeafAsync(System.Boolean,System.String)">
            <summary>
            Sets this member's voice deaf status.
            </summary>
            <param name="deaf">Whether the member is to be deafened.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.DeafenMembers"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.ModifyAsync(System.Action{DSharpPlus.Net.Models.MemberEditModel})">
            <summary>
            Modifies this member.
            </summary>
            <param name="action">Action to perform on this member.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageNicknames"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.GrantRoleAsync(DSharpPlus.Entities.DiscordRole,System.String)">
            <summary>
            Grants a role to the member.
            </summary>
            <param name="role">Role to grant.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.RevokeRoleAsync(DSharpPlus.Entities.DiscordRole,System.String)">
            <summary>
            Revokes a role from a member.
            </summary>
            <param name="role">Role to revoke.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.ReplaceRolesAsync(System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordRole},System.String)">
            <summary>
            Sets the member's roles to ones specified.
            </summary>
            <param name="roles">Roles to set.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.BanAsync(System.Int32,System.String)">
            <summary>
            Bans a this member from their guild.
            </summary>
            <param name="delete_message_days">How many days to remove messages from.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.BanMembers"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.UnbanAsync(System.String)">
            <exception cref = "T:DSharpPlus.Exceptions.UnauthorizedException" > Thrown when the client does not have the<see cref="F:DSharpPlus.Permissions.BanMembers"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.RemoveAsync(System.String)">
            <summary>
            Kicks this member from their guild.
            </summary>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <remarks>[alias="KickAsync"]</remarks>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.KickMembers"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.PlaceInAsync(DSharpPlus.Entities.DiscordChannel)">
            <summary>
            Moves this member to the specified voice channel
            </summary>
            <param name="channel"></param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.MoveMembers"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.UpdateVoiceStateAsync(DSharpPlus.Entities.DiscordChannel,System.Nullable{System.Boolean})">
            <summary>
            Updates the member's suppress state in a stage channel.
            </summary>
            <param name="channel">The channel the member is currently in.</param>
            <param name="suppress">Toggles the member's suppress state.</param>
            <exception cref="T:System.ArgumentException">Thrown when the channel in not a voice channel.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.PermissionsIn(DSharpPlus.Entities.DiscordChannel)">
            <summary>
            Calculates permissions in a given channel for this member.
            </summary>
            <param name="channel">Channel to calculate permissions for.</param>
            <returns>Calculated permissions for this member in the channel.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.GetGuildAvatarUrl(DSharpPlus.ImageFormat,System.UInt16)">
            <summary>
            Constructs the url for a guild member's avatar, defaulting to the user's avatar if none is set.
            </summary>
            <param name="imageFormat">The image format of the avatar to get.</param>
            <param name="imageSize">The maximum size of the avatar. Must be a power of two, minimum 16, maximum 4096.</param>
            <returns>The URL of the user's avatar.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.ToString">
            <summary>
            Returns a string representation of this member.
            </summary>
            <returns>String representation of this member.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordMember"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Entities.DiscordMember"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.Equals(DSharpPlus.Entities.DiscordMember)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordMember"/> is equal to another <see cref="T:DSharpPlus.Entities.DiscordMember"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Entities.DiscordMember"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Entities.DiscordMember"/> is equal to this <see cref="T:DSharpPlus.Entities.DiscordMember"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.DiscordMember"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.DiscordMember"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.op_Equality(DSharpPlus.Entities.DiscordMember,DSharpPlus.Entities.DiscordMember)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordMember"/> objects are equal.
            </summary>
            <param name="e1">First member to compare.</param>
            <param name="e2">Second member to compare.</param>
            <returns>Whether the two members are equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.op_Inequality(DSharpPlus.Entities.DiscordMember,DSharpPlus.Entities.DiscordMember)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordMember"/> objects are not equal.
            </summary>
            <param name="e1">First member to compare.</param>
            <param name="e2">Second member to compare.</param>
            <returns>Whether the two members are not equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMember.GetPermissions">
            <summary>
            Get's the current member's roles based on the sum of the permissions of their given roles.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordRole">
            <summary>
            Represents a discord role, to which users can be assigned.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRole.Name">
            <summary>
            Gets the name of this role.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRole.Color">
            <summary>
            Gets the color of this role.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRole.IsHoisted">
            <summary>
            Gets whether this role is hoisted.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRole.IconUrl">
            <summary>
            The url for this role's icon, if set.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRole.IconHash">
            <summary>
            The hash of this role's icon, if any.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRole.Emoji">
            <summary>
            The emoji associated with this role's icon, if set.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRole.Position">
            <summary>
            Gets the position of this role in the role hierarchy.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRole.Permissions">
            <summary>
            Gets the permissions set for this role.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRole.IsManaged">
            <summary>
            Gets whether this role is managed by an integration.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRole.IsMentionable">
            <summary>
            Gets whether this role is mentionable.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRole.Tags">
            <summary>
            Gets the tags this role has.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRole.Mention">
            <summary>
            Gets a mention string for this role. If the role is mentionable, this string will mention all the users that belong to this role.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordRole.ModifyPositionAsync(System.Int32,System.String)">
            <summary>
            Modifies this role's position.
            </summary>
            <param name="position">New position</param>
            <param name="reason">Reason why we moved it</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the role does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordRole.ModifyAsync(System.String,System.Nullable{DSharpPlus.Permissions},System.Nullable{DSharpPlus.Entities.DiscordColor},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.IO.Stream,DSharpPlus.Entities.DiscordEmoji)">
            <summary>
            Updates this role.
            </summary>
            <param name="name">New role name</param>
            <param name="permissions">New role permissions</param>
            <param name="color">New role color</param>
            <param name="hoist">New role hoist</param>
            <param name="mentionable">Whether this role is mentionable</param>
            <param name="reason">Reason why we made this change</param>
            <param name="icon">The icon to add to this role</param>
            <param name="emoji">The emoji to add to this role. Must be unicode.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the role does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordRole.ModifyAsync(System.Action{DSharpPlus.Net.Models.RoleEditModel})">
            <exception cref = "T:DSharpPlus.Exceptions.UnauthorizedException" > Thrown when the client does not have the<see cref="F:DSharpPlus.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the role does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordRole.DeleteAsync(System.String)">
            <summary>
            Deletes this role.
            </summary>
            <param name="reason">Reason as to why this role has been deleted.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the role does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordRole.CheckPermission(DSharpPlus.Permissions)">
            <summary>
            Checks whether this role has specific permissions.
            </summary>
            <param name="permission">Permissions to check for.</param>
            <returns>Whether the permissions are allowed or not.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordRole.ToString">
            <summary>
            Returns a string representation of this role.
            </summary>
            <returns>String representation of this role.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordRole.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordRole"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Entities.DiscordRole"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordRole.Equals(DSharpPlus.Entities.DiscordRole)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordRole"/> is equal to another <see cref="T:DSharpPlus.Entities.DiscordRole"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Entities.DiscordRole"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Entities.DiscordRole"/> is equal to this <see cref="T:DSharpPlus.Entities.DiscordRole"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordRole.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.DiscordRole"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.DiscordRole"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordRole.op_Equality(DSharpPlus.Entities.DiscordRole,DSharpPlus.Entities.DiscordRole)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordRole"/> objects are equal.
            </summary>
            <param name="e1">First role to compare.</param>
            <param name="e2">Second role to compare.</param>
            <returns>Whether the two roles are equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordRole.op_Inequality(DSharpPlus.Entities.DiscordRole,DSharpPlus.Entities.DiscordRole)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordRole"/> objects are not equal.
            </summary>
            <param name="e1">First role to compare.</param>
            <param name="e2">Second role to compare.</param>
            <returns>Whether the two roles are not equal.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordRoleTags">
            <summary>
            Represents a discord role tags.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRoleTags.BotId">
            <summary>
            Gets the id of the bot this role belongs to.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRoleTags.IntegrationId">
            <summary>
            Gets the id of the integration this role belongs to.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRoleTags.IsPremiumSubscriber">
            <summary>
            Gets whether this is the guild's premium subscriber role.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordScheduledGuildEvent">
            <summary>
            A scheduled event on a guild, which notifies all people that are interested in it.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordScheduledGuildEvent.Name">
            <summary>
            The name of the event.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordScheduledGuildEvent.Description">
            <summary>
            The description
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordScheduledGuildEvent.StartTime">
            <summary>
            The time at which this event will begin.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordScheduledGuildEvent.EndTime">
            <summary>
            The time at which the event will end, or null if it doesn't have an end time.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordScheduledGuildEvent.Guild">
            <summary>
            The guild this event is scheduled for.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordScheduledGuildEvent.Channel">
            <summary>
            The channel this event is scheduled for, if applicable.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordScheduledGuildEvent.ChannelId">
            <summary>
            The id of the channel this event is scheduled in, if any.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordScheduledGuildEvent.GuildId">
            <summary>
            The id of the guild this event is scheduled for.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordScheduledGuildEvent.Creator">
            <summary>
            The user that created this event.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordScheduledGuildEvent.PrivacyLevel">
            <summary>
            The privacy of this event.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordScheduledGuildEvent.Status">
            <summary>
            The current status of this event.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordScheduledGuildEvent.Metadata">
            <summary>
            Metadata associated with this event.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordScheduledGuildEvent.Type">
            <summary>
            What type of event this is.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordScheduledGuildEvent.UserCount">
            <summary>
            How many users are interested in this event.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordScheduledGuildEventMetadata">
            <summary>
            Metadata for a <see cref="T:DSharpPlus.Entities.DiscordScheduledGuildEvent"/>.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordScheduledGuildEventMetadata.Location">
            <summary>
            If this is an external event, where this event is hosted.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.ScheduledGuildEventPrivacyLevel">
            <summary>
            Privacy level for a <see cref="T:DSharpPlus.Entities.DiscordScheduledGuildEvent"/>.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ScheduledGuildEventPrivacyLevel.Public">
            <summary>
            This event is public.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ScheduledGuildEventPrivacyLevel.GuildOnly">
            <summary>
            This event is only available to the members of the guild.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.ScheduledGuildEventStatus">
            <summary>
            Represents the status of a <see cref="T:DSharpPlus.Entities.DiscordScheduledGuildEvent"/>.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ScheduledGuildEventStatus.Scheduled">
            <summary>
            This event is scheduled.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ScheduledGuildEventStatus.Active">
            <summary>
            This event is currently running.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ScheduledGuildEventStatus.Completed">
            <summary>
            This event has finished running.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ScheduledGuildEventStatus.Cancelled">
            <summary>
            This event has been cancelled.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.ScheduledGuildEventType">
            <summary>
            Declares the type of a <see cref="T:DSharpPlus.Entities.DiscordScheduledGuildEvent"/>.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ScheduledGuildEventType.StageInstance">
            <summary>
            The event will be hosted in a stage channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ScheduledGuildEventType.VoiceChannel">
            <summary>
            The event will be hosted in a voice channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ScheduledGuildEventType.External">
            <summary>
            The event will be hosted in a custom location.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordWidget">
            <summary>
            Represents a Discord guild's widget.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWidget.Name">
            <summary>
            Gets the guild's name.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWidget.InstantInviteUrl">
            <summary>
            Gets the guild's invite URL.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWidget.PresenceCount">
            <summary>
            Gets the number of online members.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWidget.Members">
            <summary>
            Gets a list of online members.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWidget.Channels">
            <summary>
            Gets a list of widget channels.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordWidgetMember">
            <summary>
            Represents a member within a Discord guild's widget.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWidgetMember.Id">
            <summary>
            Gets the member's identifier within the widget.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWidgetMember.Username">
            <summary>
            Gets the member's username.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWidgetMember.Discriminator">
            <summary>
            Gets the member's discriminator.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWidgetMember.Avatar">
            <summary>
            Gets the member's avatar.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWidgetMember.Status">
            <summary>
            Gets the member's online status.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWidgetMember.AvatarUrl">
            <summary>
            Gets the member's avatar url.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordWidgetSettings">
            <summary>
            Represents a Discord guild's widget settings.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWidgetSettings.ChannelId">
            <summary>
            Gets the guild's widget channel id.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWidgetSettings.Channel">
            <summary>
            Gets the guild's widget channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWidgetSettings.IsEnabled">
            <summary>
            Gets if the guild's widget is enabled.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordIntegration">
            <summary>
            Represents a Discord integration. These appear on the profile as linked 3rd party accounts.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordIntegration.Name">
            <summary>
            Gets the integration name.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordIntegration.Type">
            <summary>
            Gets the integration type.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordIntegration.IsEnabled">
            <summary>
            Gets whether this integration is enabled.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordIntegration.IsSyncing">
            <summary>
            Gets whether this integration is syncing.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordIntegration.RoleId">
            <summary>
            Gets ID of the role this integration uses for subscribers.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordIntegration.ExpireBehavior">
            <summary>
            Gets the expiration behaviour.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordIntegration.ExpireGracePeriod">
            <summary>
            Gets the grace period before expiring subscribers.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordIntegration.User">
            <summary>
            Gets the user that owns this integration.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordIntegration.Account">
            <summary>
            Gets the 3rd party service account for this integration.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordIntegration.SyncedAt">
            <summary>
            Gets the date and time this integration was last synced.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordIntegrationAccount">
            <summary>
            Represents a Discord integration account.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordIntegrationAccount.Id">
            <summary>
            Gets the ID of the account.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordIntegrationAccount.Name">
            <summary>
            Gets the name of the account.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordApplicationCommand">
            <summary>
            Represents a command that is registered to an application.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommand.ApplicationId">
            <summary>
            Gets the unique ID of this command's application.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommand.Type">
            <summary>
            Gets the type of this application command.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommand.Name">
            <summary>
            Gets the name of this command.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommand.Description">
            <summary>
            Gets the description of this command.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommand.Options">
            <summary>
            Gets the potential parameters for this command.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommand.DefaultPermission">
            <summary>
            Gets whether the command is enabled by default when the application is added to a guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommand.AllowDMUsage">
            <summary>
            Whether this command can be invoked in DMs.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommand.DefaultMemberPermissions">
            <summary>
            What permissions this command requires to be invoked.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommand.Version">
            <summary>
            Gets the auto-incrementing version number for this command.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommand.Mention">
            <summary>
            Gets the command's mention string.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplicationCommand.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordApplicationCommandOption},System.Nullable{System.Boolean},DSharpPlus.ApplicationCommandType,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Nullable{System.Boolean},System.Nullable{DSharpPlus.Permissions})">
            <summary>
            Creates a new instance of a <see cref="T:DSharpPlus.Entities.DiscordApplicationCommand"/>.
            </summary>
            <param name="name">The name of the command.</param>
            <param name="description">The description of the command.</param>
            <param name="options">Optional parameters for this command.</param>
            <param name="defaultPermission">Whether the command is enabled by default when the application is added to a guild.</param>
            <param name="type">The type of the application command</param>
            <param name="name_localizations">Localization dictionary for <paramref name="name"/> field. Values follow the same restrictions as <paramref name="name"/>.</param>
            <param name="description_localizations">Localization dictionary for <paramref name="description"/> field. Values follow the same restrictions as <paramref name="description"/>.</param>
            <param name="allowDMUsage">Whether this command can be invoked in DMs.</param>
            <param name="defaultMemberPermissions">What permissions this command requires to be invoked.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplicationCommand.GetSubcommandMention(System.String[])">
            <summary>
            Creates a mention for a subcommand.
            </summary>
            <param name="name">The name of the subgroup and/or subcommand.</param>
            <returns>Formatted mention.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplicationCommand.Equals(DSharpPlus.Entities.DiscordApplicationCommand)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordApplicationCommand"/> object is equal to another object.
            </summary>
            <param name="other">The command to compare to.</param>
            <returns>Whether the command is equal to this <see cref="T:DSharpPlus.Entities.DiscordApplicationCommand"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplicationCommand.op_Equality(DSharpPlus.Entities.DiscordApplicationCommand,DSharpPlus.Entities.DiscordApplicationCommand)">
            <summary>
            Determines if two <see cref="T:DSharpPlus.Entities.DiscordApplicationCommand"/> objects are equal.
            </summary>
            <param name="e1">The first command object.</param>
            <param name="e2">The second command object.</param>
            <returns>Whether the two <see cref="T:DSharpPlus.Entities.DiscordApplicationCommand"/> objects are equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplicationCommand.op_Inequality(DSharpPlus.Entities.DiscordApplicationCommand,DSharpPlus.Entities.DiscordApplicationCommand)">
            <summary>
            Determines if two <see cref="T:DSharpPlus.Entities.DiscordApplicationCommand"/> objects are not equal.
            </summary>
            <param name="e1">The first command object.</param>
            <param name="e2">The second command object.</param>
            <returns>Whether the two <see cref="T:DSharpPlus.Entities.DiscordApplicationCommand"/> objects are not equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplicationCommand.Equals(System.Object)">
            <summary>
            Determines if a <see cref="T:System.Object"/> is equal to the current <see cref="T:DSharpPlus.Entities.DiscordApplicationCommand"/>.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>Whether the two <see cref="T:DSharpPlus.Entities.DiscordApplicationCommand"/> objects are not equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplicationCommand.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.DiscordApplicationCommand"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.DiscordApplicationCommand"/>.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordApplicationCommandOption">
            <summary>
            Represents a parameter for a <see cref="T:DSharpPlus.Entities.DiscordApplicationCommand"/>.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommandOption.Type">
            <summary>
            Gets the type of this command parameter.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommandOption.Name">
            <summary>
            Gets the name of this command parameter.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommandOption.Description">
            <summary>
            Gets the description of this command parameter.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommandOption.AutoComplete">
            <summary>
            Gets whether this option will auto-complete.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommandOption.Required">
            <summary>
            Gets whether this command parameter is required.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommandOption.Choices">
            <summary>
            Gets the optional choices for this command parameter. Not applicable for auto-complete options.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommandOption.Options">
            <summary>
            Gets the optional subcommand parameters for this parameter.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommandOption.ChannelTypes">
            <summary>
            Gets the channel types this command parameter is restricted to, if of type <see cref="F:DSharpPlus.ApplicationCommandOptionType.Channel"/>..
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommandOption.MinValue">
            <summary>
            Gets the minimum value for this slash command parameter.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommandOption.MaxValue">
            <summary>
            Gets the maximum value for this slash command parameter.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommandOption.MinLength">
            <summary>
            Gets the minimum allowed length for this slash command parameter.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommandOption.MaxLength">
            <summary>
            Gets the maximum allowed length for this slash command parameter.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommandOption.NameLocalizations">
            <summary>
            Localized names for this option.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommandOption.DescriptionLocalizations">
            <summary>
            Localized descriptions for this option.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplicationCommandOption.#ctor(System.String,System.String,DSharpPlus.ApplicationCommandOptionType,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordApplicationCommandOptionChoice},System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordApplicationCommandOption},System.Collections.Generic.IEnumerable{DSharpPlus.ChannelType},System.Nullable{System.Boolean},System.Object,System.Object,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new instance of a <see cref="T:DSharpPlus.Entities.DiscordApplicationCommandOption"/>.
            </summary>
            <param name="name">The name of this parameter.</param>
            <param name="description">The description of the parameter.</param>
            <param name="type">The type of this parameter.</param>
            <param name="required">Whether the parameter is required.</param>
            <param name="choices">The optional choice selection for this parameter.</param>
            <param name="options">The optional subcommands for this parameter.</param>
            <param name="channelTypes">The channel types to be restricted to for this parameter, if of type <see cref="F:DSharpPlus.ApplicationCommandOptionType.Channel"/>.</param>
            <param name="autocomplete">Whether this parameter is autocomplete. If true, <paramref name="choices"/> must not be provided.</param>
            <param name="minValue">The minimum value for this parameter. Only valid for types <see cref="F:DSharpPlus.ApplicationCommandOptionType.Integer"/> or <see cref="F:DSharpPlus.ApplicationCommandOptionType.Number"/>.</param>
            <param name="maxValue">The maximum value for this parameter. Only valid for types <see cref="F:DSharpPlus.ApplicationCommandOptionType.Integer"/> or <see cref="F:DSharpPlus.ApplicationCommandOptionType.Number"/>.</param>
            <param name="name_localizations">Name localizations for this parameter.</param>
            <param name="description_localizations">Description localizations for this parameter.</param>
            <param name="minLength">The minimum allowed length for this parameter. Only valid for type <see cref="F:DSharpPlus.ApplicationCommandOptionType.String"/>.</param>
            <param name="maxLength">The maximum allowed length for this parameter. Only valid for type <see cref="F:DSharpPlus.ApplicationCommandOptionType.String"/>.</param>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordApplicationCommandOptionChoice">
            <summary>
            Represents a command parameter choice for a <see cref="T:DSharpPlus.Entities.DiscordApplicationCommandOption"/>.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommandOptionChoice.Name">
            <summary>
            Gets the name of this choice parameter.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommandOptionChoice.Value">
            <summary>
            Gets the value of this choice parameter. This will either be a type of <see cref="T:System.Int32"/> / <see cref="T:System.Int64"/>, <see cref="T:System.Double"/> or <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplicationCommandOptionChoice.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of a <see cref="T:DSharpPlus.Entities.DiscordApplicationCommandOptionChoice"/>.
            </summary>
            <param name="name">The name of the parameter choice.</param>
            <param name="value">The value of the parameter choice.</param>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordAutoCompleteChoice">
            <summary>
            Represents an option for a user to select for auto-completion.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAutoCompleteChoice.Name">
            <summary>
            Gets the name of this option which will be presented to the user.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordAutoCompleteChoice.Value">
            <summary>
            Gets the value of this option. This may be a string or an integer.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordAutoCompleteChoice.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:DSharpPlus.Entities.DiscordAutoCompleteChoice"/>.
            </summary>
            <param name="name">The name of this option, which will be presented to the user.</param>
            <param name="value">The value of this option.</param>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordActionRowComponent">
            <summary>
            Represents a row of components. Action rows can have up to five components.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordActionRowComponent.Components">
            <summary>
            The components contained within the action row.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordButtonComponent">
            <summary>
            Represents a button that can be pressed. Fires <see cref="T:DSharpPlus.EventArgs.ComponentInteractionCreateEventArgs"/> when pressed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordButtonComponent.Style">
            <summary>
            The style of the button.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordButtonComponent.Label">
            <summary>
            The text to apply to the button. If this is not specified <see cref="P:DSharpPlus.Entities.DiscordButtonComponent.Emoji"/> becomes required.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordButtonComponent.Disabled">
            <summary>
            Whether this button can be pressed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordButtonComponent.Emoji">
            <summary>
            The emoji to add to the button. Can be used in conjunction with a label, or as standalone. Must be added if label is not specified.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordButtonComponent.Enable">
            <summary>
            Enables this component if it was disabled before.
            </summary>
            <returns>The current component.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordButtonComponent.Disable">
            <summary>
            Disables this component.
            </summary>
            <returns>The current component.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordButtonComponent.#ctor">
            <summary>
            Constructs a new <see cref="T:DSharpPlus.Entities.DiscordButtonComponent"/>.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordButtonComponent.#ctor(DSharpPlus.Entities.DiscordButtonComponent)">
            <summary>
            Constucts a new button based on another button.
            </summary>
            <param name="other">The button to copy.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordButtonComponent.#ctor(DSharpPlus.ButtonStyle,System.String,System.String,System.Boolean,DSharpPlus.Entities.DiscordComponentEmoji)">
            <summary>
            Constructs a new button with the specified options.
            </summary>
            <param name="style">The style/color of the button.</param>
            <param name="customId">The Id to assign to the button. This is sent back when a user presses it.</param>
            <param name="label">The text to display on the button, up to 80 characters. Can be left blank if <paramref name="emoji"/>is set.</param>
            <param name="disabled">Whether this button should be initialized as being disabled. User sees a greyed out button that cannot be interacted with.</param>
            <param name="emoji">The emoji to add to the button. This is required if <paramref name="label"/> is empty or null.</param>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordComponent">
            <summary>
            A component to attach to a message.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordComponent.Type">
            <summary>
            The type of component this represents.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordComponent.CustomId">
            <summary>
            The Id of this component, if applicable. Not applicable on ActionRow(s) and link buttons.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordComponentEmoji">
            <summary>
            Represents an emoji to add to a component.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordComponentEmoji.Id">
            <summary>
            The Id of the emoji to use.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordComponentEmoji.Name">
            <summary>
            The name of the emoji to use. Ignored if <see cref="P:DSharpPlus.Entities.DiscordComponentEmoji.Id"/> is set.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordComponentEmoji.#ctor">
            <summary>
            Constructs a new component emoji to add to a <see cref="T:DSharpPlus.Entities.DiscordComponent"/>.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordComponentEmoji.#ctor(System.UInt64)">
            <summary>
            Constructs a new component emoji from an emoji Id.
            </summary>
            <param name="id">The Id of the emoji to use. Any valid emoji Id can be passed.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordComponentEmoji.#ctor(System.String)">
            <summary>
            Constructs a new component emoji from unicode.
            </summary>
            <param name="name">The unicode emoji to set.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordComponentEmoji.#ctor(DSharpPlus.Entities.DiscordEmoji)">
            <summary>
            Constructs a new component emoji from an existing <see cref="T:DSharpPlus.Entities.DiscordEmoji"/>.
            </summary>
            <param name="emoji">The emoji to use.</param>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordLinkButtonComponent">
            <summary>
            Represents a link button. Clicking a link button does not send an interaction.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordLinkButtonComponent.Url">
            <summary>
            The url to open when pressing this button.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordLinkButtonComponent.Label">
            <summary>
            The text to add to this button. If this is not specified, <see cref="P:DSharpPlus.Entities.DiscordLinkButtonComponent.Emoji"/> must be.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordLinkButtonComponent.Disabled">
            <summary>
            Whether this button can be pressed.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordLinkButtonComponent.Emoji">
            <summary>
            The emoji to add to the button. Can be used in conjunction with a label, or as standalone. Must be added if label is not specified.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordLinkButtonComponent.#ctor(System.String,System.String,System.Boolean,DSharpPlus.Entities.DiscordComponentEmoji)">
            <summary>
            Constructs a new <see cref="T:DSharpPlus.Entities.DiscordLinkButtonComponent"/>. This type of button does not send back and interaction when pressed.
            </summary>
            <param name="url">The url to set the button to.</param>
            <param name="label">The text to display on the button. Can be left blank if <paramref name="emoji"/> is set.</param>
            <param name="disabled">Whether or not this button can be pressed.</param>
            <param name="emoji">The emoji to set with this button. This is required if <paramref name="label"/> is null or empty.</param>
        </member>
        <member name="T:DSharpPlus.Entities.BaseDiscordSelectComponent">
            <summary>
            Represents a base class for all select-menus.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.BaseDiscordSelectComponent.Placeholder">
            <summary>
            The text to show when no option is selected.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.BaseDiscordSelectComponent.Disabled">
            <summary>
            Whether this dropdown can be interacted with.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.BaseDiscordSelectComponent.MinimumSelectedValues">
            <summary>
            The minimum amount of options that can be selected. Must be less than or equal to <see cref="P:DSharpPlus.Entities.BaseDiscordSelectComponent.MaximumSelectedValues"/>. Defaults to one.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.BaseDiscordSelectComponent.MaximumSelectedValues">
            <summary>
            The maximum amount of options that can be selected. Must be greater than or equal to zero or <see cref="P:DSharpPlus.Entities.BaseDiscordSelectComponent.MinimumSelectedValues"/>. Defaults to one.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannelSelectComponent.Enable">
            <summary>
            Enables this component.
            </summary>
            <returns>The current component.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannelSelectComponent.Disable">
            <summary>
            Disables this component.
            </summary>
            <returns>The current component.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordChannelSelectComponent.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{DSharpPlus.ChannelType},System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new channel select component.
            </summary>
            <param name="customId">The ID of this component.</param>
            <param name="placeholder">Placeholder text that's shown when no options are selected.</param>
            <param name="channelTypes">Optional channel types to filter by.</param>
            <param name="disabled">Whether this component is disabled.</param>
            <param name="minOptions">The minimum amount of options to be selected.</param>
            <param name="maxOptions">The maximum amount of options to be selected, up to 25.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMentionableSelectComponent.Enable">
            <summary>
            Enables this component.
            </summary>
            <returns>The current component.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMentionableSelectComponent.Disable">
            <summary>
            Disables this component.
            </summary>
            <returns>The current component.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordMentionableSelectComponent.#ctor(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new mentionable select component.
            </summary>
            <param name="customId">The ID of this component.</param>
            <param name="placeholder">Placeholder text that's shown when no options are selected.</param>
            <param name="disabled">Whether this component is disabled.</param>
            <param name="minOptions">The minimum amount of options to be selected.</param>
            <param name="maxOptions">The maximum amount of options to be selected, up to 25.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordRoleSelectComponent.Enable">
            <summary>
            Enables this component.
            </summary>
            <returns>The current component.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordRoleSelectComponent.Disable">
            <summary>
            Disables this component.
            </summary>
            <returns>The current component.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordRoleSelectComponent.#ctor(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new role select component.
            </summary>
            <param name="customId">The ID of this component.</param>
            <param name="placeholder">Placeholder text that's shown when no options are selected.</param>
            <param name="disabled">Whether this component is disabled.</param>
            <param name="minOptions">The minimum amount of options to be selected.</param>
            <param name="maxOptions">The maximum amount of options to be selected, up to 25.</param>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordSelectComponent">
            <summary>
            A select menu with multiple options to choose from.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordSelectComponent.Options">
            <summary>
            The options to pick from on this component.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordSelectComponent.Enable">
            <summary>
            Enables this component.
            </summary>
            <returns>The current component.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordSelectComponent.Disable">
            <summary>
            Disables this component.
            </summary>
            <returns>The current component.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordSelectComponentOption">
            <summary>
            Represents options for <see cref="T:DSharpPlus.Entities.DiscordSelectComponent"/>.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordSelectComponentOption.Label">
            <summary>
            The label to add. This is required.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordSelectComponentOption.Value">
            <summary>
            The value of this option. Akin to the Custom Id of components.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordSelectComponentOption.Default">
            <summary>
            Whether this option is default. If true, this option will be pre-selected. Defaults to false.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordSelectComponentOption.Description">
            <summary>
            The description of this option. This is optional.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordSelectComponentOption.Emoji">
            <summary>
            The emoji of this option. This is optional.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordUserSelectComponent">
            <summary>
            A select component that allows users to be selected.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordUserSelectComponent.Enable">
            <summary>
            Enables this component.
            </summary>
            <returns>The current component.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordUserSelectComponent.Disable">
            <summary>
            Disables this component.
            </summary>
            <returns>The current component.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordUserSelectComponent.#ctor(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new user select component.
            </summary>
            <param name="customId">The ID of this component.</param>
            <param name="placeholder">Placeholder text that's shown when no options are selected.</param>
            <param name="disabled">Whether this component is disabled.</param>
            <param name="minOptions">The minimum amount of options to be selected.</param>
            <param name="maxOptions">The maximum amount of options to be selected, up to 25.</param>
        </member>
        <member name="T:DSharpPlus.Entities.TextInputComponent">
            <summary>
            A text-input field. Like selects, this can only be used once per action row.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.TextInputComponent.Placeholder">
            <summary>
            Optional placeholder text for this input.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.TextInputComponent.Label">
            <summary>
            Label text to put above this input.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.TextInputComponent.Value">
            <summary>
            Pre-filled value for this input.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.TextInputComponent.MinimumLength">
            <summary>
            Optional minimum length for this input.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.TextInputComponent.MaximumLength">
            <summary>
            Optional maximum length for this input. Must be a positive integer, if set.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.TextInputComponent.Required">
            <summary>
            Whether this input is required.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.TextInputComponent.Style">
            <summary>
            Style of this input.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.TextInputComponent.#ctor(System.String,System.String,System.String,System.String,System.Boolean,DSharpPlus.TextInputStyle,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Constructs a new text input field.
            </summary>
            <param name="label">The label for the field, placed above the input itself.</param>
            <param name="customId">The ID of this field.</param>
            <param name="placeholder">Placeholder text for the field.</param>
            <param name="value">A pre-filled value for this field.</param>
            <param name="required">Whether this field is required.</param>
            <param name="style">The style of this field. A single-ling short, or multi-line paragraph.</param>
            <param name="min_length">The minimum input length.</param>
            <param name="max_length">The maximum input length. Must be greater than the minimum, if set.</param>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordFollowupMessageBuilder">
            <summary>
            Constructs a followup message to an interaction.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordFollowupMessageBuilder.IsEphemeral">
            <summary>
            Whether this followup message should be ephemeral.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordFollowupMessageBuilder.#ctor">
            <summary>
            Constructs a new followup message builder
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordFollowupMessageBuilder.#ctor(DSharpPlus.Entities.IDiscordMessageBuilder)">
            <summary>
            Copies the common properties from the passed builder.
            </summary>
            <param name="builder">The builder to copy.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordFollowupMessageBuilder.AsEphemeral(System.Boolean)">
            <summary>
            Sets the followup message to be ephemeral.
            </summary>
            <param name="ephemeral">Ephemeral.</param>
            <returns>The builder to chain calls with.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordFollowupMessageBuilder.Clear">
            <summary>
            Allows for clearing the Followup Message builder so that it can be used again to send a new message.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordInteraction">
            <summary>
            Represents an interaction that was invoked.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteraction.Type">
            <summary>
            Gets the type of interaction invoked.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteraction.Data">
            <summary>
            Gets the command data for this interaction.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteraction.GuildId">
            <summary>
            Gets the Id of the guild that invoked this interaction.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteraction.Guild">
            <summary>
            Gets the guild that invoked this interaction.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteraction.ChannelId">
            <summary>
            Gets the Id of the channel that invoked this interaction.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteraction.Channel">
            <summary>
            Gets the channel that invoked this interaction.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteraction.User">
            <summary>
            Gets the user that invoked this interaction.
            <para>This can be cast to a <see cref="T:DSharpPlus.Entities.DiscordMember"/> if created in a guild.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteraction.Token">
            <summary>
            Gets the continuation token for responding to this interaction.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteraction.Version">
            <summary>
            Gets the version number for this interaction type.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteraction.ApplicationId">
            <summary>
            Gets the ID of the application that created this interaction.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteraction.Message">
            <summary>
            The message this interaction was created with, if any.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteraction.Locale">
            <summary>
            Gets the locale of the user that invoked this interaction.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteraction.GuildLocale">
            <summary>
            Gets the guild's preferred locale, if invoked in a guild.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordInteraction.CreateResponseAsync(DSharpPlus.InteractionResponseType,DSharpPlus.Entities.DiscordInteractionResponseBuilder)">
            <summary>
            Creates a response to this interaction.
            </summary>
            <param name="type">The type of the response.</param>
            <param name="builder">The data, if any, to send.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordInteraction.DeferAsync(System.Boolean)">
            <summary>
                Creates a deferred response to this interaction.
            </summary>
            <param name="ephemeral">Whether the response should be ephemeral.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordInteraction.GetOriginalResponseAsync">
            <summary>
            Gets the original interaction response.
            </summary>
            <returns>The original message that was sent. This <b>does not work on ephemeral messages.</b></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordInteraction.EditOriginalResponseAsync(DSharpPlus.Entities.DiscordWebhookBuilder,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordAttachment})">
            <summary>
            Edits the original interaction response.
            </summary>
            <param name="builder">The webhook builder.</param>
            <param name="attachments">Attached files to keep.</param>
            <returns>The <see cref="T:DSharpPlus.Entities.DiscordMessage"/> edited.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordInteraction.DeleteOriginalResponseAsync">
            <summary>
            Deletes the original interaction response.
            </summary>>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordInteraction.CreateFollowupMessageAsync(DSharpPlus.Entities.DiscordFollowupMessageBuilder)">
            <summary>
            Creates a follow up message to this interaction.
            </summary>
            <param name="builder">The webhook builder.</param>
            <returns>The <see cref="T:DSharpPlus.Entities.DiscordMessage"/> created.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordInteraction.GetFollowupMessageAsync(System.UInt64)">
            <summary>
            Gets a follow up message.
            </summary>
            <param name="messageId">The id of the follow up message.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordInteraction.EditFollowupMessageAsync(System.UInt64,DSharpPlus.Entities.DiscordWebhookBuilder,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordAttachment})">
            <summary>
            Edits a follow up message.
            </summary>
            <param name="messageId">The id of the follow up message.</param>
            <param name="builder">The webhook builder.</param>
            <param name="attachments">Attached files to keep.</param>
            <returns>The <see cref="T:DSharpPlus.Entities.DiscordMessage"/> edited.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordInteraction.DeleteFollowupMessageAsync(System.UInt64)">
            <summary>
            Deletes a follow up message.
            </summary>
            <param name="messageId">The id of the follow up message.</param>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordInteractionData">
            <summary>
            Represents the inner data payload of a <see cref="T:DSharpPlus.Entities.DiscordInteraction"/>.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteractionData.Name">
            <summary>
            Gets the name of the invoked interaction.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteractionData.Options">
            <summary>
            Gets the parameters and values of the invoked interaction.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteractionData.Resolved">
            <summary>
            Gets the Discord snowflake objects resolved from this interaction's arguments.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteractionData.CustomId">
            <summary>
            The Id of the component that invoked this interaction, or the Id of the modal the interaction was spawned from.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteractionData.Title">
            <summary>
            The title of the modal, if applicable.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteractionData.Components">
            <summary>
            Components on this interaction. Only applies to modal interactions.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteractionData.Target">
            <summary>
            The Id of the target. Applicable for context menus.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteractionData.ComponentType">
            <summary>
            The type of component that invoked this interaction, if applicable.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordInteractionDataOption">
            <summary>
            Represents parameters for interaction commands.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteractionDataOption.Name">
            <summary>
            Gets the name of this interaction parameter.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteractionDataOption.Type">
            <summary>
            Gets the type of this interaction parameter.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteractionDataOption.Focused">
            <summary>
            If this is an autocomplete option: Whether this option is currently active.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteractionDataOption.Value">
            <summary>
            Gets the value of this interaction parameter.
            <para>This can be cast to a <see langword="long"/>, <see langword="bool"></see>, <see langword="string"></see>, <see langword="double"></see> or <see langword="ulong"/> depending on the <see cref="P:DSharpPlus.Entities.DiscordInteractionDataOption.Type"/></para>
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteractionDataOption.Options">
            <summary>
            Gets the additional parameters if this parameter is a subcommand.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordInteractionResolvedCollection">
            <summary>
            Represents a collection of Discord snowflake objects resolved from interaction arguments.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteractionResolvedCollection.Users">
            <summary>
            Gets the resolved user objects, if any.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteractionResolvedCollection.Members">
            <summary>
            Gets the resolved member objects, if any.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteractionResolvedCollection.Channels">
            <summary>
            Gets the resolved channel objects, if any.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteractionResolvedCollection.Roles">
            <summary>
            Gets the resolved role objects, if any.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteractionResolvedCollection.Messages">
            <summary>
            Gets the resolved message objects, if any.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteractionResolvedCollection.Attachments">
            <summary>
            The resolved attachment objects, if any.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordInteractionResponseBuilder">
            <summary>
            Constructs an interaction response.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteractionResponseBuilder.IsEphemeral">
            <summary>
            Whether this interaction response should be ephemeral.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteractionResponseBuilder.CustomId">
            <summary>
            The custom id to send with this interaction response. Only applicable when creating a modal.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteractionResponseBuilder.Title">
            <summary>
            The title to send with this interaction response. Only applicable when creating a modal.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInteractionResponseBuilder.Choices">
            <summary>
            The choices to send on this interaction response. Mutually exclusive with content, embed, and components.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordInteractionResponseBuilder.#ctor">
            <summary>
            Constructs a new empty interaction response builder.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordInteractionResponseBuilder.#ctor(DSharpPlus.Entities.IDiscordMessageBuilder)">
            <summary>
            Copies the common properties from the passed builder.
            </summary>
            <param name="builder">The builder to copy.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordInteractionResponseBuilder.#ctor(DSharpPlus.Entities.DiscordInteractionResponseBuilder)">
            <summary>
            Constructs a new interaction response builder based on the passed builder.
            </summary>
            <param name="builder">The builder to copy.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordInteractionResponseBuilder.WithTitle(System.String)">
            <summary>
            If responding with a modal, sets the title of the modal.
            </summary>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordInteractionResponseBuilder.WithCustomId(System.String)">
            <summary>
            If responding with a modal, sets the custom id for the modal.
            </summary>
            <param name="id">The custom id of the modal.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordInteractionResponseBuilder.AddAutoCompleteChoice(DSharpPlus.Entities.DiscordAutoCompleteChoice)">
            <summary>
            Adds a single auto-complete choice to the builder.
            </summary>
            <param name="choice">The choice to add.</param>
            <returns>The current builder to chain calls with.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordInteractionResponseBuilder.AddAutoCompleteChoices(System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordAutoCompleteChoice})">
            <summary>
            Adds auto-complete choices to the builder.
            </summary>
            <param name="choices">The choices to add.</param>
            <returns>The current builder to chain calls with.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordInteractionResponseBuilder.AddAutoCompleteChoices(DSharpPlus.Entities.DiscordAutoCompleteChoice[])">
            <summary>
            Adds auto-complete choices to the builder.
            </summary>
            <param name="choices">The choices to add.</param>
            <returns>The current builder to chain calls with.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordInteractionResponseBuilder.AsEphemeral(System.Boolean)">
            <summary>
            Sets the interaction response to be ephemeral.
            </summary>
            <param name="ephemeral">Ephemeral.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordInteractionResponseBuilder.Clear">
            <summary>
            Allows for clearing the Interaction Response Builder so that it can be used again to send a new response.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordApplicationCommandPermission">
            <summary>
            Represents a permission for a application command.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommandPermission.Id">
            <summary>
            The id of the role or the user this permission is for.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommandPermission.Type">
            <summary>
            Gets the type of the permission.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordApplicationCommandPermission.Permission">
            <summary>
            Gets whether the command is enabled for the role or user.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplicationCommandPermission.#ctor(DSharpPlus.Entities.DiscordRole,System.Boolean)">
            <summary>
            Represents a permission for a application command.
            </summary>
            <param name="role">The role to construct the permission for.</param>
            <param name="permission">Whether the command should be enabled for the role.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordApplicationCommandPermission.#ctor(DSharpPlus.Entities.DiscordMember,System.Boolean)">
            <summary>
            Represents a permission for a application command.
            </summary>
            <param name="member">The member to construct the permission for.</param>
            <param name="permission">Whether the command should be enabled for the role.</param>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordGuildApplicationCommandPermissions">
            <summary>
            Represents the guild permissions for a application command.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildApplicationCommandPermissions.ApplicationId">
            <summary>
            Gets the id of the application the command belongs to.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildApplicationCommandPermissions.GuildId">
            <summary>
            Gets the id of the guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildApplicationCommandPermissions.Guild">
            <summary>
            Gets the guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordGuildApplicationCommandPermissions.Permissions">
            <summary>
            Gets the permissions for the application command in the guild.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordGuildApplicationCommandPermissions.#ctor(System.UInt64,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordApplicationCommandPermission})">
            <summary>
            Represents the guild application command permissions for a application command.
            </summary>
            <param name="commandId">The id of the command.</param>
            <param name="permissions">The permissions for the application command.</param>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordInvite">
            <summary>
            Represents a Discord invite.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.Code">
            <summary>
            Gets the invite's code.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.Guild">
            <summary>
            Gets the guild this invite is for.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.Channel">
            <summary>
            Gets the channel this invite is for.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.TargetUser">
            <summary>
            Gets the partial user that is currently livestreaming.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.TargetApplication">
            <summary>
            Gets the partial embedded application to open for a voice channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.TargetUserType">
            <summary>
            Gets the type of user who the invite is for.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.TargetType">
            <summary>
            Gets the target application for this invite.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.ApproximatePresenceCount">
            <summary>
            Gets the approximate guild online member count for the invite.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.ApproximateMemberCount">
            <summary>
            Gets the approximate guild total member count for the invite.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.Inviter">
            <summary>
            Gets the user who created the invite.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.Uses">
            <summary>
            Gets the number of times this invite has been used.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.MaxUses">
            <summary>
            Gets the max number of times this invite can be used.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.MaxAge">
            <summary>
            Gets duration in seconds after which the invite expires.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.IsTemporary">
            <summary>
            Gets whether this invite only grants temporary membership.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.CreatedAt">
            <summary>
            Gets the date and time this invite was created.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.IsRevoked">
            <summary>
            Gets whether this invite is revoked.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.ExpiresAt">
            <summary>
            Gets the expiration date of this invite.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInvite.StageInstance">
            <summary>
            Gets stage instance data for this invite if it is for a stage instance channel.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordInvite.DeleteAsync(System.String)">
            <summary>
            Deletes the invite.
            </summary>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageChannels"/> permission or the <see cref="F:DSharpPlus.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the emoji does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordInvite.ToString">
            <summary>
            Converts this invite into an invite link.
            </summary>
            <returns>A discord.gg invite link.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordInviteChannel">
            <summary>
            Represents the channel to which an invite is linked.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInviteChannel.Name">
            <summary>
            Gets the name of the channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInviteChannel.Type">
            <summary>
            Gets the type of the channel.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordInviteGuild">
            <summary>
            Represents a guild to which the user is invited.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInviteGuild.Name">
            <summary>
            Gets the name of the guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInviteGuild.IconHash">
            <summary>
            Gets the guild icon's hash.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInviteGuild.IconUrl">
            <summary>
            Gets the guild icon's url.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInviteGuild.SplashHash">
            <summary>
            Gets the hash of guild's invite splash.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInviteGuild.SplashUrl">
            <summary>
            Gets the URL of guild's invite splash.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInviteGuild.Banner">
            <summary>
            Gets the guild's banner hash, when applicable.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInviteGuild.BannerUrl">
            <summary>
            Gets the guild's banner in url form.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInviteGuild.Description">
            <summary>
            Gets the guild description, when applicable.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInviteGuild.Features">
            <summary>
            Gets a collection of this guild's features.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInviteGuild.VerificationLevel">
            <summary>
            Gets the guild's verification level.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInviteGuild.VanityUrlCode">
            <summary>
            Gets vanity URL code for this guild, when applicable.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordInviteGuild.WelcomeScreen">
            <summary>
            Gets the guild's welcome screen, when applicable.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordStageInvite">
            <summary>
            Represents an invite to a stage channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordStageInvite.Members">
            <summary>
            Gets the members that are currently speaking in the stage channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordStageInvite.ParticipantCount">
            <summary>
            Gets the number of participants in the stage channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordStageInvite.SpeakerCount">
            <summary>
            Gets the number of speakers in the stage channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordStageInvite.Topic">
            <summary>
            Gets the topic of the stage channel.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.Optional">
            <summary>
            Helper methods for instantiating an <see cref="T:DSharpPlus.Entities.Optional`1"/>.
            </summary>
            <remarks>
            This class only serves to allow type parameter inference on calls to <see cref="M:DSharpPlus.Entities.Optional.FromValue``1(``0)"/> or
            <see cref="M:DSharpPlus.Entities.Optional.FromNoValue``1"/>.
            </remarks>
        </member>
        <member name="M:DSharpPlus.Entities.Optional.FromValue``1(``0)">
            <summary>
            Creates a new <see cref="T:DSharpPlus.Entities.Optional`1"/> with specified value and valid state.
            </summary>
            <param name="value">Value to populate the optional with.</param>
            <typeparam name="T">Type of the value.</typeparam>
            <returns>Created optional.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.Optional.FromNoValue``1">
            <summary>
            Creates a new empty <see cref="T:DSharpPlus.Entities.Optional`1"/> with no value and invalid state.
            </summary>
            <typeparam name="T">The type that the created instance is wrapping around.</typeparam>
            <returns>Created optional.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.Optional`1">
            <summary>
            Represents a wrapper which may or may not have a value.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
        </member>
        <member name="P:DSharpPlus.Entities.Optional`1.HasValue">
            <summary>
            Gets whether this <see cref="T:DSharpPlus.Entities.Optional`1"/> has a value.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.Optional`1.Value">
            <summary>
            Gets the value of this <see cref="T:DSharpPlus.Entities.Optional`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">If this <see cref="T:DSharpPlus.Entities.Optional`1"/> has no value.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.Optional`1.#ctor(`0)">
            <summary>
            Creates a new <see cref="T:DSharpPlus.Entities.Optional`1"/> with specified value.
            </summary>
            <param name="value">Value of this option.</param>
        </member>
        <member name="M:DSharpPlus.Entities.Optional`1.IsDefined(`0@)">
            <summary>
            Determines whether the optional has a value, and the value is non-null.
            </summary>
            <param name="value">The value contained within the optional.</param>
            <returns>True if the value is set, and is not null, otherwise false.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.Optional`1.ToString">
            <summary>
            Returns a string representation of this optional value.
            </summary>
            <returns>String representation of this optional value.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.Optional`1.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.Optional`1"/> (or its value) are equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Entities.Optional`1"/> or its value.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.Optional`1.Equals(DSharpPlus.Entities.Optional{`0})">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.Optional`1"/> is equal to another <see cref="T:DSharpPlus.Entities.Optional`1"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Entities.Optional`1"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Entities.Optional`1"/> is equal to this <see cref="T:DSharpPlus.Entities.Optional`1"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.Optional`1.Equals(`0)">
            <summary>
            Checks whether the value of this <see cref="T:DSharpPlus.Entities.Optional`1"/> is equal to specified object.
            </summary>
            <param name="e">Object to compare to.</param>
            <returns>Whether the object is equal to the value of this <see cref="T:DSharpPlus.Entities.Optional`1"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.Optional`1.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.Optional`1"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.Optional`1"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.Optional`1.IfPresent``1(System.Func{`0,``0})">
            <summary>
            Performs a mapping operation on the current <see cref="T:DSharpPlus.Entities.Optional`1"/>, turning it into an Optional holding a
            <typeparamref name="TTarget"/> instance if the source optional contains a value; otherwise, returns an
            <see cref="T:DSharpPlus.Entities.Optional`1"/> of that same type with no value.
            </summary>
            <param name="mapper">The mapping function to apply on the current value if it exists</param>
            <typeparam name="TTarget">The type of the target value returned by <paramref name="mapper"/></typeparam>
            <returns>
            An <see cref="T:DSharpPlus.Entities.Optional`1"/> containing a value denoted by calling <paramref name="mapper"/> if the current
            <see cref="T:DSharpPlus.Entities.Optional`1"/> contains a value; otherwise, an empty <see cref="T:DSharpPlus.Entities.Optional`1"/> of the target
            type.
            </returns>
        </member>
        <member name="T:DSharpPlus.Entities.OptionalJsonContractResolver">
            <seealso cref="F:DSharpPlus.Net.Serialization.DiscordJson._serializer"/>
        </member>
        <member name="T:DSharpPlus.Entities.SnowflakeObject">
            <summary>
            Represents an object in Discord API.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.SnowflakeObject.Id">
            <summary>
            Gets the ID of this object.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.SnowflakeObject.CreationTimestamp">
            <summary>
            Gets the date and time this object was created.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.SnowflakeObject.Discord">
            <summary>
            Gets the client instance this object is tied to.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.UserStatus">
            <summary>
            Represents user status.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.UserStatus.Offline">
            <summary>
            User is offline.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.UserStatus.Online">
            <summary>
            User is online.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.UserStatus.Idle">
            <summary>
            User is idle.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.UserStatus.DoNotDisturb">
            <summary>
            User asked not to be disturbed.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.UserStatus.Invisible">
            <summary>
            User is invisible. They will appear as Offline to anyone but themselves.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordActivity">
            <summary>
            Represents a game that a user is playing.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordActivity.Name">
            <summary>
            Gets or sets the name of user's activity.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordActivity.StreamUrl">
            <summary>
            Gets or sets the stream URL, if applicable.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordActivity.ActivityType">
            <summary>
            Gets or sets the activity type.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordActivity.RichPresence">
            <summary>
            Gets the rich presence details, if present.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordActivity.CustomStatus">
            <summary>
            Gets the custom status of this activity, if present.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordActivity.#ctor">
            <summary>
            Creates a new, empty instance of a <see cref="T:DSharpPlus.Entities.DiscordActivity"/>.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordActivity.#ctor(System.String)">
            <summary>
            Creates a new instance of a <see cref="T:DSharpPlus.Entities.DiscordActivity"/> with specified name.
            </summary>
            <param name="name">Name of the activity.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordActivity.#ctor(System.String,DSharpPlus.Entities.ActivityType)">
            <summary>
            Creates a new instance of a <see cref="T:DSharpPlus.Entities.DiscordActivity"/> with specified name.
            </summary>
            <param name="name">Name of the activity.</param>
            <param name="type">Type of the activity.</param>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordCustomStatus">
            <summary>
            Represents details for a custom status activity, attached to a <see cref="T:DSharpPlus.Entities.DiscordActivity"/>.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordCustomStatus.Name">
            <summary>
            Gets the name of this custom status.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordCustomStatus.Emoji">
            <summary>
            Gets the emoji of this custom status, if any.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordRichPresence">
            <summary>
            Represents details for Discord rich presence, attached to a <see cref="T:DSharpPlus.Entities.DiscordActivity"/>.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRichPresence.Details">
            <summary>
            Gets the details of this presence.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRichPresence.State">
            <summary>
            Gets the game state.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRichPresence.Application">
            <summary>
            Gets the application for which the rich presence is for.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRichPresence.Instance">
            <summary>
            Gets the instance status.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRichPresence.LargeImage">
            <summary>
            Gets the large image for the rich presence.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRichPresence.LargeImageText">
            <summary>
            Gets the hovertext for large image.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRichPresence.SmallImage">
            <summary>
            Gets the small image for the rich presence.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRichPresence.SmallImageText">
            <summary>
            Gets the hovertext for small image.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRichPresence.CurrentPartySize">
            <summary>
            Gets the current party size.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRichPresence.MaximumPartySize">
            <summary>
            Gets the maximum party size.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRichPresence.PartyId">
            <summary>
            Gets the party ID.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRichPresence.StartTimestamp">
            <summary>
            Gets the game start timestamp.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRichPresence.EndTimestamp">
            <summary>
            Gets the game end timestamp.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRichPresence.JoinSecret">
            <summary>
            Gets the secret value enabling users to join your game.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRichPresence.MatchSecret">
            <summary>
            Gets the secret value enabling users to receive notifications whenever your game state changes.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRichPresence.SpectateSecret">
            <summary>
            Gets the secret value enabling users to spectate your game.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordRichPresence.Buttons">
            <summary>
            Gets the buttons for the rich presence.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.ActivityType">
            <summary>
            Determines the type of a user activity.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ActivityType.Playing">
            <summary>
            Indicates the user is playing a game.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ActivityType.Streaming">
            <summary>
            Indicates the user is streaming a game.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ActivityType.ListeningTo">
            <summary>
            Indicates the user is listening to something.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ActivityType.Watching">
            <summary>
            Indicates the user is watching something.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ActivityType.Custom">
            <summary>
            Indicates the current activity is a custom status.
            </summary>
        </member>
        <member name="F:DSharpPlus.Entities.ActivityType.Competing">
            <summary>
            Indicates the user is competing in something.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordPresence">
            <summary>
            Represents a user presence.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordPresence.User">
            <summary>
            Gets the user that owns this presence.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordPresence.Activity">
            <summary>
            Gets the user's current activity.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordPresence.Activities">
            <summary>
            Gets the user's current activities.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordPresence.Status">
            <summary>
            Gets this user's status.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordPresence.Guild">
            <summary>
            Gets the guild for which this presence was set.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordPresence.ClientStatus">
            <summary>
            Gets this user's platform-dependent status.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordClientStatus.Desktop">
            <summary>
            Gets the user's status set for an active desktop (Windows, Linux, Mac) application session.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordClientStatus.Mobile">
            <summary>
            Gets the user's status set for an active mobile (iOS, Android) application session.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordClientStatus.Web">
            <summary>
            Gets the user's status set for an active web (browser, bot account) application session.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordUser">
            <summary>
            Represents a Discord user.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.Username">
            <summary>
            Gets this user's username.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.Discriminator">
            <summary>
            Gets the user's 4-digit discriminator.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.BannerColor">
            <summary>
            Gets the user's banner color, if set. Mutually exclusive with <see cref="P:DSharpPlus.Entities.DiscordUser.BannerHash"/>.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.BannerUrl">
            <summary>
            Gets the user's banner url.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.BannerHash">
            <summary>
            Gets the user's profile banner hash. Mutually exclusive with <see cref="P:DSharpPlus.Entities.DiscordUser.BannerColor"/>.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.AvatarHash">
            <summary>
            Gets the user's avatar hash.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.AvatarUrl">
            <summary>
            Gets the user's avatar URL.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.DefaultAvatarUrl">
            <summary>
            Gets the URL of default avatar for this user.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.IsBot">
            <summary>
            Gets whether the user is a bot.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.MfaEnabled">
            <summary>
            Gets whether the user has multi-factor authentication enabled.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.IsSystem">
            <summary>
            Gets whether the user is an official Discord system user.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.Verified">
            <summary>
            Gets whether the user is verified.
            <para>This is only present in OAuth.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.Email">
            <summary>
            Gets the user's email address.
            <para>This is only present in OAuth.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.PremiumType">
            <summary>
            Gets the user's premium type.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.Locale">
            <summary>
            Gets the user's chosen language
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.OAuthFlags">
            <summary>
            Gets the user's flags for OAuth.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.Flags">
            <summary>
            Gets the user's flags.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.Mention">
            <summary>
            Gets the user's mention string.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.IsCurrent">
            <summary>
            Gets whether this user is the Client which created this object.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordUser.UnbanAsync(DSharpPlus.Entities.DiscordGuild,System.String)">
            <summary>
            Unbans this user from a guild.
            </summary>
            <param name="guild">Guild to unban this user from.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.BanMembers"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the user does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordUser.Presence">
            <summary>
            Gets this user's presence.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordUser.GetAvatarUrl(DSharpPlus.ImageFormat,System.UInt16)">
            <summary>
            Gets the user's avatar URL, in requested format and size.
            </summary>
            <param name="imageFormat">The image format of the avatar to get.</param>
            <param name="imageSize">The maximum size of the avatar. Must be a power of two, minimum 16, maximum 4096.</param>
            <returns>The URL of the user's avatar.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordUser.ToString">
            <summary>
            Returns a string representation of this user.
            </summary>
            <returns>String representation of this user.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordUser.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordUser"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Entities.DiscordUser"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordUser.Equals(DSharpPlus.Entities.DiscordUser)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordUser"/> is equal to another <see cref="T:DSharpPlus.Entities.DiscordUser"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Entities.DiscordUser"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Entities.DiscordUser"/> is equal to this <see cref="T:DSharpPlus.Entities.DiscordUser"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordUser.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.DiscordUser"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.DiscordUser"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordUser.op_Equality(DSharpPlus.Entities.DiscordUser,DSharpPlus.Entities.DiscordUser)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordUser"/> objects are equal.
            </summary>
            <param name="e1">First user to compare.</param>
            <param name="e2">Second user to compare.</param>
            <returns>Whether the two users are equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordUser.op_Inequality(DSharpPlus.Entities.DiscordUser,DSharpPlus.Entities.DiscordUser)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordUser"/> objects are not equal.
            </summary>
            <param name="e1">First user to compare.</param>
            <param name="e2">Second user to compare.</param>
            <returns>Whether the two users are not equal.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordVoiceRegion">
            <summary>
            Represents information about a Discord voice server region.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceRegion.Id">
            <summary>
            Gets the unique ID for the region.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceRegion.Name">
            <summary>
            Gets the name of the region.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceRegion.SampleHostname">
            <summary>
            Gets an example server hostname for this region.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceRegion.SamplePort">
            <summary>
            Gets an example server port for this region.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceRegion.IsVIP">
            <summary>
            Gets whether this is a VIP-only region.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceRegion.IsOptimal">
            <summary>
            Gets whether this region is the most optimal for the current user.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceRegion.IsDeprecated">
            <summary>
            Gets whether this voice region is deprecated.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceRegion.IsCustom">
            <summary>
            Gets whether this is a custom voice region.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordVoiceRegion.Equals(DSharpPlus.Entities.DiscordVoiceRegion)">
            <summary>
            Gets whether two <see cref="T:DSharpPlus.Entities.DiscordVoiceRegion"/>s are equal.
            </summary>
            <param name="region">The region to compare with.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordVoiceRegion.op_Equality(DSharpPlus.Entities.DiscordVoiceRegion,DSharpPlus.Entities.DiscordVoiceRegion)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordVoiceRegion"/> objects are equal.
            </summary>
            <param name="left">First voice region to compare.</param>
            <param name="right">Second voice region to compare.</param>
            <returns>Whether the two voice regions are equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordVoiceRegion.op_Inequality(DSharpPlus.Entities.DiscordVoiceRegion,DSharpPlus.Entities.DiscordVoiceRegion)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordVoiceRegion"/> objects are not equal.
            </summary>
            <param name="left">First voice region to compare.</param>
            <param name="right">Second voice region to compare.</param>
            <returns>Whether the two voice regions are not equal.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordVoiceState">
            <summary>
            Represents a Discord voice state.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.GuildId">
            <summary>
            Gets ID of the guild this voice state is associated with.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.Guild">
            <summary>
            Gets the guild associated with this voice state.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.ChannelId">
            <summary>
            Gets ID of the channel this user is connected to.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.Channel">
            <summary>
            Gets the channel this user is connected to.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.UserId">
            <summary>
            Gets ID of the user to which this voice state belongs.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.User">
            <summary>
            Gets the user associated with this voice state.
            <para>This can be cast to a <see cref="T:DSharpPlus.Entities.DiscordMember"/> if this voice state was in a guild.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.SessionId">
            <summary>
            Gets ID of the session of this voice state.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.IsServerDeafened">
            <summary>
            Gets whether this user is deafened.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.IsServerMuted">
            <summary>
            Gets whether this user is muted.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.IsSelfDeafened">
            <summary>
            Gets whether this user is locally deafened.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.IsSelfMuted">
            <summary>
            Gets whether this user is locally muted.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.IsSelfVideo">
            <summary>
            Gets whether this user's camera is enabled.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.IsSelfStream">
            <summary>
            Gets whether this user is using the Go Live feature.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.IsSuppressed">
            <summary>
            Gets whether the current user has suppressed this user.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.RequestToSpeakTimestamp">
            <summary>
            Gets the time at which this user requested to speak.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordVoiceState.Member">
            <summary>
            Gets the member this voice state belongs to.
            </summary>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordWebhook">
            <summary>
            Represents information about a Discord webhook.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWebhook.GuildId">
            <summary>
            Gets the ID of the guild this webhook belongs to.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWebhook.ChannelId">
            <summary>
            Gets the ID of the channel this webhook belongs to.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWebhook.User">
            <summary>
            Gets the user this webhook was created by.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWebhook.Name">
            <summary>
            Gets the default name of this webhook.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWebhook.AvatarHash">
            <summary>
            Gets hash of the default avatar for this webhook.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWebhook.AvatarUrl">
            <summary>
            Gets the default avatar url for this webhook.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWebhook.Token">
            <summary>
            Gets the secure token of this webhook.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWebhook.SourceGuild">
            <summary>
            A partial guild object for the guild of the channel this channel follower webhook is following.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWebhook.SourceChannel">
            <summary>
            A partial channel object for the channel this channel follower webhook is following.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWebhook.Url">
            <summary>
            Gets the webhook's url. Only returned when using the webhook.incoming OAuth2 scope.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhook.ModifyAsync(System.String,DSharpPlus.Entities.Optional{System.IO.Stream},System.Nullable{System.UInt64},System.String)">
            <summary>
            Modifies this webhook.
            </summary>
            <param name="name">New default name for this webhook.</param>
            <param name="avatar">New avatar for this webhook.</param>
            <param name="channelId">The new channel id to move the webhook to.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns>The modified webhook.</returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageWebhooks"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the webhook does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhook.DeleteAsync">
            <summary>
            Permanently deletes this webhook.
            </summary>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DSharpPlus.Permissions.ManageWebhooks"/> permission.</exception>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the webhook does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhook.ExecuteAsync(DSharpPlus.Entities.DiscordWebhookBuilder)">
            <summary>
            Executes this webhook with the given <see cref="T:DSharpPlus.Entities.DiscordWebhookBuilder"/>.
            </summary>
            <param name="builder">Webhook builder filled with data to send.</param>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the webhook does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhook.ExecuteSlackAsync(System.String)">
            <summary>
            Executes this webhook in Slack compatibility mode.
            </summary>
            <param name="json">JSON containing Slack-compatible payload for this webhook.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the webhook does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhook.ExecuteGithubAsync(System.String)">
            <summary>
            Executes this webhook in GitHub compatibility mode.
            </summary>
            <param name="json">JSON containing GitHub-compatible payload for this webhook.</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the webhook does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhook.GetMessageAsync(System.UInt64)">
            <summary>
            Gets a previously-sent webhook message.
            </summary>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the webhook or message does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhook.EditMessageAsync(System.UInt64,DSharpPlus.Entities.DiscordWebhookBuilder,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordAttachment})">
            <summary>
            Edits a previously-sent webhook message.
            </summary>
            <param name="messageId">The id of the message to edit.</param>
            <param name="builder">The builder of the message to edit.</param>
            <param name="attachments">Attached files to keep.</param>
            <returns>The modified <see cref="T:DSharpPlus.Entities.DiscordMessage"/></returns>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the webhook does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhook.DeleteMessageAsync(System.UInt64)">
            <summary>
            Deletes a message that was created by the webhook.
            </summary>
            <param name="messageId">The id of the message to delete</param>
            <returns></returns>
            <exception cref="T:DSharpPlus.Exceptions.NotFoundException">Thrown when the webhook does not exist.</exception>
            <exception cref="T:DSharpPlus.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DSharpPlus.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhook.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordWebhook"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Entities.DiscordWebhook"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhook.Equals(DSharpPlus.Entities.DiscordWebhook)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Entities.DiscordWebhook"/> is equal to another <see cref="T:DSharpPlus.Entities.DiscordWebhook"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Entities.DiscordWebhook"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Entities.DiscordWebhook"/> is equal to this <see cref="T:DSharpPlus.Entities.DiscordWebhook"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhook.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Entities.DiscordWebhook"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Entities.DiscordWebhook"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhook.op_Equality(DSharpPlus.Entities.DiscordWebhook,DSharpPlus.Entities.DiscordWebhook)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordWebhook"/> objects are equal.
            </summary>
            <param name="e1">First webhook to compare.</param>
            <param name="e2">Second webhook to compare.</param>
            <returns>Whether the two webhooks are equal.</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhook.op_Inequality(DSharpPlus.Entities.DiscordWebhook,DSharpPlus.Entities.DiscordWebhook)">
            <summary>
            Gets whether the two <see cref="T:DSharpPlus.Entities.DiscordWebhook"/> objects are not equal.
            </summary>
            <param name="e1">First webhook to compare.</param>
            <param name="e2">Second webhook to compare.</param>
            <returns>Whether the two webhooks are not equal.</returns>
        </member>
        <member name="T:DSharpPlus.Entities.DiscordWebhookBuilder">
            <summary>
            Constructs ready-to-send webhook requests.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWebhookBuilder.Username">
            <summary>
            Username to use for this webhook request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWebhookBuilder.AvatarUrl">
            <summary>
            Avatar url to use for this webhook request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Entities.DiscordWebhookBuilder.ThreadId">
            <summary>
            Id of the thread to send the webhook request to.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhookBuilder.#ctor">
            <summary>
            Constructs a new empty webhook request builder.
            </summary>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhookBuilder.#ctor(DSharpPlus.Entities.DiscordWebhookBuilder)">
            <summary>
            Constructs a new webhook request builder based on a previous message builder
            </summary>
            <param name="builder">The builder to copy.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhookBuilder.#ctor(DSharpPlus.Entities.IDiscordMessageBuilder)">
            <summary>
            Copies the common properties from the passed builder.
            </summary>
            <param name="builder">The builder to copy.</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhookBuilder.WithUsername(System.String)">
            <summary>
            Sets the username for this webhook builder.
            </summary>
            <param name="username">Username of the webhook</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhookBuilder.WithAvatarUrl(System.String)">
            <summary>
            Sets the avatar of this webhook builder from its url.
            </summary>
            <param name="avatarUrl">Avatar url of the webhook</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhookBuilder.WithThreadId(System.Nullable{System.UInt64})">
            <summary>
            Sets the id of the thread to execute the webhook on.
            </summary>
            <param name="threadId">The id of the thread</param>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhookBuilder.SendAsync(DSharpPlus.Entities.DiscordWebhook)">
            <summary>
            Executes a webhook.
            </summary>
            <param name="webhook">The webhook that should be executed.</param>
            <returns>The message sent</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhookBuilder.ModifyAsync(DSharpPlus.Entities.DiscordWebhook,DSharpPlus.Entities.DiscordMessage)">
            <summary>
            Sends the modified webhook message.
            </summary>
            <param name="webhook">The webhook that should be executed.</param>
            <param name="message">The message to modify.</param>
            <returns>The modified message</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhookBuilder.ModifyAsync(DSharpPlus.Entities.DiscordWebhook,System.UInt64)">
            <summary>
            Sends the modified webhook message.
            </summary>
            <param name="webhook">The webhook that should be executed.</param>
            <param name="messageId">The id of the message to modify.</param>
            <returns>The modified message</returns>
        </member>
        <member name="M:DSharpPlus.Entities.DiscordWebhookBuilder.Validate(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Does the validation before we send a the Create/Modify request.
            </summary>
            <param name="isModify">Tells the method to perform the Modify Validation or Create Validation.</param>
            <param name="isFollowup">Tells the method to perform the follow up message validation.</param>
            <param name="isInteractionResponse">Tells the method to perform the interaction response validation.</param>
        </member>
        <member name="T:DSharpPlus.Net.DiscordUri">
            <summary>
            An URI in a Discord embed doesn't necessarily conform to the RFC 3986. If it uses the <c>attachment://</c>
            protocol, it mustn't contain a trailing slash to be interpreted correctly as an embed attachment reference by
            Discord.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.DiscordUri.Type">
            <summary>
            The type of this URI.
            </summary>
        </member>
        <member name="M:DSharpPlus.Net.DiscordUri.ToString">
            <summary>
            Returns a string representation of this DiscordUri.
            </summary>
            <returns>This DiscordUri, as a string.</returns>
        </member>
        <member name="M:DSharpPlus.Net.DiscordUri.ToUri">
            <summary>
            Converts this DiscordUri into a canonical representation of a <see cref="T:System.Uri"/> if it can be represented as
            such, throwing an exception otherwise.
            </summary>
            <returns>A canonical representation of this DiscordUri.</returns>
            <exception cref="T:System.UriFormatException">If <see cref="P:DSharpPlus.Net.DiscordUri.Type"/> is not <see cref="F:DSharpPlus.Net.DiscordUriType.Standard"/>, as
            that would mean creating an invalid Uri, which would result in loss of data.</exception>
        </member>
        <member name="F:DSharpPlus.Net.DiscordUriType.Standard">
            <summary>
            Represents a URI that conforms to RFC 3986, meaning it's stored internally as a <see cref="T:System.Uri"/> and will
            contain a trailing slash after the domain name.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.DiscordUriType.NonStandard">
            <summary>
            Represents a URI that does not conform to RFC 3986, meaning it's stored internally as a plain string and
            should be treated as one.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.ClientProperties">
            <summary>
            Represents data for identify payload's client properties.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ClientProperties.OperatingSystem">
            <summary>
            Gets the client's operating system.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ClientProperties.Browser">
            <summary>
            Gets the client's browser.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ClientProperties.Device">
            <summary>
            Gets the client's device.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ClientProperties.Referrer">
            <summary>
            Gets the client's referrer.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ClientProperties.ReferringDomain">
            <summary>
            Gets the client's referring domain.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.GatewayHello">
            <summary>
            Represents data for a websocket hello payload.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayHello.HeartbeatInterval">
            <summary>
            Gets the target heartbeat interval (in milliseconds) requested by Discord.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayHello.Trace">
            <summary>
            Gets debug data sent by Discord. This contains a list of servers to which the client is connected.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.GatewayIdentify">
            <summary>
            Represents data for websocket identify payload.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayIdentify.Token">
            <summary>
            Gets or sets the token used to identify the client to Discord.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayIdentify.ClientProperties">
            <summary>
            Gets or sets the client's properties.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayIdentify.Compress">
            <summary>
            Gets or sets whether to encrypt websocket traffic.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayIdentify.LargeThreshold">
            <summary>
            Gets or sets the member count at which the guild is to be considered large.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayIdentify.ShardInfo">
            <summary>
            Gets or sets the shard info for this connection.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayIdentify.Presence">
            <summary>
            Gets or sets the presence for this connection.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayIdentify.Intents">
            <summary>
            Gets or sets the intent flags for this connection.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.GatewayResume">
            <summary>
            Represents data for websocket identify payload.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayResume.Token">
            <summary>
            Gets or sets the token used to identify the client to Discord.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayResume.SessionId">
            <summary>
            Gets or sets the session id used to resume last session.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayResume.SequenceNumber">
            <summary>
            Gets or sets the last received sequence number.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.GatewayOpCode">
            <summary>
            Specifies an OP code in a gateway payload.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.Dispatch">
            <summary>
            Used for dispatching events.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.Heartbeat">
            <summary>
            Used for pinging the gateway or client, to ensure the connection is still alive.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.Identify">
            <summary>
            Used for initial handshake with the gateway.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.StatusUpdate">
            <summary>
            Used to update client status.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.VoiceStateUpdate">
            <summary>
            Used to update voice state, when joining, leaving, or moving between voice channels.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.VoiceServerPing">
            <summary>
            Used for pinging the voice gateway or client, to ensure the connection is still alive.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.Resume">
            <summary>
            Used to resume a closed connection.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.Reconnect">
            <summary>
            Used to notify the client that it has to reconnect.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.RequestGuildMembers">
            <summary>
            Used to request guild members.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.InvalidSession">
            <summary>
            Used to notify the client about an invalidated session.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.Hello">
            <summary>
            Used by the gateway upon connecting.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.HeartbeatAck">
            <summary>
            Used to acknowledge a heartbeat.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.Abstractions.GatewayOpCode.GuildSync">
            <summary>
            Used to request guild synchronization.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.GatewayPayload">
            <summary>
            Represents a websocket payload exchanged between Discord and the client.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayPayload.OpCode">
            <summary>
            Gets or sets the OP code of the payload.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayPayload.Data">
            <summary>
            Gets or sets the data of the payload.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayPayload.Sequence">
            <summary>
            Gets or sets the sequence number of the payload. Only present for OP 0.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.GatewayPayload.EventName">
            <summary>
            Gets or sets the event name of the payload. Only present for OP 0.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.ReadyPayload">
            <summary>
            Represents data for websocket ready event payload.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ReadyPayload.GatewayVersion">
            <summary>
            Gets the gateway version the client is connectected to.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ReadyPayload.CurrentUser">
            <summary>
            Gets the current user.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ReadyPayload.DmChannels">
            <summary>
            Gets the private channels available for this shard.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ReadyPayload.Guilds">
            <summary>
            Gets the guilds available for this shard.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ReadyPayload.SessionId">
            <summary>
            Gets the current session's ID.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ReadyPayload.Trace">
            <summary>
            Gets debug data sent by Discord. This contains a list of servers to which the client is connected.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.ShardInfo">
            <summary>
            Represents data for identify payload's shard info.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ShardInfo.ShardId">
            <summary>
            Gets or sets this client's shard id.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.ShardInfo.ShardCount">
            <summary>
            Gets or sets the total shard count for this token.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.StatusUpdate">
            <summary>
            Represents data for websocket status update payload.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.StatusUpdate.IdleSince">
            <summary>
            Gets or sets the unix millisecond timestamp of when the user went idle.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.StatusUpdate.IsAFK">
            <summary>
            Gets or sets whether the user is AFK.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.StatusUpdate.Status">
            <summary>
            Gets or sets the status of the user.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.StatusUpdate.Activity">
            <summary>
            Gets or sets the game the user is playing.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.TransportActivity">
            <summary>
            Represents a game a user is playing.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.Name">
            <summary>
            Gets or sets the name of the game the user is playing.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.StreamUrl">
            <summary>
            Gets or sets the stream URI, if applicable.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.ActivityType">
            <summary>
            Gets or sets the livesteam type.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.Details">
             <summary>
             Gets or sets the details.
            
             <para>This is a component of the rich presence, and, as such, can only be used by regular users.</para>
             </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.State">
             <summary>
             Gets or sets game state.
            
             <para>This is a component of the rich presence, and, as such, can only be used by regular users.</para>
             </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.Emoji">
            <summary>
            Gets the emoji details for a custom status, if any.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.ApplicationId">
             <summary>
             Gets ID of the application for which this rich presence is for.
            
             This is a component of the rich presence, and, as such, can only be used by regular users.
             </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.Instance">
             <summary>
             Gets or sets instance status.
            
             This is a component of the rich presence, and, as such, can only be used by regular users.
             </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.Party">
             <summary>
             Gets or sets information about the current game's party.
            
             This is a component of the rich presence, and, as such, can only be used by regular users.
             </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.Assets">
             <summary>
             Gets or sets information about assets related to this rich presence.
            
             This is a component of the rich presence, and, as such, can only be used by regular users.
             </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.Timestamps">
             <summary>
             Gets or sets information about current game's timestamps.
            
             This is a component of the rich presence, and, as such, can only be used by regular users.
             </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.Secrets">
             <summary>
             Gets or sets information about current game's secret values.
            
             This is a component of the rich presence, and, as such, can only be used by regular users.
             </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.TransportActivity.PresenceAssets">
            <summary>
            Represents information about assets attached to a rich presence.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.PresenceAssets.LargeImage">
            <summary>
            Gets the large image asset ID.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.PresenceAssets.LargeImageText">
            <summary>
            Gets the large image text.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.PresenceAssets.SmallImage">
            <summary>
            Gets the small image asset ID.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.PresenceAssets.SmallImageText">
            <summary>
            Gets the small image text.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.TransportActivity.GameParty">
            <summary>
            Represents information about rich presence game party.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.GameParty.Id">
            <summary>
            Gets the game party ID.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.GameParty.Size">
            <summary>
            Gets the size of the party.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.TransportActivity.GameParty.GamePartySize">
            <summary>
            Represents information about party size.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.GameParty.GamePartySize.Current">
            <summary>
            Gets the current number of players in the party.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.GameParty.GamePartySize.Maximum">
            <summary>
            Gets the maximum party size.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.TransportActivity.GameTimestamps">
            <summary>
            Represents information about the game state's timestamps.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.GameTimestamps.Start">
            <summary>
            Gets the time the game has started.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.GameTimestamps.End">
            <summary>
            Gets the time the game is going to end.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.TransportActivity.GameSecrets">
            <summary>
            Represents information about secret values for the Join, Spectate, and Match actions.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.GameSecrets.Join">
            <summary>
            Gets the secret value for join action.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.GameSecrets.Match">
            <summary>
            Gets the secret value for match action.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.TransportActivity.GameSecrets.Spectate">
            <summary>
            Gets the secret value for spectate action.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Abstractions.VoiceStateUpdate">
            <summary>
            Represents data for websocket voice state update payload.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.VoiceStateUpdate.GuildId">
            <summary>
            Gets or sets the guild for which the user is updating their voice state.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.VoiceStateUpdate.ChannelId">
            <summary>
            Gets or sets the channel user wants to connect to. Null if disconnecting.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.VoiceStateUpdate.Mute">
            <summary>
            Gets or sets whether the client is muted.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Abstractions.VoiceStateUpdate.Deafen">
            <summary>
            Gets or sets whether the client is deafened.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.GatewayInfo">
            <summary>
            Represents information used to identify with Discord.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.GatewayInfo.Url">
            <summary>
            Gets the gateway URL for the WebSocket connection.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.GatewayInfo.ShardCount">
            <summary>
            Gets the recommended amount of shards.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.GatewayInfo.SessionBucket">
            <summary>
            Gets the session start limit data.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.ConnectionEndpoint">
            <summary>
            Represents a network connection endpoint.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.ConnectionEndpoint.Hostname">
            <summary>
            Gets or sets the hostname associated with this endpoint.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.ConnectionEndpoint.Port">
            <summary>
            Gets or sets the port associated with this endpoint.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.ConnectionEndpoint.Secured">
            <summary>
            Gets or sets the secured status of this connection.
            </summary>
        </member>
        <member name="M:DSharpPlus.Net.ConnectionEndpoint.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new endpoint structure.
            </summary>
            <param name="hostname">Hostname to connect to.</param>
            <param name="port">Port to use for connection.</param>
            <param name="secured">Whether the connection should be secured (https/wss).</param>
        </member>
        <member name="M:DSharpPlus.Net.ConnectionEndpoint.GetHashCode">
            <summary>
            Gets the hash code of this endpoint.
            </summary>
            <returns>Hash code of this endpoint.</returns>
        </member>
        <member name="M:DSharpPlus.Net.ConnectionEndpoint.ToString">
            <summary>
            Gets the string representation of this connection endpoint.
            </summary>
            <returns>String representation of this endpoint.</returns>
        </member>
        <member name="P:DSharpPlus.Net.Models.ApplicationCommandEditModel.Name">
            <summary>
            Sets the command's new name.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ApplicationCommandEditModel.Description">
            <summary>
            Sets the command's new description
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ApplicationCommandEditModel.Options">
            <summary>
            Sets the command's new options.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ApplicationCommandEditModel.DefaultPermission">
            <summary>
            Sets whether the command is enabled by default when the application is added to a guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ApplicationCommandEditModel.AllowDMUsage">
            <summary>
            Sets whether the command can be invoked in DMs.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ApplicationCommandEditModel.DefaultMemberPermissions">
            <summary>
            Sets the requisite permissions for the command.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.BaseEditModel.AuditLogReason">
            <summary>
            Reason given in audit logs
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ChannelEditModel.Name">
            <summary>
            Sets the channel's new name.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ChannelEditModel.Position">
            <summary>
            Sets the channel's new position.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ChannelEditModel.Topic">
            <summary>
            Sets the channel's new topic.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ChannelEditModel.Nsfw">
            <summary>
            Sets whether the channel is to be marked as NSFW.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ChannelEditModel.Parent">
            <summary>
            <para>Sets the parent of this channel.</para>
            <para>This should be channel with <see cref="P:DSharpPlus.Entities.DiscordChannel.Type"/> set to <see cref="F:DSharpPlus.ChannelType.Category"/>.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ChannelEditModel.Bitrate">
            <summary>
            Sets the voice channel's new bitrate.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ChannelEditModel.Userlimit">
            <summary>
            <para>Sets the voice channel's new user limit.</para>
            <para>Setting this to 0 will disable the user limit.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ChannelEditModel.PerUserRateLimit">
            <summary>
            <para>Sets the channel's new slow mode timeout.</para>
            <para>Setting this to null or 0 will disable slow mode.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ChannelEditModel.RtcRegion">
            <summary>
            <para>Sets the voice channel's region override.</para>
            <para>Setting this to null will set it to automatic.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ChannelEditModel.QualityMode">
            <summary>
            <para>Sets the voice channel's video quality.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ChannelEditModel.Type">
            <summary>
            <para>Sets the channel's type.</para>
            <para>This can only be used to convert between text and news channels.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ChannelEditModel.PermissionOverwrites">
            <summary>
            <para>Sets the channel's permission overwrites.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ChannelEditModel.DefaultAutoArchiveDuration">
            <summary>
            <para>Sets the channel's auto-archive duration.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ChannelEditModel.Flags">
            <summary>
            <para>Sets the channel's flags (forum channels and posts only).</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ChannelEditModel.AvailableTags">
            <summary>
            <para>Sets the channel's available tags.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ChannelEditModel.DefaultReaction">
            <summary>
            <para>Sets the channel's default reaction, if any.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ChannelEditModel.DefaultThreadRateLimit">
            <summary>
            <para>Sets the default slowmode of newly created threads, but does not retroactively update.</para>
            </summary>
            <remarks>https://discord.com/developers/docs/resources/channel#modify-channel-json-params-guild-channel</remarks>
        </member>
        <member name="P:DSharpPlus.Net.Models.ChannelEditModel.DefaultSortOrder">
            <summary>
            Sets the default sort order of posts in this channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ChannelEditModel.DefaultForumLayout">
            <summary>
            Sets the default layout of posts in this channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.GuildEditModel.Name">
            <summary>
            The new guild name.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.GuildEditModel.Region">
            <summary>
            The new guild voice region.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.GuildEditModel.Icon">
            <summary>
            The new guild icon.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.GuildEditModel.VerificationLevel">
            <summary>
            The new guild verification level.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.GuildEditModel.DefaultMessageNotifications">
            <summary>
            The new guild default message notification level.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.GuildEditModel.MfaLevel">
            <summary>
            The new guild MFA level.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.GuildEditModel.ExplicitContentFilter">
            <summary>
            The new guild explicit content filter level.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.GuildEditModel.AfkChannel">
            <summary>
            The new AFK voice channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.GuildEditModel.AfkTimeout">
            <summary>
            The new AFK timeout time in seconds.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.GuildEditModel.Owner">
            <summary>
            The new guild owner.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.GuildEditModel.Splash">
            <summary>
            The new guild splash.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.GuildEditModel.SystemChannel">
            <summary>
            The new guild system channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.GuildEditModel.RulesChannel">
            <summary>
            The new guild rules channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.GuildEditModel.PublicUpdatesChannel">
            <summary>
            The new guild public updates channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.GuildEditModel.PreferredLocale">
            <summary>
            The new guild preferred locale.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.GuildEditModel.Description">
            <summary>
            The new description of the guild
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.GuildEditModel.DiscoverySplash">
            <summary>
            The new discovery splash image of the guild
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.GuildEditModel.Features">
            <summary>
            A list of <see href="https://discord.com/developers/docs/resources/guild#guild-object-guild-features">guild features</see>
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.GuildEditModel.Banner">
            <summary>
            The new banner of the guild
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.GuildEditModel.SystemChannelFlags">
            <summary>
            The new system channel flags for the guild
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.MemberEditModel.Nickname">
            <summary>
            New nickname
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.MemberEditModel.Roles">
            <summary>
            New roles
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.MemberEditModel.Muted">
            <summary>
            Whether this user should be muted in voice channels
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.MemberEditModel.Deafened">
            <summary>
            Whether this user should be deafened
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.MemberEditModel.VoiceChannel">
            <summary>
            Voice channel to move this user to, set to null to kick
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.MemberEditModel.CommunicationDisabledUntil">
            <summary>
            Whether this member should have communication restricted
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.MembershipScreeningEditModel.Enabled">
            <summary>
            Sets whether membership screening should be enabled for this guild
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.MembershipScreeningEditModel.Description">
            <summary>
            Sets the server description shown in the membership screening form
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.MembershipScreeningEditModel.Fields">
            <summary>
            Sets the fields in this membership screening form
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.RoleEditModel.Name">
            <summary>
            New role name
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.RoleEditModel.Permissions">
            <summary>
            New role permissions
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.RoleEditModel.Color">
            <summary>
            New role color
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.RoleEditModel.Hoist">
            <summary>
            Whether new role should be hoisted
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.RoleEditModel.Mentionable">
            <summary>
            Whether new role should be mentionable
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.RoleEditModel.Emoji">
            <summary>
            The emoji to set for role role icon; must be unicode.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.RoleEditModel.Icon">
            <summary>
            The stream to use for uploading a new role icon.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ScheduledGuildEventEditModel.Name">
            <summary>
            The new name of the event.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ScheduledGuildEventEditModel.Description">
            <summary>
            The new description of the event.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ScheduledGuildEventEditModel.Channel">
            <summary>
            The new channel ID of the event. This must be set to null for external events.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ScheduledGuildEventEditModel.PrivacyLevel">
            <summary>
            The new privacy of the event.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ScheduledGuildEventEditModel.Type">
            <summary>
            The type of the event.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ScheduledGuildEventEditModel.StartTime">
            <summary>
            The new time of the event.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ScheduledGuildEventEditModel.EndTime">
            <summary>
            The new end time of the event.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ScheduledGuildEventEditModel.Metadata">
            <summary>
            The new metadata of the event.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ScheduledGuildEventEditModel.Status">
            <summary>
            The new status of the event.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.StageInstanceEditModel.Topic">
            <summary>
            The new stage instance topic.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.StageInstanceEditModel.PrivacyLevel">
            <summary>
            The new stage instance privacy level.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ThreadChannelEditModel.IsArchived">
            <summary>
            Sets if the thread is archived
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ThreadChannelEditModel.AutoArchiveDuration">
            <summary>
            Sets AutoArchiveDuration of the thread
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ThreadChannelEditModel.Locked">
            <summary>
            Sets if anyone can unarchive a thread
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ThreadChannelEditModel.AppliedTags">
            <summary>
            Sets the applied tags for the thread
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.ThreadChannelEditModel.Flags">
            <summary>
            Sets the flags for the channel (Either PINNED or REQUIRE_TAG)
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.WelcomeScreenEditModel.Enabled">
            <summary>
            Sets whether the welcome screen should be enabled.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.WelcomeScreenEditModel.WelcomeChannels">
            <summary>
            Sets the welcome channels.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.Models.WelcomeScreenEditModel.Description">
            <summary>
            Sets the serer description shown.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.BaseRestRequest">
            <summary>
            Represents a request sent over HTTP.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.BaseRestRequest.Url">
            <summary>
            Gets the url to which this request is going to be made.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.BaseRestRequest.Method">
            <summary>
            Gets the HTTP method used for this request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.BaseRestRequest.Route">
            <summary>
            Gets the generic path (no parameters) for this request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.BaseRestRequest.Headers">
            <summary>
            Gets the headers sent with this request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.BaseRestRequest.RateLimitWaitOverride">
            <summary>
            Gets the override for the rate limit bucket wait time.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.BaseRestRequest.RateLimitBucket">
            <summary>
            Gets the rate limit bucket this request is in.
            </summary>
        </member>
        <member name="M:DSharpPlus.Net.BaseRestRequest.#ctor(DSharpPlus.BaseDiscordClient,DSharpPlus.Net.RateLimitBucket,System.Uri,DSharpPlus.Net.RestRequestMethod,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Nullable{System.Double})">
            <summary>
            Creates a new <see cref="T:DSharpPlus.Net.BaseRestRequest"/> with specified parameters.
            </summary>
            <param name="client"><see cref="T:DSharpPlus.DiscordClient"/> from which this request originated.</param>
            <param name="bucket">Rate limit bucket to place this request in.</param>
            <param name="url">Uri to which this request is going to be sent to.</param>
            <param name="method">Method to use for this request,</param>
            <param name="route">The generic route the request url will use.</param>
            <param name="headers">Additional headers for this request.</param>
            <param name="ratelimitWaitOverride">Override for ratelimit bucket wait time.</param>
        </member>
        <member name="M:DSharpPlus.Net.BaseRestRequest.WaitForCompletionAsync">
            <summary>
            Asynchronously waits for this request to complete.
            </summary>
            <returns>HTTP response to this request.</returns>
        </member>
        <member name="T:DSharpPlus.Net.IpEndpoint">
            <summary>
            Represents a network connection IP endpoint.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.IpEndpoint.Address">
            <summary>
            Gets or sets the hostname associated with this endpoint.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.IpEndpoint.Port">
            <summary>
            Gets or sets the port associated with this endpoint.
            </summary>
        </member>
        <member name="M:DSharpPlus.Net.IpEndpoint.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Creates a new IP endpoint structure.
            </summary>
            <param name="address">IP address to connect to.</param>
            <param name="port">Port to use for connection.</param>
        </member>
        <member name="T:DSharpPlus.Net.MultipartWebRequest">
            <summary>
            Represents a multipart HTTP request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.MultipartWebRequest.Values">
            <summary>
            Gets the dictionary of values attached to this request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.MultipartWebRequest.Files">
            <summary>
            Gets the dictionary of files attached to this request.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.RateLimitBucket">
            <summary>
            Represents a rate limit bucket.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RateLimitBucket.GuildId">
            <summary>
            Gets the Id of the guild bucket.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RateLimitBucket.ChannelId">
            <summary>
            Gets the Id of the channel bucket.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RateLimitBucket.WebhookId">
            <summary>
            Gets the ID of the webhook bucket.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.RateLimitBucket.BucketId">
            <summary>
            Gets the Id of the ratelimit bucket.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RateLimitBucket.Hash">
            <summary>
            Gets or sets the ratelimit hash of this bucket.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RateLimitBucket.RouteHashes">
            <summary>
            Gets the past route hashes associated with this bucket.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RateLimitBucket.LastAttemptAt">
            <summary>
            Gets when this bucket was last called in a request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RateLimitBucket.Remaining">
            <summary>
            Gets the number of uses left before pre-emptive rate limit is triggered.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RateLimitBucket.Maximum">
            <summary>
            Gets the maximum number of uses within a single bucket.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RateLimitBucket.Reset">
            <summary>
            Gets the timestamp at which the rate limit resets.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RateLimitBucket.ResetAfter">
            <summary>
            Gets the time interval to wait before the rate limit resets.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.RateLimitBucket._isUnlimited">
            <summary>
            Gets whether this bucket has it's ratelimit determined.
            <para>This will be <see langword="false"/> if the ratelimit is determined.</para>
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.RateLimitBucket._limitTesting">
            <summary>
            If the initial request for this bucket that is determining  the rate limits is currently executing
            This is a int because booleans can't be accessed atomically
            0 => False, all other values => True
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.RateLimitBucket._limitTestFinished">
            <summary>
            Task to wait for the rate limit test to finish
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.RateLimitBucket._limitValid">
            <summary>
            If the rate limits have been determined
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.RateLimitBucket._nextReset">
            <summary>
            Rate limit reset in ticks, UTC on the next response after the rate limit has been reset
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.RateLimitBucket._limitResetting">
            <summary>
            If the rate limit is currently being reset.
            This is a int because booleans can't be accessed atomically.
            0 => False, all other values => True
            </summary>
        </member>
        <member name="M:DSharpPlus.Net.RateLimitBucket.GenerateBucketId(System.String,System.String,System.String,System.String)">
            <summary>
            Generates an ID for this request bucket.
            </summary>
            <param name="hash">Hash for this bucket.</param>
            <param name="guild_id">Guild Id for this bucket.</param>
            <param name="channel_id">Channel Id for this bucket.</param>
            <param name="webhook_id">Webhook Id for this bucket.</param>
            <returns>Bucket Id.</returns>
        </member>
        <member name="M:DSharpPlus.Net.RateLimitBucket.ToString">
            <summary>
            Returns a string representation of this bucket.
            </summary>
            <returns>String representation of this bucket.</returns>
        </member>
        <member name="M:DSharpPlus.Net.RateLimitBucket.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Net.RateLimitBucket"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DSharpPlus.Net.RateLimitBucket"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Net.RateLimitBucket.Equals(DSharpPlus.Net.RateLimitBucket)">
            <summary>
            Checks whether this <see cref="T:DSharpPlus.Net.RateLimitBucket"/> is equal to another <see cref="T:DSharpPlus.Net.RateLimitBucket"/>.
            </summary>
            <param name="e"><see cref="T:DSharpPlus.Net.RateLimitBucket"/> to compare to.</param>
            <returns>Whether the <see cref="T:DSharpPlus.Net.RateLimitBucket"/> is equal to this <see cref="T:DSharpPlus.Net.RateLimitBucket"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Net.RateLimitBucket.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DSharpPlus.Net.RateLimitBucket"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DSharpPlus.Net.RateLimitBucket"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Net.RateLimitBucket.TryResetLimitAsync(System.DateTimeOffset)">
            <summary>
            Sets remaining number of requests to the maximum when the ratelimit is reset
            </summary>
            <param name="now"></param>
        </member>
        <member name="T:DSharpPlus.Net.RestClient">
            <summary>
            Represents a client used to make REST requests.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.RestRequest">
            <summary>
            Represents a non-multipart HTTP request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RestRequest.Payload">
            <summary>
            Gets the payload sent with this request.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.RestRequestMethod">
            <summary>
            Defines the HTTP method to use for an HTTP request.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.RestRequestMethod.GET">
            <summary>
            Defines that the request is a GET request.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.RestRequestMethod.POST">
            <summary>
            Defines that the request is a POST request.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.RestRequestMethod.DELETE">
            <summary>
            Defines that the request is a DELETE request.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.RestRequestMethod.PATCH">
            <summary>
            Defines that the request is a PATCH request.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.RestRequestMethod.PUT">
            <summary>
            Defines that the request is a PUT request.
            </summary>
        </member>
        <member name="F:DSharpPlus.Net.RestRequestMethod.HEAD">
            <summary>
            Defines that the request is a HEAD request.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.RestResponse">
            <summary>
            Represents a response sent by the remote HTTP party.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RestResponse.ResponseCode">
            <summary>
            Gets the response code sent by the remote party.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RestResponse.Headers">
            <summary>
            Gets the headers sent by the remote party.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.RestResponse.Response">
            <summary>
            Gets the contents of the response sent by the remote party.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.SessionBucket">
            <summary>
            Represents the bucket limits for identifying to Discord.
            <para>This is only relevant for clients that are manually sharding.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.SessionBucket.Total">
            <summary>
            Gets the total amount of sessions per token.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.SessionBucket.Remaining">
            <summary>
            Gets the remaining amount of sessions for this token.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.SessionBucket.ResetAfter">
            <summary>
            Gets the datetime when the <see cref="P:DSharpPlus.Net.SessionBucket.Remaining"/> will reset.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.SessionBucket.MaxConcurrency">
            <summary>
            Gets the maximum amount of shards that can boot concurrently.
            </summary>
        </member>
        <member name="M:DSharpPlus.Net.Serialization.DiscordJson.SerializeObject(System.Object)">
            <summary>Serializes the specified object to a JSON string.</summary>
            <param name="value">The object to serialize.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:DSharpPlus.Net.Serialization.DiscordJson.PopulateObject(Newtonsoft.Json.Linq.JToken,System.Object)">
            <summary>Populates an object with the values from a JSON node.</summary>
            <param name="value">The token to populate the object with.</param>
            <param name="target">The object to populate.</param>
        </member>
        <member name="M:DSharpPlus.Net.Serialization.DiscordJson.ToDiscordObject``1(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Converts this token into an object, passing any properties through extra <see cref="T:Newtonsoft.Json.JsonConverter"/>s if
            needed.
            </summary>
            <param name="token">The token to convert</param>
            <typeparam name="T">Type to convert to</typeparam>
            <returns>The converted token</returns>
        </member>
        <member name="T:DSharpPlus.Net.Serialization.ISO8601DateTimeOffsetJsonConverter">
            <summary>
            Json converter for handling DateTimeOffset values.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Serialization.SnowflakeArrayAsDictionaryJsonConverter">
            <summary>
            Used for a <see cref="T:System.Collections.Generic.Dictionary`2"/> or <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> mapping
            <see cref="T:System.UInt64"/> to any class extending <see cref="T:DSharpPlus.Entities.SnowflakeObject"/> (or, as a special case,
            <see cref="T:DSharpPlus.Entities.DiscordVoiceState"/>). When serializing, discards the ulong
            keys and writes only the values. When deserializing, pulls the keys from <see cref="P:DSharpPlus.Entities.SnowflakeObject.Id"/> (or,
            in the case of <see cref="T:DSharpPlus.Entities.DiscordVoiceState"/>, <see cref="P:DSharpPlus.Entities.DiscordVoiceState.UserId"/>.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Udp.UdpClientFactoryDelegate">
            <summary>
            Creates an instance of a UDP client implementation.
            </summary>
            <returns>Constructed UDP client implementation.</returns>
        </member>
        <member name="T:DSharpPlus.Net.Udp.BaseUdpClient">
            <summary>
            Represents a base abstraction for all UDP client implementations.
            </summary>
        </member>
        <member name="M:DSharpPlus.Net.Udp.BaseUdpClient.Setup(DSharpPlus.Net.ConnectionEndpoint)">
            <summary>
            Configures the UDP client.
            </summary>
            <param name="endpoint">Endpoint that the client will be communicating with.</param>
        </member>
        <member name="M:DSharpPlus.Net.Udp.BaseUdpClient.SendAsync(System.Byte[],System.Int32)">
            <summary>
            Sends a datagram.
            </summary>
            <param name="data">Datagram.</param>
            <param name="dataLength">Length of the datagram.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Net.Udp.BaseUdpClient.ReceiveAsync">
            <summary>
            Receives a datagram.
            </summary>
            <returns>The received bytes.</returns>
        </member>
        <member name="M:DSharpPlus.Net.Udp.BaseUdpClient.Close">
            <summary>
            Closes and disposes the client.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.Udp.DspUdpClient">
            <summary>
            The default, native-based UDP client implementation.
            </summary>
        </member>
        <member name="M:DSharpPlus.Net.Udp.DspUdpClient.#ctor">
            <summary>
            Creates a new UDP client instance.
            </summary>
        </member>
        <member name="M:DSharpPlus.Net.Udp.DspUdpClient.Setup(DSharpPlus.Net.ConnectionEndpoint)">
            <summary>
            Configures the UDP client.
            </summary>
            <param name="endpoint">Endpoint that the client will be communicating with.</param>
        </member>
        <member name="M:DSharpPlus.Net.Udp.DspUdpClient.SendAsync(System.Byte[],System.Int32)">
            <summary>
            Sends a datagram.
            </summary>
            <param name="data">Datagram.</param>
            <param name="dataLength">Length of the datagram.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Net.Udp.DspUdpClient.ReceiveAsync">
            <summary>
            Receives a datagram.
            </summary>
            <returns>The received bytes.</returns>
        </member>
        <member name="M:DSharpPlus.Net.Udp.DspUdpClient.Close">
            <summary>
            Closes and disposes the client.
            </summary>
        </member>
        <member name="M:DSharpPlus.Net.Udp.DspUdpClient.CreateNew">
            <summary>
            Creates a new instance of <see cref="T:DSharpPlus.Net.Udp.DspUdpClient"/>.
            </summary>
            <returns>An instance of <see cref="T:DSharpPlus.Net.Udp.DspUdpClient"/>.</returns>
        </member>
        <member name="T:DSharpPlus.Net.WebSocket.WebSocketClientFactoryDelegate">
            <summary>
            Creates an instance of a WebSocket client implementation.
            </summary>
            <param name="proxy">Proxy settings to use for the new WebSocket client instance.</param>
            <returns>Constructed WebSocket client implementation.</returns>
        </member>
        <member name="T:DSharpPlus.Net.WebSocket.IWebSocketClient">
            <summary>
            Represents a base abstraction for all WebSocket client implementations.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.WebSocket.IWebSocketClient.Proxy">
            <summary>
            Gets the proxy settings for this client.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.WebSocket.IWebSocketClient.DefaultHeaders">
            <summary>
            Gets the collection of default headers to send when connecting to the remote endpoint.
            </summary>
        </member>
        <member name="M:DSharpPlus.Net.WebSocket.IWebSocketClient.ConnectAsync(System.Uri)">
            <summary>
            Connects to a specified remote WebSocket endpoint.
            </summary>
            <param name="uri">The URI of the WebSocket endpoint.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Net.WebSocket.IWebSocketClient.DisconnectAsync(System.Int32,System.String)">
            <summary>
            Disconnects the WebSocket connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Net.WebSocket.IWebSocketClient.SendMessageAsync(System.String)">
            <summary>
            Send a message to the WebSocket server.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:DSharpPlus.Net.WebSocket.IWebSocketClient.AddDefaultHeader(System.String,System.String)">
            <summary>
            Adds a header to the default header collection.
            </summary>
            <param name="name">Name of the header to add.</param>
            <param name="value">Value of the header to add.</param>
            <returns>Whether the operation succeeded.</returns>
        </member>
        <member name="M:DSharpPlus.Net.WebSocket.IWebSocketClient.RemoveDefaultHeader(System.String)">
            <summary>
            Removes a header from the default header collection.
            </summary>
            <param name="name">Name of the header to remove.</param>
            <returns>Whether the operation succeeded.</returns>
        </member>
        <member name="E:DSharpPlus.Net.WebSocket.IWebSocketClient.Connected">
            <summary>
            Triggered when the client connects successfully.
            </summary>
        </member>
        <member name="E:DSharpPlus.Net.WebSocket.IWebSocketClient.Disconnected">
            <summary>
            Triggered when the client is disconnected.
            </summary>
        </member>
        <member name="E:DSharpPlus.Net.WebSocket.IWebSocketClient.MessageReceived">
            <summary>
            Triggered when the client receives a message from the remote party.
            </summary>
        </member>
        <member name="E:DSharpPlus.Net.WebSocket.IWebSocketClient.ExceptionThrown">
            <summary>
            Triggered when an error occurs in the client.
            </summary>
        </member>
        <member name="T:DSharpPlus.Net.WebSocket.WebSocketClient">
            <summary>
            The default, native-based WebSocket client implementation.
            </summary>
        </member>
        <member name="P:DSharpPlus.Net.WebSocket.WebSocketClient.Proxy">
            <inheritdoc />
        </member>
        <member name="P:DSharpPlus.Net.WebSocket.WebSocketClient.DefaultHeaders">
            <inheritdoc />
        </member>
        <member name="M:DSharpPlus.Net.WebSocket.WebSocketClient.#ctor(System.Net.IWebProxy)">
            <summary>
            Instantiates a new WebSocket client with specified proxy settings.
            </summary>
            <param name="proxy">Proxy settings for the client.</param>
        </member>
        <member name="M:DSharpPlus.Net.WebSocket.WebSocketClient.ConnectAsync(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:DSharpPlus.Net.WebSocket.WebSocketClient.DisconnectAsync(System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:DSharpPlus.Net.WebSocket.WebSocketClient.SendMessageAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DSharpPlus.Net.WebSocket.WebSocketClient.AddDefaultHeader(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:DSharpPlus.Net.WebSocket.WebSocketClient.RemoveDefaultHeader(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DSharpPlus.Net.WebSocket.WebSocketClient.Dispose">
            <summary>
            Disposes of resources used by this WebSocket client instance.
            </summary>
        </member>
        <member name="M:DSharpPlus.Net.WebSocket.WebSocketClient.CreateNew(System.Net.IWebProxy)">
            <summary>
            Creates a new instance of <see cref="T:DSharpPlus.Net.WebSocket.WebSocketClient"/>.
            </summary>
            <param name="proxy">Proxy to use for this client instance.</param>
            <returns>An instance of <see cref="T:DSharpPlus.Net.WebSocket.WebSocketClient"/>.</returns>
        </member>
        <member name="E:DSharpPlus.Net.WebSocket.WebSocketClient.Connected">
            <summary>
            Triggered when the client connects successfully.
            </summary>
        </member>
        <member name="E:DSharpPlus.Net.WebSocket.WebSocketClient.Disconnected">
            <summary>
            Triggered when the client is disconnected.
            </summary>
        </member>
        <member name="E:DSharpPlus.Net.WebSocket.WebSocketClient.MessageReceived">
            <summary>
            Triggered when the client receives a message from the remote party.
            </summary>
        </member>
        <member name="E:DSharpPlus.Net.WebSocket.WebSocketClient.ExceptionThrown">
            <summary>
            Triggered when an error occurs in the client.
            </summary>
        </member>
        <member name="T:DSharpPlus.ApplicationFlags">
            <summary>
            Represents flags for a discord application.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationFlags.GatewayPresence">
            <summary>
            Indicates that the application is approved for the <see cref="F:DSharpPlus.DiscordIntents.GuildPresences"/> intent.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationFlags.GatewayPresenceLimited">
            <summary>
            Indicates that the application is awaiting approval for the <see cref="F:DSharpPlus.DiscordIntents.GuildPresences"/> intent.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationFlags.GatewayGuildMembers">
            <summary>
            Indicates that the application is approved for the <see cref="F:DSharpPlus.DiscordIntents.GuildMembers"/> intent.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationFlags.GatewayGuildMembersLimited">
            <summary>
            Indicates that the application is awaiting approval for the <see cref="F:DSharpPlus.DiscordIntents.GuildMembers"/> intent.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationFlags.VerificationPendingGuildLimit">
            <summary>
            Indicates that the application is awaiting verification.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationFlags.Embedded">
            <summary>
            Indicates that the application is a voice channel application.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationFlags.GatewayMessageContent">
            <summary>
            The application can track message content.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationFlags.GatewayMessageContentLimited">
            <summary>
            The application can track message content (limited).
            </summary>
        </member>
        <member name="T:DSharpPlus.ApplicationUpdateType">
            <summary>
            Defines the type of entity that was updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationUpdateType.Role">
            <summary>
             A role was updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationUpdateType.User">
            <summary>
            A user was updated.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationUpdateType.Channel">
            <summary>
            A channel was updated.
            </summary>
        </member>
        <member name="T:DSharpPlus.AutoArchiveDuration">
            <summary>
            Represents the duration in minutes to automatically archive a thread after recent activity.
            </summary>
        </member>
        <member name="F:DSharpPlus.AutoArchiveDuration.Hour">
            <summary>
            Thread will auto-archive after one hour of inactivity.
            </summary>
        </member>
        <member name="F:DSharpPlus.AutoArchiveDuration.Day">
            <summary>
            Thread will auto-archive after one day of inactivity.
            </summary>
        </member>
        <member name="F:DSharpPlus.AutoArchiveDuration.ThreeDays">
            <summary>
            Thread will auto-archive after three days of inactivity.
            </summary>
        </member>
        <member name="F:DSharpPlus.AutoArchiveDuration.Week">
            <summary>
            Thread will auto-archive after one week of inactivity.
            </summary>
        </member>
        <member name="T:DSharpPlus.ChannelType">
            <summary>
            Represents a channel's type.
            </summary>
        </member>
        <member name="F:DSharpPlus.ChannelType.Text">
            <summary>
            Indicates that this is a text channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.ChannelType.Private">
            <summary>
            Indicates that this is a private channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.ChannelType.Voice">
            <summary>
            Indicates that this is a voice channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.ChannelType.Group">
            <summary>
            Indicates that this is a group direct message channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.ChannelType.Category">
            <summary>
            Indicates that this is a channel category.
            </summary>
        </member>
        <member name="F:DSharpPlus.ChannelType.News">
            <summary>
            Indicates that this is a news channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.ChannelType.Store">
            <summary>
            Indicates that this is a store channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.ChannelType.NewsThread">
            <summary>
            Indicates that this is a thread within a news channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.ChannelType.PublicThread">
            <summary>
            Indicates that this is a public thread within a channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.ChannelType.PrivateThread">
            <summary>
            Indicates that this is a private thread within a channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.ChannelType.Stage">
            <summary>
            Indicates that this is a stage channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.ChannelType.Directory">
            <summary>
            Indicates that this is a directory channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.ChannelType.GuildForum">
            <summary>
            Indicates that this is a forum channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.ChannelType.Unknown">
            <summary>
            Indicates unknown channel type.
            </summary>
        </member>
        <member name="F:DSharpPlus.ChannelFlags.Pinned">
            <summary>
            The channel is pinned.
            </summary>
        </member>
        <member name="F:DSharpPlus.ChannelFlags.RequiresTag">
            <summary>
            The [forum] channel requires tags to be applied.
            </summary>
        </member>
        <member name="T:DSharpPlus.DefaultForumLayout">
            <summary>
            The layout type for forum channels.
            </summary>
        </member>
        <member name="F:DSharpPlus.DefaultForumLayout.Unset">
            <summary>
            The channel doesn't have a set layout.
            </summary>
        </member>
        <member name="F:DSharpPlus.DefaultForumLayout.ListView">
            <summary>
            Posts will be displayed in a list format.
            </summary>
        </member>
        <member name="F:DSharpPlus.DefaultForumLayout.GalleryView">
            <summary>
            Posts will be displayed in a grid format that prioritizes image previews over the forum's content.
            </summary>
        </member>
        <member name="T:DSharpPlus.DefaultSortOrder">
            <summary>
            The sort order for forum channels.
            </summary>
        </member>
        <member name="F:DSharpPlus.DefaultSortOrder.LatestActivity">
            <summary>
            Sorts posts by the latest message in the thread.
            </summary>
        </member>
        <member name="F:DSharpPlus.DefaultSortOrder.CreationDate">
            <summary>
            Sorts posts by the creation of the post itself.
            </summary>
        </member>
        <member name="T:DSharpPlus.OverwriteType">
            <summary>
            Represents a channel permissions overwrite's type.
            </summary>
        </member>
        <member name="F:DSharpPlus.OverwriteType.Role">
            <summary>
            Specifies that this overwrite applies to a role.
            </summary>
        </member>
        <member name="F:DSharpPlus.OverwriteType.Member">
            <summary>
            Specifies that this overwrite applies to a member.
            </summary>
        </member>
        <member name="T:DSharpPlus.PrivacyLevel">
            <summary>
            Represents a stage instance's privacy level.
            </summary>
        </member>
        <member name="F:DSharpPlus.PrivacyLevel.Public">
            <summary>
            Indicates that the stage instance is publicly visible.
            </summary>
        </member>
        <member name="F:DSharpPlus.PrivacyLevel.GuildOnly">
            <summary>
            Indicates that the stage instance is only visible to guild members.
            </summary>
        </member>
        <member name="M:DSharpPlus.SystemChannelFlagsExtension.HasSystemChannelFlag(DSharpPlus.SystemChannelFlags,DSharpPlus.SystemChannelFlags)">
            <summary>
            Calculates whether these system channel flags contain a specific flag.
            </summary>
            <param name="baseFlags">The existing flags.</param>
            <param name="flag">The flag to search for.</param>
            <returns></returns>
        </member>
        <member name="T:DSharpPlus.SystemChannelFlags">
            <summary>
            Represents settings for a guild's system channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.SystemChannelFlags.SuppressJoinNotifications">
            <summary>
            Member join messages are disabled.
            </summary>
        </member>
        <member name="F:DSharpPlus.SystemChannelFlags.SuppressPremiumSubscriptions">
            <summary>
            Server boost messages are disabled.
            </summary>
        </member>
        <member name="F:DSharpPlus.SystemChannelFlags.SuppressGuildReminderNotifications">
            <summary>
            Server setup tips are disabled.
            </summary>
        </member>
        <member name="F:DSharpPlus.SystemChannelFlags.SuppressJoinNotificationReplies">
            <summary>
            Server join messages suppress the wave sticker button.
            </summary>
        </member>
        <member name="T:DSharpPlus.VideoQualityMode">
            <summary>
            Represents the video quality mode of a voice channel. This is applicable to voice channels only.
            </summary>
        </member>
        <member name="F:DSharpPlus.VideoQualityMode.Auto">
            <summary>
            Indicates that the video quality is automatically chosen, or there is no value set.
            </summary>
        </member>
        <member name="F:DSharpPlus.VideoQualityMode.Full">
            <summary>
            Indicates that the video quality is 720p.
            </summary>
        </member>
        <member name="T:DSharpPlus.GatewayCompressionLevel">
            <summary>
            Determines at which level should the WebSocket traffic be compressed.
            </summary>
        </member>
        <member name="F:DSharpPlus.GatewayCompressionLevel.None">
            <summary>
            Defines that traffic should not be compressed at all.
            </summary>
        </member>
        <member name="F:DSharpPlus.GatewayCompressionLevel.Payload">
            <summary>
            Defines that traffic should be compressed at payload level.
            </summary>
        </member>
        <member name="F:DSharpPlus.GatewayCompressionLevel.Stream">
            <summary>
            Defines that entire traffic stream should be compressed.
            </summary>
        </member>
        <member name="T:DSharpPlus.MembershipScreeningFieldType">
            <summary>
            Represents a membership screening field type
            </summary>
        </member>
        <member name="F:DSharpPlus.MembershipScreeningFieldType.Terms">
            <summary>
            Specifies the server rules
            </summary>
        </member>
        <member name="T:DSharpPlus.NsfwLevel">
            <summary>
            Represents a server's content level.
            </summary>
        </member>
        <member name="F:DSharpPlus.NsfwLevel.Default">
            <summary>
            Indicates a server's nsfw level is the default.
            </summary>
        </member>
        <member name="F:DSharpPlus.NsfwLevel.Explicit">
            <summary>
            Indicates a server's content contains explicit material.
            </summary>
        </member>
        <member name="F:DSharpPlus.NsfwLevel.Safe">
            <summary>
            Indicates a server's content is safe for work (SFW).
            </summary>
        </member>
        <member name="F:DSharpPlus.NsfwLevel.AgeRestricted">
            <summary>
            Indicates a server's content is age-gated.
            </summary>
        </member>
        <member name="T:DSharpPlus.PremiumTier">
            <summary>
            Represents a server's premium tier.
            </summary>
        </member>
        <member name="F:DSharpPlus.PremiumTier.None">
            <summary>
            Indicates that this server was not boosted.
            </summary>
        </member>
        <member name="F:DSharpPlus.PremiumTier.Tier_1">
            <summary>
            Indicates that this server was boosted two times.
            </summary>
        </member>
        <member name="F:DSharpPlus.PremiumTier.Tier_2">
            <summary>
            Indicates that this server was boosted seven times.
            </summary>
        </member>
        <member name="F:DSharpPlus.PremiumTier.Tier_3">
            <summary>
            Indicates that this server was boosted fourteen times.
            </summary>
        </member>
        <member name="F:DSharpPlus.PremiumTier.Unknown">
            <summary>
            Indicates an unknown premium tier.
            </summary>
        </member>
        <member name="T:DSharpPlus.ApplicationCommandOptionType">
            <summary>
            Represents the type of parameter when invoking an interaction.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationCommandOptionType.SubCommand">
            <summary>
            Whether this parameter is another subcommand.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationCommandOptionType.SubCommandGroup">
            <summary>
            Whether this parameter is apart of a subcommand group.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationCommandOptionType.String">
            <summary>
            Whether this parameter is a string.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationCommandOptionType.Integer">
            <summary>
            Whether this parameter is an integer.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationCommandOptionType.Boolean">
            <summary>
            Whether this parameter is a boolean.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationCommandOptionType.User">
            <summary>
            Whether this parameter is a Discord user.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationCommandOptionType.Channel">
            <summary>
            Whether this parameter is a Discord channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationCommandOptionType.Role">
            <summary>
            Whether this parameter is a Discord role.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationCommandOptionType.Mentionable">
            <summary>
            Whether this parameter is a mentionable (role or user).
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationCommandOptionType.Number">
            <summary>
            Whether this parameter is a double.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationCommandOptionType.Attachment">
            <summary>
            Whether this parameter is a Discord attachment.
            </summary>
        </member>
        <member name="T:DSharpPlus.ApplicationCommandType">
            <summary>
            Represents the type of an <see cref="T:DSharpPlus.Entities.DiscordApplicationCommand"/>.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationCommandType.SlashCommand">
            <summary>
            This command is registered as a slash-command, aka "Chat Input".
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationCommandType.UserContextMenu">
            <summary>
            This command is registered as a user context menu, and is applicable when interacting a user.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationCommandType.MessageContextMenu">
            <summary>
            This command is registered as a message context menu, and is applicable when interacting with a message.
            </summary>
        </member>
        <member name="F:DSharpPlus.ApplicationCommandType.AutoCompleteRequest">
            <summary>
            Inbound only: An auto-complete option is being interacted with.
            </summary>
        </member>
        <member name="T:DSharpPlus.ButtonStyle">
            <summary>
            Represents a button's style/color.
            </summary>
        </member>
        <member name="F:DSharpPlus.ButtonStyle.Primary">
            <summary>
            Blurple button.
            </summary>
        </member>
        <member name="F:DSharpPlus.ButtonStyle.Secondary">
            <summary>
            Grey button.
            </summary>
        </member>
        <member name="F:DSharpPlus.ButtonStyle.Success">
            <summary>
            Green button.
            </summary>
        </member>
        <member name="F:DSharpPlus.ButtonStyle.Danger">
            <summary>
            Red button.
            </summary>
        </member>
        <member name="T:DSharpPlus.ComponentType">
            <summary>
            Represents a type of component.
            </summary>
        </member>
        <member name="F:DSharpPlus.ComponentType.ActionRow">
            <summary>
            A row of components.
            </summary>
        </member>
        <member name="F:DSharpPlus.ComponentType.Button">
            <summary>
            A button.
            </summary>
        </member>
        <member name="F:DSharpPlus.ComponentType.StringSelect">
            <summary>
            A select menu consisting of options.
            </summary>
        </member>
        <member name="F:DSharpPlus.ComponentType.FormInput">
            <summary>
            An input field.
            </summary>
        </member>
        <member name="F:DSharpPlus.ComponentType.UserSelect">
            <summary>
            A select menu that allows users to be selected.
            </summary>
        </member>
        <member name="F:DSharpPlus.ComponentType.RoleSelect">
            <summary>
            A select menu that allows roles to be selected.
            </summary>
        </member>
        <member name="F:DSharpPlus.ComponentType.MentionableSelect">
            <summary>
            A select menu that allows either roles or users to be selected.
            </summary>
        </member>
        <member name="F:DSharpPlus.ComponentType.ChannelSelect">
            <summary>
            A select menu that allows channels to be selected.
            </summary>
        </member>
        <member name="T:DSharpPlus.InteractionResponseType">
            <summary>
            Represents the type of interaction response
            </summary>
        </member>
        <member name="F:DSharpPlus.InteractionResponseType.Pong">
            <summary>
            Acknowledges a Ping.
            </summary>
        </member>
        <member name="F:DSharpPlus.InteractionResponseType.ChannelMessageWithSource">
            <summary>
            Responds to the interaction with a message.
            </summary>
        </member>
        <member name="F:DSharpPlus.InteractionResponseType.DeferredChannelMessageWithSource">
            <summary>
            Acknowledges an interaction to edit to a response later. The user sees a "thinking" state.
            </summary>
        </member>
        <member name="F:DSharpPlus.InteractionResponseType.DeferredMessageUpdate">
            <summary>
            Acknowledges a component interaction to allow a response later.
            </summary>
        </member>
        <member name="F:DSharpPlus.InteractionResponseType.UpdateMessage">
            <summary>
            Responds to a component interaction by editing the message it's attached to.
            </summary>
        </member>
        <member name="F:DSharpPlus.InteractionResponseType.AutoCompleteResult">
            <summary>
            Responds to an auto-complete request.
            </summary>
        </member>
        <member name="F:DSharpPlus.InteractionResponseType.Modal">
            <summary>
            Respond to an interaction with a modal popup.
            </summary>
        </member>
        <member name="T:DSharpPlus.InteractionType">
            <summary>
            Represents the type of interaction used.
            </summary>
        </member>
        <member name="F:DSharpPlus.InteractionType.Ping">
            <summary>
            Sent when registering an HTTP interaction endpoint with Discord. Must be replied to with a Pong.
            </summary>
        </member>
        <member name="F:DSharpPlus.InteractionType.ApplicationCommand">
            <summary>
            An application command.
            </summary>
        </member>
        <member name="F:DSharpPlus.InteractionType.Component">
            <summary>
            A component.
            </summary>
        </member>
        <member name="F:DSharpPlus.InteractionType.AutoComplete">
            <summary>
            An autocomplete field.
            </summary>
        </member>
        <member name="F:DSharpPlus.InteractionType.ModalSubmit">
            <summary>
            A modal was submitted.
            </summary>
        </member>
        <member name="T:DSharpPlus.TextInputStyle">
            <summary>
            The style for a <see cref="T:DSharpPlus.Entities.TextInputComponent"/>
            </summary>
        </member>
        <member name="F:DSharpPlus.TextInputStyle.Short">
            <summary>
            A short, single-line input
            </summary>
        </member>
        <member name="F:DSharpPlus.TextInputStyle.Paragraph">
            <summary>
            A longer, multi-line input
            </summary>
        </member>
        <member name="T:DSharpPlus.MentionType">
            <summary>
            Type of mention being made
            </summary>
        </member>
        <member name="F:DSharpPlus.MentionType.None">
            <summary>
            No mention (wtf?)
            </summary>
        </member>
        <member name="F:DSharpPlus.MentionType.Username">
            <summary>
            Mentioned Username
            </summary>
        </member>
        <member name="F:DSharpPlus.MentionType.Nickname">
            <summary>
            Mentioned Nickname
            </summary>
        </member>
        <member name="F:DSharpPlus.MentionType.Channel">
            <summary>
            Mentioned Channel
            </summary>
        </member>
        <member name="F:DSharpPlus.MentionType.Role">
            <summary>
            Mentioned Role
            </summary>
        </member>
        <member name="T:DSharpPlus.MessageActivityType">
            <summary>
            Indicates the type of MessageActivity for the Rich Presence.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageActivityType.Join">
            <summary>
            Invites the user to join.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageActivityType.Spectate">
            <summary>
            Invites the user to spectate.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageActivityType.Listen">
            <summary>
            Invites the user to listen.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageActivityType.JoinRequest">
            <summary>
            Allows the user to request to join.
            </summary>
        </member>
        <member name="M:DSharpPlus.MessageFlagExtensions.HasMessageFlag(DSharpPlus.MessageFlags,DSharpPlus.MessageFlags)">
            <summary>
            Calculates whether these message flags contain a specific flag.
            </summary>
            <param name="baseFlags">The existing flags.</param>
            <param name="flag">The flags to search for.</param>
            <returns></returns>
        </member>
        <member name="T:DSharpPlus.MessageFlags">
            <summary>
            Represents additional features of a message.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageFlags.Crossposted">
            <summary>
            Whether this message is the original message that was published from a news channel to subscriber channels.
            </summary>
            <remarks>This flag is inbound only (it cannot be set).</remarks>
        </member>
        <member name="F:DSharpPlus.MessageFlags.IsCrosspost">
            <summary>
            Whether this message is crossposted (automatically posted in a subscriber channel).
            </summary>
            <remarks>This flag is inbound only (it cannot be set).</remarks>
        </member>
        <member name="F:DSharpPlus.MessageFlags.SuppressedEmbeds">
            <summary>
            Whether any embeds in the message are hidden.
            </summary>
            <remarks>This flag is inbound only (it cannot be set).</remarks>
        </member>
        <member name="F:DSharpPlus.MessageFlags.SourceMessageDeleted">
            <summary>
            The source message for this crosspost has been deleted.
            </summary>
            <remarks>This flag is inbound only (it cannot be set).</remarks>
        </member>
        <member name="F:DSharpPlus.MessageFlags.Urgent">
            <summary>
            The message came from the urgent message system.
            </summary>
            <remarks>This flag is inbound only (it cannot be set).</remarks>
        </member>
        <member name="F:DSharpPlus.MessageFlags.Ephemeral">
            <summary>
            The message is only visible to the user who invoked the interaction.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageFlags.Loading">
            <summary>
            The message is an interaction response and the bot is "thinking".
            </summary>
            <remarks>This flag is inbound only (it cannot be set).</remarks>
        </member>
        <member name="F:DSharpPlus.MessageFlags.FailedToMentionSomeRolesInThread">
            <summary>
            Indicates that some roles mentioned in the message could not be added to the current thread.
            </summary>
            <remarks>This flag is inbound only (it cannot be set).</remarks>
        </member>
        <member name="F:DSharpPlus.MessageFlags.ContainsSuspiciousThirdPartyLink">
            <summary>
            Indicates that the message contains a link (usually to a file) that will prompt the user
            with a precautionary message saying that the link may be unsafe.
            </summary>
            <remarks>This flag is inbound only (it cannot be set).</remarks>
        </member>
        <member name="F:DSharpPlus.MessageFlags.SupressNotifications">
            <summary>
            Indicates that this message will supress push notifications.
            Mentions in the message will still have a mention indicator, however.
            </summary>
        </member>
        <member name="T:DSharpPlus.MessageType">
            <summary>
            Represents the type of a message.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageType.Default">
            <summary>
            Indicates a regular message.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageType.RecipientAdd">
            <summary>
            Message indicating a recipient was added to a group direct message.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageType.RecipientRemove">
            <summary>
            Message indicating a recipient was removed from a group direct message.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageType.Call">
            <summary>
            Message indicating a call.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageType.ChannelNameChange">
            <summary>
            Message indicating a group direct message channel rename.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageType.ChannelIconChange">
            <summary>
            Message indicating a group direct message channel icon change.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageType.ChannelPinnedMessage">
            <summary>
            Message indicating a user pinned a message to a channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageType.GuildMemberJoin">
            <summary>
            Message indicating a guild member joined. Most frequently seen in newer, smaller guilds.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageType.UserPremiumGuildSubscription">
            <summary>
            Message indicating a member nitro boosted a guild.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageType.TierOneUserPremiumGuildSubscription">
            <summary>
            Message indicating a guild reached tier one of nitro boosts.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageType.TierTwoUserPremiumGuildSubscription">
            <summary>
            Message indicating a guild reached tier two of nitro boosts.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageType.TierThreeUserPremiumGuildSubscription">
            <summary>
            Message indicating a guild reached tier three of nitro boosts.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageType.ChannelFollowAdd">
            <summary>
            Message indicating a user followed a news channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageType.GuildDiscoveryDisqualified">
            <summary>
            Message indicating a guild was removed from guild discovery.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageType.GuildDiscoveryRequalified">
            <summary>
            Message indicating a guild was re-added to guild discovery.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageType.GuildDiscoveryGracePeriodInitialWarning">
            <summary>
            Message indicating that a guild has failed to meet guild discovery requirements for a week.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageType.GuildDiscoveryGracePeriodFinalWarning">
            <summary>
            Message indicating that a guild has failed to meet guild discovery requirements for 3 weeks.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageType.Reply">
            <summary>
            Message indicating a user replied to another user.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageType.ApplicationCommand">
            <summary>
            Message indicating an application command was invoked.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageType.GuildInviteReminder">
            <summary>
            Message reminding you to invite people to help you build the server.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageType.ContextMenuCommand">
            <summary>
            Message indicating a context menu was executed.
            </summary>
        </member>
        <member name="F:DSharpPlus.MessageType.AutoModAlert">
            <summary>
            Message indicating an AutoMod alert.
            </summary>
        </member>
        <member name="M:DSharpPlus.PermissionMethods.HasPermission(DSharpPlus.Permissions,DSharpPlus.Permissions)">
            <summary>
            Calculates whether this permission set contains the given permission.
            </summary>
            <param name="p">The permissions to calculate from</param>
            <param name="permission">permission you want to check</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.PermissionMethods.Grant(DSharpPlus.Permissions,DSharpPlus.Permissions)">
            <summary>
            Grants permissions.
            </summary>
            <param name="p">The permissions to add to.</param>
            <param name="grant">Permission to add.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.PermissionMethods.Revoke(DSharpPlus.Permissions,DSharpPlus.Permissions)">
            <summary>
            Revokes permissions.
            </summary>
            <param name="p">The permissions to take from.</param>
            <param name="revoke">Permission to take.</param>
            <returns></returns>
        </member>
        <member name="T:DSharpPlus.PermissionLevel">
            <summary>
            Whether a permission is allowed, denied or unset
            </summary>
        </member>
        <member name="F:DSharpPlus.PermissionLevel.Allowed">
            <summary>
            Said permission is Allowed
            </summary>
        </member>
        <member name="F:DSharpPlus.PermissionLevel.Denied">
            <summary>
            Said permission is Denied
            </summary>
        </member>
        <member name="F:DSharpPlus.PermissionLevel.Unset">
            <summary>
            Said permission is Unset
            </summary>
        </member>
        <member name="T:DSharpPlus.Permissions">
            <summary>
            Bitwise permission flags.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.None">
            <summary>
            Indicates no permissions given.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.All">
            <summary>
            Indicates all permissions are granted
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.CreateInstantInvite">
            <summary>
            Allows creation of instant channel invites.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.KickMembers">
            <summary>
            Allows kicking members.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.BanMembers">
            <summary>
            Allows banning and unbanning members.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.Administrator">
            <summary>
            Enables full access on a given guild. This also overrides other permissions.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.ManageChannels">
            <summary>
            Allows managing channels.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.ManageGuild">
            <summary>
            Allows managing the guild.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.AddReactions">
            <summary>
            Allows adding reactions to messages.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.ViewAuditLog">
            <summary>
            Allows viewing audit log entries.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.PrioritySpeaker">
            <summary>
            Allows the use of priority speaker.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.AccessChannels">
            <summary>
            Allows accessing text and voice channels. Disabling this permission hides channels.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.SendMessages">
            <summary>
            Allows sending messages (does not allow sending messages in threads).
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.SendTtsMessages">
            <summary>
            Allows sending text-to-speech messages.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.ManageMessages">
            <summary>
            Allows managing messages of other users.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.EmbedLinks">
            <summary>
            Allows embedding content in messages.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.AttachFiles">
            <summary>
            Allows uploading files.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.ReadMessageHistory">
            <summary>
            Allows reading message history.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.MentionEveryone">
            <summary>
            Allows using @everyone and @here mentions.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.UseExternalEmojis">
            <summary>
            Allows using emojis or stickers from external servers, such as twitch or nitro emojis.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.UseVoice">
            <summary>
            Allows connecting to voice chat.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.Speak">
            <summary>
            Allows speaking in voice chat.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.MuteMembers">
            <summary>
            Allows muting other members in voice chat.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.DeafenMembers">
            <summary>
            Allows deafening other members in voice chat.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.MoveMembers">
            <summary>
            Allows moving voice chat members.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.UseVoiceDetection">
            <summary>
            Allows using voice activation in voice chat. Revoking this will usage of push-to-talk.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.ChangeNickname">
            <summary>
            Allows changing of own nickname.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.ManageNicknames">
            <summary>
            Allows managing nicknames of other members.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.ManageRoles">
            <summary>
            Allows managing roles in a guild.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.ManageWebhooks">
            <summary>
            Allows managing webhooks in a guild.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.ManageEmojis">
            <summary>
            Allows managing guild emoji and stickers.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.Stream">
            <summary>
            Allows the user to go live.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.UseSlashCommands">
            <summary>
            Allows the user to use slash commands.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.UseApplicationCommands">
            <summary>
            Allows the user to use application commands.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.RequestToSpeak">
            <summary>
            Allows for requesting to speak in stage channels.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.ManageEvents">
            <summary>
            Allows for managing scheduled guild events.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.ManageThreads">
            <summary>
            Allows for deleting and archiving threads, and viewing all private threads.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.UsePublicThreads">
            <summary>
            Allows for creating and participating in threads.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.UsePrivateThreads">
            <summary>
            Allows for creating and participating in private threads.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.CreatePublicThreads">
            <summary>
            Allows for creating public threads.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.CreatePrivateThreads">
            <summary>
            Allows for creating private threads.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.UseExternalStickers">
            <summary>
            Allows the usage of custom stickers from other servers.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.SendMessagesInThreads">
            <summary>
            Allows for sending messages in threads.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.StartEmbeddedActivities">
            <summary>
            Allows for launching activities (applications with the `EMBEDDED` flag) in a voice channel.
            </summary>
        </member>
        <member name="F:DSharpPlus.Permissions.ModerateMembers">
            <summary>
            Allows for moderating (Timeout) members in a guild.
            </summary>
        </member>
        <member name="T:DSharpPlus.PermissionStringAttribute">
            <summary>
            Defines a readable name for this permission.
            </summary>
        </member>
        <member name="P:DSharpPlus.PermissionStringAttribute.String">
            <summary>
            Gets the readable name for this permission.
            </summary>
        </member>
        <member name="M:DSharpPlus.PermissionStringAttribute.#ctor(System.String)">
            <summary>
            Defines a readable name for this permission.
            </summary>
            <param name="str">Readable name for this permission.</param>
        </member>
        <member name="T:DSharpPlus.TimestampFormat">
            <summary>
            Denotes the type of formatting to use for timestamps.
            </summary>
        </member>
        <member name="F:DSharpPlus.TimestampFormat.ShortDate">
            <summary>
            A short date. e.g. 18/06/2021.
            </summary>
        </member>
        <member name="F:DSharpPlus.TimestampFormat.LongDate">
            <summary>
            A long date. e.g. 18 June 2021.
            </summary>
        </member>
        <member name="F:DSharpPlus.TimestampFormat.ShortDateTime">
            <summary>
            A short date and time. e.g. 18 June 2021 03:50.
            </summary>
        </member>
        <member name="F:DSharpPlus.TimestampFormat.LongDateTime">
            <summary>
            A long date and time. e.g. Friday 18 June 2021 03:50.
            </summary>
        </member>
        <member name="F:DSharpPlus.TimestampFormat.ShortTime">
            <summary>
            A short time. e.g. 03:50.
            </summary>
        </member>
        <member name="F:DSharpPlus.TimestampFormat.LongTime">
            <summary>
            A long time. e.g. 03:50:15.
            </summary>
        </member>
        <member name="F:DSharpPlus.TimestampFormat.RelativeTime">
            <summary>
            The time relative to the client. e.g. An hour ago.
            </summary>
        </member>
        <member name="T:DSharpPlus.TokenType">
            <summary>
            Token type
            </summary>
        </member>
        <member name="F:DSharpPlus.TokenType.User">
            <summary>
            User token type
            </summary>
        </member>
        <member name="F:DSharpPlus.TokenType.Bot">
            <summary>
            Bot token type
            </summary>
        </member>
        <member name="F:DSharpPlus.TokenType.Bearer">
            <summary>
            Bearer token type (used for oAuth)
            </summary>
        </member>
        <member name="T:DSharpPlus.InviteTargetType">
            <summary>
            Represents the application an invite is for.
            </summary>
        </member>
        <member name="F:DSharpPlus.InviteTargetType.Stream">
            <summary>
            Represents an invite to a user streaming.
            </summary>
        </member>
        <member name="F:DSharpPlus.InviteTargetType.EmbeddedApplication">
            <summary>
            Represents an invite to an embedded application.
            </summary>
        </member>
        <member name="T:DSharpPlus.PremiumType">
            <summary>
            The type of Nitro subscription on a user's account.
            </summary>
        </member>
        <member name="F:DSharpPlus.PremiumType.NitroClassic">
            <summary>
            Includes app perks like animated emojis and avatars, but not games.
            </summary>
        </member>
        <member name="F:DSharpPlus.PremiumType.Nitro">
            <summary>
            Includes app perks as well as the games subscription service.
            </summary>
        </member>
        <member name="T:DSharpPlus.TargetUserType">
            <summary>
            Represents the type of user who the invite is for.
            </summary>
        </member>
        <member name="F:DSharpPlus.TargetUserType.Streaming">
            <summary>
            Represents a user who is livestreaming.
            </summary>
        </member>
        <member name="T:DSharpPlus.UserFlags">
            <summary>
            Represents additional details of a users account.
            </summary>
        </member>
        <member name="F:DSharpPlus.UserFlags.None">
            <summary>
            The user has no flags.
            </summary>
        </member>
        <member name="F:DSharpPlus.UserFlags.DiscordEmployee">
            <summary>
            The user is a Discord employee.
            </summary>
        </member>
        <member name="F:DSharpPlus.UserFlags.DiscordPartner">
            <summary>
            The user is a Discord partner.
            </summary>
        </member>
        <member name="F:DSharpPlus.UserFlags.HypeSquadEvents">
            <summary>
            The user has the HypeSquad badge.
            </summary>
        </member>
        <member name="F:DSharpPlus.UserFlags.BugHunterLevelOne">
            <summary>
            The user reached the first bug hunter tier.
            </summary>
        </member>
        <member name="F:DSharpPlus.UserFlags.HouseBravery">
            <summary>
            The user is a member of house bravery.
            </summary>
        </member>
        <member name="F:DSharpPlus.UserFlags.HouseBrilliance">
            <summary>
            The user is a member of house brilliance.
            </summary>
        </member>
        <member name="F:DSharpPlus.UserFlags.HouseBalance">
            <summary>
            The user is a member of house balance.
            </summary>
        </member>
        <member name="F:DSharpPlus.UserFlags.EarlySupporter">
            <summary>
            The user has the early supporter badge.
            </summary>
        </member>
        <member name="F:DSharpPlus.UserFlags.TeamUser">
            <summary>
            Whether the user is apart of a Discord developer team.
            </summary>
        </member>
        <member name="F:DSharpPlus.UserFlags.System">
            <summary>
            Whether the user is an official system user.
            </summary>
        </member>
        <member name="F:DSharpPlus.UserFlags.BugHunterLevelTwo">
            <summary>
            The user reached the second bug hunter tier.
            </summary>
        </member>
        <member name="F:DSharpPlus.UserFlags.VerifiedBot">
            <summary>
            The user is a verified bot.
            </summary>
        </member>
        <member name="F:DSharpPlus.UserFlags.VerifiedBotDeveloper">
            <summary>
            The user is a verified bot developer.
            </summary>
        </member>
        <member name="F:DSharpPlus.UserFlags.DiscordCertifiedModerator">
            <summary>
            The user is a discord certified moderator.
            </summary>
        </member>
        <member name="F:DSharpPlus.UserFlags.HttpInteractionsBot">
            <summary>
            The bot receives interactions via HTTP.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ApplicationCommandEventArgs">
            <summary>
            Represents arguments for application command events.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ApplicationCommandEventArgs.Command">
            <summary>
            Gets the command that was modified.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ApplicationCommandEventArgs.Guild">
            <summary>
            Gets the optional guild of the command.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ApplicationCommandPermissionsUpdatedEventArgs.GuildId">
            <summary>
            The Id of the guild the command was updated for.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ApplicationCommandPermissionsUpdatedEventArgs.CommandId">
            <summary>
            The Id of the command that was updated.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ApplicationCommandPermissionsUpdatedEventArgs.ApplicationId">
            <summary>
            The Id of the application the command was updated for.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ApplicationCommandPermissionsUpdatedEventArgs.NewPermissions">
            <summary>
            The new permissions for the command.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ApplicationCommandPermissionUpdate.Id">
            <summary>
            The Id of the entity this permission is for.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ApplicationCommandPermissionUpdate.Allow">
            <summary>
            Whether the role/user/channel [or anyone in the channel/with the role] is allowed to use the command.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ApplicationCommandPermissionUpdate.Type">
             <summary>
            
             </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ChannelCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.ChannelCreated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ChannelCreateEventArgs.Channel">
            <summary>
            Gets the channel that was created.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ChannelCreateEventArgs.Guild">
            <summary>
            Gets the guild in which the channel was created.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ChannelDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.ChannelDeleted"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ChannelDeleteEventArgs.Channel">
            <summary>
            Gets the channel that was deleted.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ChannelDeleteEventArgs.Guild">
            <summary>
            Gets the guild this channel belonged to.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ChannelPinsUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.ChannelPinsUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ChannelPinsUpdateEventArgs.Guild">
            <summary>
            Gets the guild in which the update occurred.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ChannelPinsUpdateEventArgs.Channel">
            <summary>
            Gets the channel in which the update occurred.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ChannelPinsUpdateEventArgs.LastPinTimestamp">
            <summary>
            Gets the timestamp of the latest pin.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ChannelUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.ChannelUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ChannelUpdateEventArgs.ChannelAfter">
            <summary>
            Gets the post-update channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ChannelUpdateEventArgs.ChannelBefore">
            <summary>
            Gets the pre-update channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ChannelUpdateEventArgs.Guild">
            <summary>
            Gets the guild in which the update occurred.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.DmChannelDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.DmChannelDeleted"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.DmChannelDeleteEventArgs.Channel">
            <summary>
            Gets the direct message channel that was deleted.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ThreadCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.ThreadCreated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ThreadCreateEventArgs.NewlyCreated">
            <summary>
            Gets whether this thread has been newly created.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ThreadCreateEventArgs.Thread">
            <summary>
            Gets the thread that was created.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ThreadCreateEventArgs.Parent">
            <summary>
            Gets the threads parent channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ThreadCreateEventArgs.Guild">
            <summary>
            Gets the guild in which the thread was created.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ThreadDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.ThreadDeleted"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ThreadDeleteEventArgs.Thread">
            <summary>
            Gets the thread that was deleted.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ThreadDeleteEventArgs.Parent">
            <summary>
            Gets the threads parent channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ThreadDeleteEventArgs.Guild">
            <summary>
            Gets the guild this thread belonged to.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ThreadListSyncEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.ThreadListSynced"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ThreadListSyncEventArgs.CurrentMembers">
            <summary>
            Gets all thread member objects, indicating which threads the current user has been added to.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ThreadListSyncEventArgs.Threads">
            <summary>
            Gets all active threads in the given channels that the current user can access.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ThreadListSyncEventArgs.Channels">
            <summary>
            Gets the parent channels whose threads are being synced. May contain channels that have no active threads as well.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ThreadListSyncEventArgs.Guild">
            <summary>
            Gets the guild being synced.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ThreadMembersUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.ThreadMembersUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ThreadMembersUpdateEventArgs.MemberCount">
            <summary>
            Gets the approximate number of members in the thread, capped at 50.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ThreadMembersUpdateEventArgs.RemovedMembers">
            <summary>
            Gets the members who were removed from the thread. These could be skeleton objects depending on cache state.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ThreadMembersUpdateEventArgs.AddedMembers">
            <summary>
            Gets the members who were added to the thread.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ThreadMembersUpdateEventArgs.Thread">
            <summary>
            Gets the thread associated with the member changes.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ThreadMembersUpdateEventArgs.Guild">
            <summary>
            Gets the guild.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ThreadMemberUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.ThreadMemberUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ThreadMemberUpdateEventArgs.ThreadMember">
            <summary>
            Gets the thread member that was updated.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ThreadMemberUpdateEventArgs.Thread">
            <summary>
            Gets the thread the current member was updated for.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ThreadUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.ThreadUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ThreadUpdateEventArgs.ThreadAfter">
            <summary>
            Gets the post-update thread.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ThreadUpdateEventArgs.ThreadBefore">
            <summary>
            Gets the pre-update thread.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ThreadUpdateEventArgs.Parent">
            <summary>
            Gets the threads parent channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ThreadUpdateEventArgs.Guild">
            <summary>
            Gets the guild in which the thread was updated.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ClientErrorEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.ClientErrored"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ClientErrorEventArgs.Exception">
            <summary>
            Gets the exception thrown by the client.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ClientErrorEventArgs.EventName">
            <summary>
            Gets the name of the event that threw the exception.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.DiscordEventArgs">
            <summary>
            Common base for all other <see cref="T:DSharpPlus.DiscordClient"/>-related event argument classes.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildBanAddEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildBanAdded"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildBanAddEventArgs.Member">
            <summary>
            Gets the member that was banned.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildBanAddEventArgs.Guild">
            <summary>
            Gets the guild this member was banned in.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildBanRemoveEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildBanRemoved"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildBanRemoveEventArgs.Member">
            <summary>
            Gets the member that just got unbanned.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildBanRemoveEventArgs.Guild">
            <summary>
            Gets the guild this member was unbanned in.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildCreated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildCreateEventArgs.Guild">
            <summary>
            Gets the guild that was created.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildDeleted"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildDeleteEventArgs.Guild">
            <summary>
            Gets the guild that was deleted.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildDeleteEventArgs.Unavailable">
            <summary>
            Gets whether the guild is unavailable or not.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildDownloadCompletedEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildDownloadCompleted"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildDownloadCompletedEventArgs.Guilds">
            <summary>
            Gets the dictionary of guilds that just finished downloading.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildEmojisUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildEmojisUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildEmojisUpdateEventArgs.EmojisAfter">
            <summary>
            Gets the list of emojis after the change.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildEmojisUpdateEventArgs.EmojisBefore">
            <summary>
            Gets the list of emojis before the change.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildEmojisUpdateEventArgs.Guild">
            <summary>
            Gets the guild in which the update occurred.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildIntegrationsUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildIntegrationsUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildIntegrationsUpdateEventArgs.Guild">
            <summary>
            Gets the guild that had its integrations updated.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildStickersUpdateEventArgs">
            <summary>
            Represents event args for the <see cref="E:DSharpPlus.DiscordClient.GuildStickersUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildStickersUpdateEventArgs.StickersAfter">
            <summary>
            Gets the list of stickers after the change.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildStickersUpdateEventArgs.StickersBefore">
            <summary>
            Gets the list of stickers before the change.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildStickersUpdateEventArgs.Guild">
            <summary>
            Gets the guild in which the update occurred.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildUpdateEventArgs.GuildBefore">
            <summary>
            Gets the guild before it was updated.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildUpdateEventArgs.GuildAfter">
            <summary>
            Gets the guild after it was updated.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildMemberAddEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildMemberAdded"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberAddEventArgs.Member">
            <summary>
            Gets the member that was added.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberAddEventArgs.Guild">
            <summary>
            Gets the guild the member was added to.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildMemberRemoveEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildMemberRemoved"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberRemoveEventArgs.Guild">
            <summary>
            Gets the guild the member was removed from.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberRemoveEventArgs.Member">
            <summary>
            Gets the member that was removed.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildMembersChunkEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildMembersChunked"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMembersChunkEventArgs.Guild">
            <summary>
            Gets the guild that requested this chunk.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMembersChunkEventArgs.Members">
            <summary>
            Gets the collection of members returned from this chunk.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMembersChunkEventArgs.ChunkIndex">
            <summary>
            Gets the current chunk index from the response.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMembersChunkEventArgs.ChunkCount">
            <summary>
            Gets the total amount of chunks for the request.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMembersChunkEventArgs.Presences">
            <summary>
            Gets the collection of presences returned from this chunk, if specified.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMembersChunkEventArgs.NotFound">
            <summary>
            Gets the returned Ids that were not found in the chunk, if specified.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMembersChunkEventArgs.Nonce">
            <summary>
            Gets the unique string used to identify the request, if specified.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildMemberUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.Guild">
            <summary>
            Gets the guild in which the update occurred.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.MemberAfter">
            <summary>
            Get the member with post-update info
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.MemberBefore">
            <summary>
            Get the member with pre-update info
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.RolesAfter">
            <summary>
            Gets a collection containing post-update roles.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.RolesBefore">
            <summary>
            Gets a collection containing pre-update roles.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.NicknameAfter">
            <summary>
            Gets the member's new nickname.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.NicknameBefore">
            <summary>
            Gets the member's old nickname.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.GuildAvatarHashBefore">
            <summary>
            Gets the member's old guild avatar hash.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.GuildAvatarHashAfter">
            <summary>
            Gets the member's new guild avatar hash.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.UsernameBefore">
            <summary>
            Gets the member's old username.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.UsernameAfter">
            <summary>
            Gets the member's new username.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.AvatarHashBefore">
            <summary>
            Gets the member's old avatar hash.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.AvatarHashAfter">
            <summary>
            Gets the member's new avatar hash.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.PendingBefore">
            <summary>
            Gets whether the member had passed membership screening before the update
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.PendingAfter">
            <summary>
            Gets whether the member had passed membership screening after the update
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.CommunicationDisabledUntilBefore">
            <summary>
            Gets the member's communication restriction before the update
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.CommunicationDisabledUntilAfter">
            <summary>
            Gets the member's communication restriction after the update
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildMemberUpdateEventArgs.Member">
            <summary>
            Gets the member that was updated.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildRoleCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildRoleCreated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildRoleCreateEventArgs.Guild">
            <summary>
            Gets the guild in which the role was created.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildRoleCreateEventArgs.Role">
            <summary>
            Gets the role that was created.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildRoleDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildRoleDeleted"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildRoleDeleteEventArgs.Guild">
            <summary>
            Gets the guild in which the role was deleted.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildRoleDeleteEventArgs.Role">
            <summary>
            Gets the role that was deleted.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.GuildRoleUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.GuildRoleUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildRoleUpdateEventArgs.Guild">
            <summary>
            Gets the guild in which the update occurred.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildRoleUpdateEventArgs.RoleAfter">
            <summary>
            Gets the post-update role.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.GuildRoleUpdateEventArgs.RoleBefore">
            <summary>
            Gets the pre-update role.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ScheduledGuildEventCompletedEventArgs">
            <summary>
            Fired when an event is completed.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ScheduledGuildEventCompletedEventArgs.Event">
            <summary>
            The event that finished.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ScheduledGuildEventCreateEventArgs">
            <summary>
            Fired when a new scheduled guild event is created.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ScheduledGuildEventCreateEventArgs.Guild">
            <summary>
            The guild this event is scheduled for.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ScheduledGuildEventCreateEventArgs.Channel">
            <summary>
            The channel this event is scheduled for, if applicable.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ScheduledGuildEventCreateEventArgs.Creator">
            <summary>
            The user that created the event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ScheduledGuildEventCreateEventArgs.Event">
            <summary>
            The event that was created.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ScheduledGuildEventDeleteEventArgs">
            <summary>
            Fired when an event is deleted.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ScheduledGuildEventDeleteEventArgs.Event">
            <summary>
            The event that was deleted.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ScheduledGuildEventUpdateEventArgs">
            <summary>
            Fired when an event is updated.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ScheduledGuildEventUpdateEventArgs.EventBefore">
            <summary>
            The event before the update, or null if it wasn't cached.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ScheduledGuildEventUpdateEventArgs.EventAfter">
            <summary>
            The event after the update.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ScheduledGuildEventUserAddEventArgs">
            <summary>
            Fired when someone subscribes to the scheduled event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ScheduledGuildEventUserAddEventArgs.Guild">
            <summary>
            The guild the event is scheduled for.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ScheduledGuildEventUserAddEventArgs.Event">
            <summary>
            The event that was subscribed to.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ScheduledGuildEventUserAddEventArgs.User">
            <summary>
            The user that subscribed to the event.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ScheduledGuildEventUserRemoveEventArgs">
            <summary>
            Fired when someone unsubcribes from an event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ScheduledGuildEventUserRemoveEventArgs.Guild">
            <summary>
            The guild the event is scheduled for.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ScheduledGuildEventUserRemoveEventArgs.Event">
            <summary>
            The event that was unsubscribed from.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ScheduledGuildEventUserRemoveEventArgs.User">
            <summary>
            The user that unsubscribed from the event.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.HeartbeatEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.Heartbeated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.HeartbeatEventArgs.Ping">
            <summary>
            Gets the round-trip time of the heartbeat.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.HeartbeatEventArgs.Timestamp">
            <summary>
            Gets the timestamp of the heartbeat.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.IntegrationCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.IntegrationCreated"/>
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.IntegrationCreateEventArgs.Integration">
            <summary>
            Gets the integration.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.IntegrationCreateEventArgs.Guild">
            <summary>
            Gets the guild the integration was added to.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.IntegrationDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.IntegrationDeleted"/>
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.IntegrationDeleteEventArgs.IntegrationId">
            <summary>
            Gets the id of the integration.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.IntegrationDeleteEventArgs.Guild">
            <summary>
            Gets the guild the integration was removed from.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.IntegrationDeleteEventArgs.Applicationid">
            <summary>
            Gets the id of the bot or OAuth2 application for the integration.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.IntegrationUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.IntegrationUpdated"/>
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.IntegrationUpdateEventArgs.Integration">
            <summary>
            Gets the integration.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.IntegrationUpdateEventArgs.Guild">
            <summary>
            Gets the guild the integration was updated in.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ComponentInteractionCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.ComponentInteractionCreated"/>.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ComponentInteractionCreateEventArgs.Id">
            <summary>
            The Id of the component that was interacted with.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ComponentInteractionCreateEventArgs.User">
            <summary>
            The user that invoked this interaction.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ComponentInteractionCreateEventArgs.Guild">
            <summary>
            The guild this interaction was invoked on, if any.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ComponentInteractionCreateEventArgs.Channel">
            <summary>
            The channel this interaction was invoked in.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ComponentInteractionCreateEventArgs.Values">
            <summary>
            The value(s) selected. Only applicable to SelectMenu components.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ComponentInteractionCreateEventArgs.Message">
            <summary>
            The message this interaction is attached to.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ComponentInteractionCreateEventArgs.Locale">
            <summary>
            The locale of the user that invoked this interaction.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ComponentInteractionCreateEventArgs.GuildLocale">
            <summary>
            The guild's locale that the user invoked in.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ContextMenuInteractionCreateEventArgs.Type">
            <summary>
            The type of context menu that was used. This is never <see cref="F:DSharpPlus.ApplicationCommandType.SlashCommand"/>.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ContextMenuInteractionCreateEventArgs.User">
            <summary>
            The user that invoked this interaction. Can be casted to a member if this was on a guild.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ContextMenuInteractionCreateEventArgs.TargetUser">
            <summary>
            The user this interaction targets, if applicable.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ContextMenuInteractionCreateEventArgs.TargetMessage">
            <summary>
            The message this interaction targets, if applicable.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.InteractionCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.InteractionCreated"/>
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.InteractionCreateEventArgs.Interaction">
            <summary>
            Gets the interaction data that was invoked.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ModalSubmitEventArgs">
            <summary>
            Fired when a modal is submitted. Note that this event is fired only if the modal is submitted by the user, and not if the modal is closed.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ModalSubmitEventArgs.Values">
            <summary>
            A dictionary of submitted fields, keyed on the custom id of the input component.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.InviteCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.InviteCreated"/>.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.InviteCreateEventArgs.Guild">
            <summary>
            Gets the guild that created the invite.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.InviteCreateEventArgs.Channel">
            <summary>
            Gets the channel that the invite is for.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.InviteCreateEventArgs.Invite">
            <summary>
            Gets the created invite.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.InviteDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.InviteDeleted"/>
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.InviteDeleteEventArgs.Guild">
            <summary>
            Gets the guild that deleted the invite.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.InviteDeleteEventArgs.Channel">
            <summary>
            Gets the channel that the invite was for.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.InviteDeleteEventArgs.Invite">
            <summary>
            Gets the deleted invite.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.MessageAcknowledgeEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.MessageAcknowledged"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageAcknowledgeEventArgs.Message">
            <summary>
            Gets the message that was acknowledged.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageAcknowledgeEventArgs.Channel">
            <summary>
            Gets the channel for which the message was acknowledged.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.MessageBulkDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.MessagesBulkDeleted"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageBulkDeleteEventArgs.Messages">
            <summary>
            Gets a collection of the deleted messages.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageBulkDeleteEventArgs.Channel">
            <summary>
            Gets the channel in which the deletion occurred.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageBulkDeleteEventArgs.Guild">
            <summary>
            Gets the guild in which the deletion occurred.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.MessageCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.MessageCreated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageCreateEventArgs.Message">
            <summary>
            Gets the message that was created.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageCreateEventArgs.Channel">
            <summary>
            Gets the channel this message belongs to.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageCreateEventArgs.Guild">
            <summary>
            Gets the guild this message belongs to.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageCreateEventArgs.Author">
            <summary>
            Gets the author of the message.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageCreateEventArgs.MentionedUsers">
            <summary>
            Gets the collection of mentioned users.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageCreateEventArgs.MentionedRoles">
            <summary>
            Gets the collection of mentioned roles.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageCreateEventArgs.MentionedChannels">
            <summary>
            Gets the collection of mentioned channels.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.MessageDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.MessageDeleted"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageDeleteEventArgs.Message">
            <summary>
            Gets the message that was deleted.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageDeleteEventArgs.Channel">
            <summary>
            Gets the channel this message belonged to.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageDeleteEventArgs.Guild">
            <summary>
            Gets the guild this message belonged to.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.MessageUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.MessageUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageUpdateEventArgs.Message">
            <summary>
            Gets the message that was updated.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageUpdateEventArgs.MessageBefore">
            <summary>
            Gets the message before it got updated. This property will be null if the message was not cached.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageUpdateEventArgs.Channel">
            <summary>
            Gets the channel this message belongs to.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageUpdateEventArgs.Guild">
            <summary>
            Gets the guild this message belongs to.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageUpdateEventArgs.Author">
            <summary>
            Gets the author of the message.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageUpdateEventArgs.MentionedUsers">
            <summary>
            Gets the collection of mentioned users.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageUpdateEventArgs.MentionedRoles">
            <summary>
            Gets the collection of mentioned roles.
            </summary>
            <remarks>
            Only shows the mentioned roles from <see cref="E:DSharpPlus.DiscordClient.MessageCreated" />. EDITS ARE NOT INCLUDED.
            </remarks>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageUpdateEventArgs.MentionedChannels">
            <summary>
            Gets the collection of mentioned channels.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.MessageReactionAddEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.MessageReactionAdded"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionAddEventArgs.Message">
            <summary>
            Gets the message for which the update occurred.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionAddEventArgs.Channel">
            <summary>
            Gets the channel to which this message belongs.
            </summary>
            <remarks>
            This will be <c>null</c> for an uncached channel, which will usually happen for when this event triggers on
            DM channels in which no prior messages were received or sent.
            </remarks>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionAddEventArgs.Guild">
            <summary>
            Gets the guild in which the reaction was added.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionAddEventArgs.User">
            <summary>
            Gets the user who created the reaction.
            <para>This can be cast to a <see cref="T:DSharpPlus.Entities.DiscordMember"/> if the reaction was in a guild.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionAddEventArgs.Emoji">
            <summary>
            Gets the emoji used for this reaction.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.MessageReactionRemoveEmojiEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.MessageReactionRemovedEmoji"/>
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionRemoveEmojiEventArgs.Channel">
            <summary>
            Gets the channel the removed reactions were in.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionRemoveEmojiEventArgs.Guild">
            <summary>
            Gets the guild the removed reactions were in.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionRemoveEmojiEventArgs.Message">
            <summary>
            Gets the message that had the removed reactions.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionRemoveEmojiEventArgs.Emoji">
            <summary>
            Gets the emoji of the reaction that was removed.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.MessageReactionRemoveEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.MessageReactionRemoved"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionRemoveEventArgs.Message">
            <summary>
            Gets the message for which the update occurred.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionRemoveEventArgs.Channel">
            <summary>
            Gets the channel to which this message belongs.
            </summary>
            <remarks>
            This will be <c>null</c> for an uncached channel, which will usually happen for when this event triggers on
            DM channels in which no prior messages were received or sent.
            </remarks>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionRemoveEventArgs.User">
            <summary>
            Gets the users whose reaction was removed.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionRemoveEventArgs.Guild">
            <summary>
            Gets the guild in which the reaction was deleted.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionRemoveEventArgs.Emoji">
            <summary>
            Gets the emoji used for this reaction.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.MessageReactionsClearEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.MessageReactionsCleared"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionsClearEventArgs.Message">
            <summary>
            Gets the message for which the update occurred.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionsClearEventArgs.Channel">
            <summary>
            Gets the channel to which this message belongs.
            </summary>
            <remarks>
            This will be <c>null</c> for an uncached channel, which will usually happen for when this event triggers on
            DM channels in which no prior messages were received or sent.
            </remarks>
        </member>
        <member name="P:DSharpPlus.EventArgs.MessageReactionsClearEventArgs.Guild">
            <summary>
            Gets the guild in which the reactions were cleared.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ReadyEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.Ready"/> event.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.SocketCloseEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.SocketClosed"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.SocketCloseEventArgs.CloseCode">
            <summary>
            Gets the close code sent by remote host.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.SocketCloseEventArgs.CloseMessage">
            <summary>
            Gets the close message sent by remote host.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.SocketErrorEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.SocketErrored"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.SocketErrorEventArgs.Exception">
            <summary>
            Gets the exception thrown by websocket client.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.SocketEventArgs">
            <summary>
            Represents basic socket event arguments.
            </summary>
        </member>
        <member name="M:DSharpPlus.EventArgs.SocketEventArgs.#ctor">
            <summary>
            Creates a new event argument container.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.SocketMessageEventArgs">
            <summary>
            Represents base class for raw socket message event arguments.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.SocketTextMessageEventArgs">
            <summary>
            Represents arguments for text message websocket event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.SocketTextMessageEventArgs.Message">
            <summary>
            Gets the received message string.
            </summary>
        </member>
        <member name="M:DSharpPlus.EventArgs.SocketTextMessageEventArgs.#ctor(System.String)">
            <summary>
            Creates a new instance of text message event arguments.
            </summary>
            <param name="message">Received message string.</param>
        </member>
        <member name="T:DSharpPlus.EventArgs.SocketBinaryMessageEventArgs">
            <summary>
            Represents arguments for binary message websocket event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.SocketBinaryMessageEventArgs.Message">
            <summary>
            Gets the received message bytes.
            </summary>
        </member>
        <member name="M:DSharpPlus.EventArgs.SocketBinaryMessageEventArgs.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of binary message event arguments.
            </summary>
            <param name="message">Received message bytes.</param>
        </member>
        <member name="T:DSharpPlus.EventArgs.StageInstanceCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.StageInstanceCreated"/>.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.StageInstanceCreateEventArgs.StageInstance">
            <summary>
            Gets the stage instance that was created.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.StageInstanceCreateEventArgs.Guild">
            <summary>
            Gets the guild the stage instance was created in.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.StageInstanceCreateEventArgs.Channel">
            <summary>
            Gets the channel the stage instance was created in.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.StageInstanceDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.StageInstanceDeleted"/>.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.StageInstanceDeleteEventArgs.StageInstance">
            <summary>
            Gets the stage instance that was deleted.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.StageInstanceDeleteEventArgs.Guild">
            <summary>
            Gets the guild the stage instance was in.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.StageInstanceDeleteEventArgs.Channel">
            <summary>
            Gets the channel the stage instance was in.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.StageInstanceUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.StageInstanceUpdated"/>.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.StageInstanceUpdateEventArgs.StageInstanceBefore">
            <summary>
            Gets the stage instance before the update.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.StageInstanceUpdateEventArgs.StageInstanceAfter">
            <summary>
            Gets the stage instance after the update.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.StageInstanceUpdateEventArgs.Guild">
            <summary>
            Gets the guild the stage instance is in.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.StageInstanceUpdateEventArgs.Channel">
            <summary>
            Gets the channel the stage instance is in.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.TypingStartEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.TypingStarted"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.TypingStartEventArgs.Channel">
            <summary>
            Gets the channel in which the indicator was triggered.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.TypingStartEventArgs.User">
            <summary>
            Gets the user that started typing.
            <para>This can be cast to a <see cref="T:DSharpPlus.Entities.DiscordMember"/> if the typing occurred in a guild.</para>
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.TypingStartEventArgs.Guild">
            <summary>
            Gets the guild in which the indicator was triggered.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.TypingStartEventArgs.StartedAt">
            <summary>
            Gets the date and time at which the user started typing.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.UnknownEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.UnknownEvent"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.UnknownEventArgs.EventName">
            <summary>
            Gets the event's name.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.UnknownEventArgs.Json">
            <summary>
            Gets the event's data.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.PresenceUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.PresenceUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.PresenceUpdateEventArgs.User">
            <summary>
            Gets the user whose presence was updated.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.PresenceUpdateEventArgs.Activity">
            <summary>
            Gets the user's new game.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.PresenceUpdateEventArgs.Status">
            <summary>
            Gets the user's status.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.PresenceUpdateEventArgs.PresenceBefore">
            <summary>
            Gets the user's old presence.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.PresenceUpdateEventArgs.PresenceAfter">
            <summary>
            Gets the user's new presence.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.PresenceUpdateEventArgs.UserBefore">
            <summary>
            Gets the user prior to presence update.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.PresenceUpdateEventArgs.UserAfter">
            <summary>
            Gets the user after the presence update.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.UserSettingsUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.UserSettingsUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.UserSettingsUpdateEventArgs.User">
            <summary>
            Gets the user whose settings were updated.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.UserSpeakingEventArgs">
            <summary>
            Represents arguments for UserSpeaking event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.UserSpeakingEventArgs.User">
            <summary>
            Gets the users whose speaking state changed.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.UserSpeakingEventArgs.SSRC">
            <summary>
            Gets the SSRC of the audio source.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.UserSpeakingEventArgs.Speaking">
            <summary>
            Gets whether this user is speaking.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.UserUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.UserUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.UserUpdateEventArgs.UserAfter">
            <summary>
            Gets the post-update user.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.UserUpdateEventArgs.UserBefore">
            <summary>
            Gets the pre-update user.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.VoiceServerUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.VoiceServerUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.VoiceServerUpdateEventArgs.Guild">
            <summary>
            Gets the guild for which the update occurred.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.VoiceServerUpdateEventArgs.Endpoint">
            <summary>
            Gets the new voice endpoint.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.VoiceServerUpdateEventArgs.VoiceToken">
            <summary>
            Gets the voice connection token.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.VoiceStateUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.VoiceStateUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.VoiceStateUpdateEventArgs.User">
            <summary>
            Gets the user whose voice state was updated.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.VoiceStateUpdateEventArgs.Guild">
            <summary>
            Gets the guild in which the update occurred.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.VoiceStateUpdateEventArgs.Channel">
            <summary>
            Gets the related voice channel.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.VoiceStateUpdateEventArgs.Before">
            <summary>
            Gets the voice state pre-update.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.VoiceStateUpdateEventArgs.After">
            <summary>
            Gets the voice state post-update.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.VoiceStateUpdateEventArgs.SessionId">
            <summary>
            Gets the ID of voice session.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.WebhooksUpdateEventArgs">
            <summary>
            Represents arguments to <see cref="E:DSharpPlus.DiscordClient.WebhooksUpdated"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.WebhooksUpdateEventArgs.Guild">
            <summary>
            Gets the guild that had its webhooks updated.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.WebhooksUpdateEventArgs.Channel">
            <summary>
            Gets the channel to which the webhook belongs to.
            </summary>
        </member>
        <member name="T:DSharpPlus.EventArgs.ZombiedEventArgs">
            <summary>
            Represents arguments for <see cref="E:DSharpPlus.DiscordClient.Zombied"/> event.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ZombiedEventArgs.Failures">
            <summary>
            Gets how many heartbeat failures have occured.
            </summary>
        </member>
        <member name="P:DSharpPlus.EventArgs.ZombiedEventArgs.GuildDownloadCompleted">
            <summary>
            Gets whether the zombie event occured whilst guilds are downloading.
            </summary>
        </member>
        <member name="T:DSharpPlus.Exceptions.BadRequestException">
            <summary>
            Represents an exception thrown when a malformed request is sent.
            </summary>
        </member>
        <member name="P:DSharpPlus.Exceptions.BadRequestException.Code">
            <summary>
            Gets the error code for this exception.
            </summary>
        </member>
        <member name="P:DSharpPlus.Exceptions.BadRequestException.Errors">
            <summary>
            Gets the form error responses in JSON format.
            </summary>
        </member>
        <member name="P:DSharpPlus.Exceptions.DiscordException.WebRequest">
            <summary>
            Gets the request that caused the exception.
            </summary>
        </member>
        <member name="P:DSharpPlus.Exceptions.DiscordException.WebResponse">
            <summary>
            Gets the response to the request.
            </summary>
        </member>
        <member name="P:DSharpPlus.Exceptions.DiscordException.JsonMessage">
            <summary>
            Gets the JSON message received.
            </summary>
        </member>
        <member name="T:DSharpPlus.Exceptions.NotFoundException">
            <summary>
            Represents an exception thrown when a requested resource is not found.
            </summary>
        </member>
        <member name="T:DSharpPlus.Exceptions.RateLimitException">
            <summary>
            Represents an exception thrown when too many requests are sent.
            </summary>
        </member>
        <member name="T:DSharpPlus.Exceptions.RequestSizeException">
            <summary>
            Represents an exception thrown when the request sent to Discord is too large.
            </summary>
        </member>
        <member name="T:DSharpPlus.Exceptions.ServerErrorException">
            <summary>
            Represents an exception thrown when Discord returns an Internal Server Error.
            </summary>
        </member>
        <member name="T:DSharpPlus.Exceptions.UnauthorizedException">
            <summary>
            Represents an exception thrown when requester doesn't have necessary permissions to complete the request.
            </summary>
        </member>
        <member name="T:DSharpPlus.Formatter">
            <summary>
            Contains markdown formatting helpers.
            </summary>
        </member>
        <member name="M:DSharpPlus.Formatter.Colorize(System.String,DSharpPlus.AnsiColor[])">
            <summary>
            Colorizes text based using ANSI escape codes. Escape codes are only properly rendered in code blocks. Resets are inserted automatically.
            </summary>
            <param name="text">The text to colorize.</param>
            <param name="styles"></param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.Formatter.BlockCode(System.String,System.String)">
            <summary>
            Creates a block of code.
            </summary>
            <param name="content">Contents of the block.</param>
            <param name="language">Language to use for highlighting.</param>
            <returns>Formatted block of code.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.InlineCode(System.String)">
            <summary>
            Creates inline code snippet.
            </summary>
            <param name="content">Contents of the snippet.</param>
            <returns>Formatted inline code snippet.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Timestamp(System.TimeSpan,DSharpPlus.TimestampFormat)">
            <summary>
            Creates a rendered timestamp.
            </summary>
            <param name="time">The time from now.</param>
            <param name="format">The format to render the timestamp in. Defaults to relative.</param>
            <returns>A formatted timestamp.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Timestamp(System.DateTime,DSharpPlus.TimestampFormat)">
            <summary>
            Creates a rendered timestamp.
            </summary>
            <param name="time">The time from now.</param>
            <param name="format">The format to render the timestamp in. Defaults to relative.</param>
            <returns>A formatted timestamp.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Timestamp(System.DateTimeOffset,DSharpPlus.TimestampFormat)">
            <summary>
            Creates a rendered timestamp.
            </summary>
            <param name="time">Timestamp to format.</param>
            <param name="format">The format to render the timestamp in. Defaults to relative.</param>
            <returns>A formatted timestamp.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Bold(System.String)">
            <summary>
            Creates bold text.
            </summary>
            <param name="content">Text to bolden.</param>
            <returns>Formatted text.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Italic(System.String)">
            <summary>
            Creates italicized text.
            </summary>
            <param name="content">Text to italicize.</param>
            <returns>Formatted text.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Spoiler(System.String)">
            <summary>
            Creates spoiler from text.
            </summary>
            <param name="content">Text to spoilerize.</param>
            <returns>Formatted text.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Underline(System.String)">
            <summary>
            Creates underlined text.
            </summary>
            <param name="content">Text to underline.</param>
            <returns>Formatted text.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Strike(System.String)">
            <summary>
            Creates strikethrough text.
            </summary>
            <param name="content">Text to strikethrough.</param>
            <returns>Formatted text.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.EmbedlessUrl(System.Uri)">
            <summary>
            Creates a URL that won't create a link preview.
            </summary>
            <param name="url">Url to prevent from being previewed.</param>
            <returns>Formatted url.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.MaskedUrl(System.String,System.Uri,System.String)">
            <summary>
            Creates a masked link. This link will display as specified text, and alternatively provided alt text. This can only be used in embeds.
            </summary>
            <param name="text">Text to display the link as.</param>
            <param name="url">Url that the link will lead to.</param>
            <param name="alt_text">Alt text to display on hover.</param>
            <returns>Formatted url.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Sanitize(System.String)">
            <summary>
            Escapes all markdown formatting from specified text.
            </summary>
            <param name="text">Text to sanitize.</param>
            <returns>Sanitized text.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Strip(System.String)">
            <summary>
            Removes all markdown formatting from specified text.
            </summary>
            <param name="text">Text to strip of formatting.</param>
            <returns>Formatting-stripped text.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Mention(DSharpPlus.Entities.DiscordUser,System.Boolean)">
            <summary>
            Creates a mention for specified user or member. Can optionally specify to resolve nicknames.
            </summary>
            <param name="user">User to create mention for.</param>
            <param name="nickname">Whether the mention should resolve nicknames or not.</param>
            <returns>Formatted mention.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Mention(DSharpPlus.Entities.DiscordChannel)">
            <summary>
            Creates a mention for specified channel.
            </summary>
            <param name="channel">Channel to mention.</param>
            <returns>Formatted mention.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Mention(DSharpPlus.Entities.DiscordRole)">
            <summary>
            Creates a mention for specified role.
            </summary>
            <param name="role">Role to mention.</param>
            <returns>Formatted mention.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Mention(DSharpPlus.Entities.DiscordApplicationCommand)">
            <summary>
            Creates a mention for specified application command.
            </summary>
            <param name="command">Application command to mention.</param>
            <returns>Formatted mention.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.Emoji(DSharpPlus.Entities.DiscordEmoji)">
            <summary>
            Creates a custom emoji string.
            </summary>
            <param name="emoji">Emoji to display.</param>
            <returns>Formatted emoji.</returns>
        </member>
        <member name="M:DSharpPlus.Formatter.AttachedImageUrl(System.String)">
            <summary>
            Creates a url for using attachments in embeds. This can only be used as an Image URL, Thumbnail URL, Author icon URL or Footer icon URL.
            </summary>
            <param name="filename">Name of attached image to display</param>
            <returns></returns>
        </member>
        <member name="T:DSharpPlus.ImageTool">
            <summary>
            Tool to detect image formats and convert from binary data to base64 strings.
            </summary>
        </member>
        <member name="P:DSharpPlus.ImageTool.SourceStream">
            <summary>
            Gets the stream this tool is operating on.
            </summary>
        </member>
        <member name="M:DSharpPlus.ImageTool.#ctor(System.IO.Stream)">
            <summary>
            Creates a new image tool from given stream.
            </summary>
            <param name="stream">Stream to work with.</param>
        </member>
        <member name="M:DSharpPlus.ImageTool.GetFormat">
            <summary>
            Detects the format of this image.
            </summary>
            <returns>Detected format.</returns>
        </member>
        <member name="M:DSharpPlus.ImageTool.GetBase64">
            <summary>
            Converts this image into base64 data format string.
            </summary>
            <returns>Data-scheme base64 string.</returns>
        </member>
        <member name="M:DSharpPlus.ImageTool.Dispose">
            <summary>
            Disposes this image tool.
            </summary>
        </member>
        <member name="T:DSharpPlus.ImageFormat">
            <summary>
            Represents format of an image.
            </summary>
        </member>
        <member name="T:DSharpPlus.LoggerEvents">
            <summary>
            Contains well-defined event IDs used by core of DSharpPlus.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.Misc">
            <summary>
            Miscellaneous events, that do not fit in any other category.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.Startup">
            <summary>
            Events pertaining to startup tasks.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.ConnectionFailure">
            <summary>
            Events typically emitted whenever WebSocket connections fail or are terminated.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.SessionUpdate">
            <summary>
            Events pertaining to Discord-issued session state updates.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.EventHandlerException">
            <summary>
            Events emitted when exceptions are thrown in handlers attached to async events.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.WebSocketReceive">
            <summary>
            Events emitted for various high-level WebSocket receive events.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.WebSocketReceiveRaw">
            <summary>
            Events emitted for various low-level WebSocket receive events.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.WebSocketSendRaw">
            <summary>
            Events emitted for various low-level WebSocket send events.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.WebSocketReceiveFailure">
            <summary>
            Events emitted for various WebSocket payload processing failures, typically when deserialization or decoding fails.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.Heartbeat">
            <summary>
            Events pertaining to connection lifecycle, specifically, heartbeats.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.HeartbeatFailure">
            <summary>
            Events pertaining to various heartbeat failures, typically fatal.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.ConnectionClose">
            <summary>
            Events pertaining to clean connection closes.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.RestError">
            <summary>
            Events emitted when REST processing fails for any reason.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.ShardStartup">
            <summary>
            Events pertaining to the <see cref="T:DSharpPlus.DiscordShardedClient"/> shard startup.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.RatelimitHit">
            <summary>
            Events pertaining to ratelimit exhaustion.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.RatelimitDiag">
            <summary>
            Events pertaining to ratelimit diagnostics. Typically contain raw bucket info.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.RatelimitPreemptive">
            <summary>
            Events emitted when a ratelimit is exhausted and a request is preemtively blocked.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.AuditLog">
            <summary>
            Events pertaining to audit log processing.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.GatewayWsRx">
            <summary>
            Events containing raw (but decompressed) payloads, received from Discord Gateway.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.GatewayWsTx">
            <summary>
            Events containing raw payloads, as they're being sent to Discord Gateway.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.Intents">
            <summary>
            Events pertaining to Gateway Intents. Typically diagnostic information.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.ShardShutdown">
            <summary>
            Events pertaining to autosharded client shard shutdown, clean or otherwise.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.ShardClientError">
            <summary>
            Events pertaining to the <see cref="T:DSharpPlus.DiscordShardedClient"/>'s shards not initializing correctly.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.RestRx">
            <summary>
            Events containing raw payloads, as they're received from Discord's REST API.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.RestTx">
            <summary>
            Events containing raw payloads, as they're sent to Discord's REST API.
            </summary>
        </member>
        <member name="P:DSharpPlus.LoggerEvents.ShardRest">
            <summary>
            Events pertaining to Discord API requests from the <see cref="T:DSharpPlus.DiscordShardedClient"/>.
            </summary>
        </member>
        <member name="T:DSharpPlus.ReadOnlyConcurrentDictionary`2">
            <summary>
            Read-only view of a given <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="M:DSharpPlus.ReadOnlyConcurrentDictionary`2.#ctor(System.Collections.Concurrent.ConcurrentDictionary{`0,`1})">
            <summary>
            Creates a new read-only view of the given dictionary.
            </summary>
            <param name="underlyingDict">Dictionary to create a view over.</param>
        </member>
        <member name="T:DSharpPlus.ReadOnlySet`1">
            <summary>
            Read-only view of a given <see cref="T:System.Collections.Generic.ISet`1"/>.
            </summary>
            <typeparam name="T">Type of the items in the set.</typeparam>
        </member>
        <member name="M:DSharpPlus.ReadOnlySet`1.#ctor(System.Collections.Generic.ISet{`0})">
            <summary>
            Creates a new read-only view of the given set.
            </summary>
            <param name="sourceSet">Set to create a view over.</param>
        </member>
        <member name="P:DSharpPlus.ReadOnlySet`1.Count">
            <summary>
            Gets the number of items in the underlying set.
            </summary>
        </member>
        <member name="M:DSharpPlus.ReadOnlySet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this set view.
            </summary>
            <returns>Enumerator for the underlying set.</returns>
        </member>
        <member name="M:DSharpPlus.ReadOnlySet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this set view.
            </summary>
            <returns>Enumerator for the underlying set.</returns>
        </member>
        <member name="T:DSharpPlus.RingBuffer`1">
            <summary>
            A circular buffer collection.
            </summary>
            <typeparam name="T">Type of elements within this ring buffer.</typeparam>
        </member>
        <member name="P:DSharpPlus.RingBuffer`1.CurrentIndex">
            <summary>
            Gets the current index of the buffer items.
            </summary>
        </member>
        <member name="P:DSharpPlus.RingBuffer`1.Capacity">
            <summary>
            Gets the capacity of this ring buffer.
            </summary>
        </member>
        <member name="P:DSharpPlus.RingBuffer`1.Count">
            <summary>
            Gets the number of items in this ring buffer.
            </summary>
        </member>
        <member name="P:DSharpPlus.RingBuffer`1.IsReadOnly">
            <summary>
            Gets whether this ring buffer is read-only.
            </summary>
        </member>
        <member name="P:DSharpPlus.RingBuffer`1.InternalBuffer">
            <summary>
            Gets or sets the internal collection of items.
            </summary>
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.#ctor(System.Int32)">
            <summary>
            Creates a new ring buffer with specified size.
            </summary>
            <param name="size">Size of the buffer to create.</param>
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new ring buffer, filled with specified elements.
            </summary>
            <param name="elements">Elements to fill the buffer with.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Creates a new ring buffer, filled with specified elements, and starting at specified index.
            </summary>
            <param name="elements">Elements to fill the buffer with.</param>
            <param name="index">Starting element index.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.Add(`0)">
            <summary>
            Inserts an item into this ring buffer.
            </summary>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.TryGet(System.Func{`0,System.Boolean},`0@)">
            <summary>
            Gets first item from the buffer that matches the predicate.
            </summary>
            <param name="predicate">Predicate used to find the item.</param>
            <param name="item">Item that matches the predicate, or default value for the type of the items in this ring buffer, if one is not found.</param>
            <returns>Whether an item that matches the predicate was found or not.</returns>
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.Clear">
            <summary>
            Clears this ring buffer and resets the current item index.
            </summary>
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.Contains(`0)">
            <summary>
            Checks whether given item is present in the buffer. This method is not implemented. Use <see cref="M:DSharpPlus.RingBuffer`1.Contains(System.Func{`0,System.Boolean})"/> instead.
            </summary>
            <param name="item">Item to check for.</param>
            <returns>Whether the buffer contains the item.</returns>
            <exception cref="T:System.NotImplementedException" />
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.Contains(System.Func{`0,System.Boolean})">
            <summary>
            Checks whether given item is present in the buffer using given predicate to find it.
            </summary>
            <param name="predicate">Predicate used to check for the item.</param>
            <returns>Whether the buffer contains the item.</returns>
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies this ring buffer to target array, attempting to maintain the order of items within.
            </summary>
            <param name="array">Target array.</param>
            <param name="index">Index starting at which to copy the items to.</param>
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.Remove(`0)">
            <summary>
            Removes an item from the buffer. This method is not implemented. Use <see cref="M:DSharpPlus.RingBuffer`1.Remove(System.Func{`0,System.Boolean})"/> instead.
            </summary>
            <param name="item">Item to remove.</param>
            <returns>Whether an item was removed or not.</returns>
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.Remove(System.Func{`0,System.Boolean})">
            <summary>
            Removes an item from the buffer using given predicate to find it.
            </summary>
            <param name="predicate">Predicate used to find the item.</param>
            <returns>Whether an item was removed or not.</returns>
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.GetEnumerator">
            <summary>
            Returns an enumerator for this ring buffer.
            </summary>
            <returns>Enumerator for this ring buffer.</returns>
        </member>
        <member name="M:DSharpPlus.RingBuffer`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for this ring buffer.
            </summary>
            <returns>Enumerator for this ring buffer.</returns>
        </member>
        <member name="T:DSharpPlus.Utilities">
            <summary>
            Various Discord-related utilities.
            </summary>
        </member>
        <member name="P:DSharpPlus.Utilities.VersionHeader">
            <summary>
            Gets the version of the library
            </summary>
        </member>
        <member name="M:DSharpPlus.Utilities.GetShardId(System.UInt64,System.Int32)">
            <summary>
            Gets a shard id from a guild id and total shard count.
            </summary>
            <param name="guildId">The guild id the shard is on.</param>
            <param name="shardCount">The total amount of shards.</param>
            <returns>The shard id.</returns>
        </member>
        <member name="M:DSharpPlus.Utilities.GetDateTimeOffset(System.Int64,System.Boolean)">
            <summary>
            Helper method to create a <see cref="T:System.DateTimeOffset"/> from Unix time seconds for targets that do not support this natively.
            </summary>
            <param name="unixTime">Unix time seconds to convert.</param>
            <param name="shouldThrow">Whether the method should throw on failure. Defaults to true.</param>
            <returns>Calculated <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Utilities.GetDateTimeOffsetFromMilliseconds(System.Int64,System.Boolean)">
            <summary>
            Helper method to create a <see cref="T:System.DateTimeOffset"/> from Unix time milliseconds for targets that do not support this natively.
            </summary>
            <param name="unixTime">Unix time milliseconds to convert.</param>
            <param name="shouldThrow">Whether the method should throw on failure. Defaults to true.</param>
            <returns>Calculated <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:DSharpPlus.Utilities.GetUnixTime(System.DateTimeOffset)">
            <summary>
            Helper method to calculate Unix time seconds from a <see cref="T:System.DateTimeOffset"/> for targets that do not support this natively.
            </summary>
            <param name="dto"><see cref="T:System.DateTimeOffset"/> to calculate Unix time for.</param>
            <returns>Calculated Unix time.</returns>
        </member>
        <member name="M:DSharpPlus.Utilities.GetSnowflakeTime(System.UInt64)">
            <summary>
            Computes a timestamp from a given snowflake.
            </summary>
            <param name="snowflake">Snowflake to compute a timestamp from.</param>
            <returns>Computed timestamp.</returns>
        </member>
        <member name="M:DSharpPlus.Utilities.ToPermissionString(DSharpPlus.Permissions)">
            <summary>
            Converts this <see cref="T:DSharpPlus.Permissions"/> into human-readable format.
            </summary>
            <param name="perm">Permissions enumeration to convert.</param>
            <returns>Human-readable permissions.</returns>
        </member>
        <member name="M:DSharpPlus.Utilities.Contains(System.String,System.Char[])">
            <summary>
            Checks whether this string contains given characters.
            </summary>
            <param name="str">String to check.</param>
            <param name="characters">Characters to check for.</param>
            <returns>Whether the string contained these characters.</returns>
        </member>
    </members>
</doc>
